{"version":3,"file":"index-B9tm7Rbm.js","sources":["../../node_modules/matter-js/build/matter.js","../../src/core/Engine.ts","../../src/components/BodyFactory.ts","../../src/components/DebugControl.ts","../../src/components/InputHandler.ts","../../src/components/BoundaryWalls.ts","../../src/components/InitialShapes.ts","../../src/utils/BodyWrapper.ts","../../src/main.ts"],"sourcesContent":["/*!\n * matter-js 0.20.0 by @liabru\n * http://brm.io/matter-js/\n * License MIT\n * \n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Matter\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Matter\"] = factory();\n\telse\n\t\troot[\"Matter\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 20);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Common` module contains utility functions that are common to all modules.\n*\n* @class Common\n*/\n\nvar Common = {};\n\nmodule.exports = Common;\n\n(function() {\n\n    Common._baseDelta = 1000 / 60;\n    Common._nextId = 0;\n    Common._seed = 0;\n    Common._nowStartTime = +(new Date());\n    Common._warnedOnce = {};\n    Common._decomp = null;\n    \n    /**\n     * Extends the object in the first argument using the object in the second argument.\n     * @method extend\n     * @param {} obj\n     * @param {boolean} deep\n     * @return {} obj extended\n     */\n    Common.extend = function(obj, deep) {\n        var argsStart,\n            args,\n            deepClone;\n\n        if (typeof deep === 'boolean') {\n            argsStart = 2;\n            deepClone = deep;\n        } else {\n            argsStart = 1;\n            deepClone = true;\n        }\n\n        for (var i = argsStart; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            if (source) {\n                for (var prop in source) {\n                    if (deepClone && source[prop] && source[prop].constructor === Object) {\n                        if (!obj[prop] || obj[prop].constructor === Object) {\n                            obj[prop] = obj[prop] || {};\n                            Common.extend(obj[prop], deepClone, source[prop]);\n                        } else {\n                            obj[prop] = source[prop];\n                        }\n                    } else {\n                        obj[prop] = source[prop];\n                    }\n                }\n            }\n        }\n        \n        return obj;\n    };\n\n    /**\n     * Creates a new clone of the object, if deep is true references will also be cloned.\n     * @method clone\n     * @param {} obj\n     * @param {bool} deep\n     * @return {} obj cloned\n     */\n    Common.clone = function(obj, deep) {\n        return Common.extend({}, deep, obj);\n    };\n\n    /**\n     * Returns the list of keys for the given object.\n     * @method keys\n     * @param {} obj\n     * @return {string[]} keys\n     */\n    Common.keys = function(obj) {\n        if (Object.keys)\n            return Object.keys(obj);\n\n        // avoid hasOwnProperty for performance\n        var keys = [];\n        for (var key in obj)\n            keys.push(key);\n        return keys;\n    };\n\n    /**\n     * Returns the list of values for the given object.\n     * @method values\n     * @param {} obj\n     * @return {array} Array of the objects property values\n     */\n    Common.values = function(obj) {\n        var values = [];\n        \n        if (Object.keys) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                values.push(obj[keys[i]]);\n            }\n            return values;\n        }\n        \n        // avoid hasOwnProperty for performance\n        for (var key in obj)\n            values.push(obj[key]);\n        return values;\n    };\n\n    /**\n     * Gets a value from `base` relative to the `path` string.\n     * @method get\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} The object at the given path\n     */\n    Common.get = function(obj, path, begin, end) {\n        path = path.split('.').slice(begin, end);\n\n        for (var i = 0; i < path.length; i += 1) {\n            obj = obj[path[i]];\n        }\n\n        return obj;\n    };\n\n    /**\n     * Sets a value on `base` relative to the given `path` string.\n     * @method set\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {} val The value to set\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} Pass through `val` for chaining\n     */\n    Common.set = function(obj, path, val, begin, end) {\n        var parts = path.split('.').slice(begin, end);\n        Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n        return val;\n    };\n\n    /**\n     * Shuffles the given array in-place.\n     * The function uses a seeded random generator.\n     * @method shuffle\n     * @param {array} array\n     * @return {array} array shuffled randomly\n     */\n    Common.shuffle = function(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Common.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    };\n\n    /**\n     * Randomly chooses a value from a list with equal probability.\n     * The function uses a seeded random generator.\n     * @method choose\n     * @param {array} choices\n     * @return {object} A random choice object from the array\n     */\n    Common.choose = function(choices) {\n        return choices[Math.floor(Common.random() * choices.length)];\n    };\n\n    /**\n     * Returns true if the object is a HTMLElement, otherwise false.\n     * @method isElement\n     * @param {object} obj\n     * @return {boolean} True if the object is a HTMLElement, otherwise false\n     */\n    Common.isElement = function(obj) {\n        if (typeof HTMLElement !== 'undefined') {\n            return obj instanceof HTMLElement;\n        }\n\n        return !!(obj && obj.nodeType && obj.nodeName);\n    };\n\n    /**\n     * Returns true if the object is an array.\n     * @method isArray\n     * @param {object} obj\n     * @return {boolean} True if the object is an array, otherwise false\n     */\n    Common.isArray = function(obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n\n    /**\n     * Returns true if the object is a function.\n     * @method isFunction\n     * @param {object} obj\n     * @return {boolean} True if the object is a function, otherwise false\n     */\n    Common.isFunction = function(obj) {\n        return typeof obj === \"function\";\n    };\n\n    /**\n     * Returns true if the object is a plain object.\n     * @method isPlainObject\n     * @param {object} obj\n     * @return {boolean} True if the object is a plain object, otherwise false\n     */\n    Common.isPlainObject = function(obj) {\n        return typeof obj === 'object' && obj.constructor === Object;\n    };\n\n    /**\n     * Returns true if the object is a string.\n     * @method isString\n     * @param {object} obj\n     * @return {boolean} True if the object is a string, otherwise false\n     */\n    Common.isString = function(obj) {\n        return toString.call(obj) === '[object String]';\n    };\n    \n    /**\n     * Returns the given value clamped between a minimum and maximum value.\n     * @method clamp\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} The value clamped between min and max inclusive\n     */\n    Common.clamp = function(value, min, max) {\n        if (value < min)\n            return min;\n        if (value > max)\n            return max;\n        return value;\n    };\n    \n    /**\n     * Returns the sign of the given value.\n     * @method sign\n     * @param {number} value\n     * @return {number} -1 if negative, +1 if 0 or positive\n     */\n    Common.sign = function(value) {\n        return value < 0 ? -1 : 1;\n    };\n    \n    /**\n     * Returns the current timestamp since the time origin (e.g. from page load).\n     * The result is in milliseconds and will use high-resolution timing if available.\n     * @method now\n     * @return {number} the current timestamp in milliseconds\n     */\n    Common.now = function() {\n        if (typeof window !== 'undefined' && window.performance) {\n            if (window.performance.now) {\n                return window.performance.now();\n            } else if (window.performance.webkitNow) {\n                return window.performance.webkitNow();\n            }\n        }\n\n        if (Date.now) {\n            return Date.now();\n        }\n\n        return (new Date()) - Common._nowStartTime;\n    };\n    \n    /**\n     * Returns a random value between a minimum and a maximum value inclusive.\n     * The function uses a seeded random generator.\n     * @method random\n     * @param {number} min\n     * @param {number} max\n     * @return {number} A random number between min and max inclusive\n     */\n    Common.random = function(min, max) {\n        min = (typeof min !== \"undefined\") ? min : 0;\n        max = (typeof max !== \"undefined\") ? max : 1;\n        return min + _seededRandom() * (max - min);\n    };\n\n    var _seededRandom = function() {\n        // https://en.wikipedia.org/wiki/Linear_congruential_generator\n        Common._seed = (Common._seed * 9301 + 49297) % 233280;\n        return Common._seed / 233280;\n    };\n\n    /**\n     * Converts a CSS hex colour string into an integer.\n     * @method colorToNumber\n     * @param {string} colorString\n     * @return {number} An integer representing the CSS hex string\n     */\n    Common.colorToNumber = function(colorString) {\n        colorString = colorString.replace('#','');\n\n        if (colorString.length == 3) {\n            colorString = colorString.charAt(0) + colorString.charAt(0)\n                        + colorString.charAt(1) + colorString.charAt(1)\n                        + colorString.charAt(2) + colorString.charAt(2);\n        }\n\n        return parseInt(colorString, 16);\n    };\n\n    /**\n     * The console logging level to use, where each level includes all levels above and excludes the levels below.\n     * The default level is 'debug' which shows all console messages.  \n     *\n     * Possible level values are:\n     * - 0 = None\n     * - 1 = Debug\n     * - 2 = Info\n     * - 3 = Warn\n     * - 4 = Error\n     * @static\n     * @property logLevel\n     * @type {Number}\n     * @default 1\n     */\n    Common.logLevel = 1;\n\n    /**\n     * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method log\n     * @param ...objs {} The objects to log.\n     */\n    Common.log = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method info\n     * @param ...objs {} The objects to log.\n     */\n    Common.info = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n            console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method warn\n     * @param ...objs {} The objects to log.\n     */\n    Common.warn = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Uses `Common.warn` to log the given message one time only.\n     * @method warnOnce\n     * @param ...objs {} The objects to log.\n     */\n    Common.warnOnce = function() {\n        var message = Array.prototype.slice.call(arguments).join(' ');\n\n        if (!Common._warnedOnce[message]) {\n            Common.warn(message);\n            Common._warnedOnce[message] = true;\n        }\n    };\n\n    /**\n     * Shows a deprecated console warning when the function on the given object is called.\n     * The target function will be replaced with a new function that first shows the warning\n     * and then calls the original function.\n     * @method deprecated\n     * @param {object} obj The object or module\n     * @param {string} name The property name of the function on obj\n     * @param {string} warning The one-time message to show if the function is called\n     */\n    Common.deprecated = function(obj, prop, warning) {\n        obj[prop] = Common.chain(function() {\n            Common.warnOnce('🔅 deprecated 🔅', warning);\n        }, obj[prop]);\n    };\n\n    /**\n     * Returns the next unique sequential ID.\n     * @method nextId\n     * @return {Number} Unique sequential ID\n     */\n    Common.nextId = function() {\n        return Common._nextId++;\n    };\n\n    /**\n     * A cross browser compatible indexOf implementation.\n     * @method indexOf\n     * @param {array} haystack\n     * @param {object} needle\n     * @return {number} The position of needle in haystack, otherwise -1.\n     */\n    Common.indexOf = function(haystack, needle) {\n        if (haystack.indexOf)\n            return haystack.indexOf(needle);\n\n        for (var i = 0; i < haystack.length; i++) {\n            if (haystack[i] === needle)\n                return i;\n        }\n\n        return -1;\n    };\n\n    /**\n     * A cross browser compatible array map implementation.\n     * @method map\n     * @param {array} list\n     * @param {function} func\n     * @return {array} Values from list transformed by func.\n     */\n    Common.map = function(list, func) {\n        if (list.map) {\n            return list.map(func);\n        }\n\n        var mapped = [];\n\n        for (var i = 0; i < list.length; i += 1) {\n            mapped.push(func(list[i]));\n        }\n\n        return mapped;\n    };\n\n    /**\n     * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n     * Circular dependencies are allowed.\n     * @method topologicalSort\n     * @param {object} graph\n     * @return {array} Partially ordered set of vertices in topological order.\n     */\n    Common.topologicalSort = function(graph) {\n        // https://github.com/mgechev/javascript-algorithms\n        // Copyright (c) Minko Gechev (MIT license)\n        // Modifications: tidy formatting and naming\n        var result = [],\n            visited = [],\n            temp = [];\n\n        for (var node in graph) {\n            if (!visited[node] && !temp[node]) {\n                Common._topologicalSort(node, visited, temp, graph, result);\n            }\n        }\n\n        return result;\n    };\n\n    Common._topologicalSort = function(node, visited, temp, graph, result) {\n        var neighbors = graph[node] || [];\n        temp[node] = true;\n\n        for (var i = 0; i < neighbors.length; i += 1) {\n            var neighbor = neighbors[i];\n\n            if (temp[neighbor]) {\n                // skip circular dependencies\n                continue;\n            }\n\n            if (!visited[neighbor]) {\n                Common._topologicalSort(neighbor, visited, temp, graph, result);\n            }\n        }\n\n        temp[node] = false;\n        visited[node] = true;\n\n        result.push(node);\n    };\n\n    /**\n     * Takes _n_ functions as arguments and returns a new function that calls them in order.\n     * The arguments applied when calling the new function will also be applied to every function passed.\n     * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n     * Therefore if a passed function does not return a value, the previously returned value is maintained.\n     * After all passed functions have been called the new function returns the last returned value (if any).\n     * If any of the passed functions are a chain, then the chain will be flattened.\n     * @method chain\n     * @param ...funcs {function} The functions to chain.\n     * @return {function} A new function that calls the passed functions in order.\n     */\n    Common.chain = function() {\n        var funcs = [];\n\n        for (var i = 0; i < arguments.length; i += 1) {\n            var func = arguments[i];\n\n            if (func._chained) {\n                // flatten already chained functions\n                funcs.push.apply(funcs, func._chained);\n            } else {\n                funcs.push(func);\n            }\n        }\n\n        var chain = function() {\n            // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n            var lastResult,\n                args = new Array(arguments.length);\n\n            for (var i = 0, l = arguments.length; i < l; i++) {\n                args[i] = arguments[i];\n            }\n\n            for (i = 0; i < funcs.length; i += 1) {\n                var result = funcs[i].apply(lastResult, args);\n\n                if (typeof result !== 'undefined') {\n                    lastResult = result;\n                }\n            }\n\n            return lastResult;\n        };\n\n        chain._chained = funcs;\n\n        return chain;\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathBefore\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathBefore = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            func,\n            Common.get(base, path)\n        ));\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathAfter\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathAfter = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            Common.get(base, path),\n            func\n        ));\n    };\n\n    /**\n     * Provide the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module to enable\n     * concave vertex decomposition support when using `Bodies.fromVertices` e.g. `Common.setDecomp(require('poly-decomp'))`.\n     * @method setDecomp\n     * @param {} decomp The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module.\n     */\n    Common.setDecomp = function(decomp) {\n        Common._decomp = decomp;\n    };\n\n    /**\n     * Returns the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module provided through `Common.setDecomp`,\n     * otherwise returns the global `decomp` if set.\n     * @method getDecomp\n     * @return {} The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module if provided.\n     */\n    Common.getDecomp = function() {\n        // get user provided decomp if set\n        var decomp = Common._decomp;\n\n        try {\n            // otherwise from window global\n            if (!decomp && typeof window !== 'undefined') {\n                decomp = window.decomp;\n            }\n    \n            // otherwise from node global\n            if (!decomp && typeof global !== 'undefined') {\n                decomp = global.decomp;\n            }\n        } catch (e) {\n            // decomp not available\n            decomp = null;\n        }\n\n        return decomp;\n    };\n})();\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n*\n* @class Bounds\n*/\n\nvar Bounds = {};\n\nmodule.exports = Bounds;\n\n(function() {\n\n    /**\n     * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n     * @method create\n     * @param {vertices} vertices\n     * @return {bounds} A new bounds object\n     */\n    Bounds.create = function(vertices) {\n        var bounds = { \n            min: { x: 0, y: 0 }, \n            max: { x: 0, y: 0 }\n        };\n\n        if (vertices)\n            Bounds.update(bounds, vertices);\n        \n        return bounds;\n    };\n\n    /**\n     * Updates bounds using the given vertices and extends the bounds given a velocity.\n     * @method update\n     * @param {bounds} bounds\n     * @param {vertices} vertices\n     * @param {vector} velocity\n     */\n    Bounds.update = function(bounds, vertices, velocity) {\n        bounds.min.x = Infinity;\n        bounds.max.x = -Infinity;\n        bounds.min.y = Infinity;\n        bounds.max.y = -Infinity;\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n        }\n        \n        if (velocity) {\n            if (velocity.x > 0) {\n                bounds.max.x += velocity.x;\n            } else {\n                bounds.min.x += velocity.x;\n            }\n            \n            if (velocity.y > 0) {\n                bounds.max.y += velocity.y;\n            } else {\n                bounds.min.y += velocity.y;\n            }\n        }\n    };\n\n    /**\n     * Returns true if the bounds contains the given point.\n     * @method contains\n     * @param {bounds} bounds\n     * @param {vector} point\n     * @return {boolean} True if the bounds contain the point, otherwise false\n     */\n    Bounds.contains = function(bounds, point) {\n        return point.x >= bounds.min.x && point.x <= bounds.max.x \n               && point.y >= bounds.min.y && point.y <= bounds.max.y;\n    };\n\n    /**\n     * Returns true if the two bounds intersect.\n     * @method overlaps\n     * @param {bounds} boundsA\n     * @param {bounds} boundsB\n     * @return {boolean} True if the bounds overlap, otherwise false\n     */\n    Bounds.overlaps = function(boundsA, boundsB) {\n        return (boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x\n                && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y);\n    };\n\n    /**\n     * Translates the bounds by the given vector.\n     * @method translate\n     * @param {bounds} bounds\n     * @param {vector} vector\n     */\n    Bounds.translate = function(bounds, vector) {\n        bounds.min.x += vector.x;\n        bounds.max.x += vector.x;\n        bounds.min.y += vector.y;\n        bounds.max.y += vector.y;\n    };\n\n    /**\n     * Shifts the bounds to the given position.\n     * @method shift\n     * @param {bounds} bounds\n     * @param {vector} position\n     */\n    Bounds.shift = function(bounds, position) {\n        var deltaX = bounds.max.x - bounds.min.x,\n            deltaY = bounds.max.y - bounds.min.y;\n            \n        bounds.min.x = position.x;\n        bounds.max.x = position.x + deltaX;\n        bounds.min.y = position.y;\n        bounds.max.y = position.y + deltaY;\n    };\n    \n})();\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\n* Vectors are the basis of all the geometry related operations in the engine.\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vector\n*/\n\n// TODO: consider params for reusing vector objects\n\nvar Vector = {};\n\nmodule.exports = Vector;\n\n(function() {\n\n    /**\n     * Creates a new vector.\n     * @method create\n     * @param {number} x\n     * @param {number} y\n     * @return {vector} A new vector\n     */\n    Vector.create = function(x, y) {\n        return { x: x || 0, y: y || 0 };\n    };\n\n    /**\n     * Returns a new vector with `x` and `y` copied from the given `vector`.\n     * @method clone\n     * @param {vector} vector\n     * @return {vector} A new cloned vector\n     */\n    Vector.clone = function(vector) {\n        return { x: vector.x, y: vector.y };\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector.\n     * @method magnitude\n     * @param {vector} vector\n     * @return {number} The magnitude of the vector\n     */\n    Vector.magnitude = function(vector) {\n        return Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n     * @method magnitudeSquared\n     * @param {vector} vector\n     * @return {number} The squared magnitude of the vector\n     */\n    Vector.magnitudeSquared = function(vector) {\n        return (vector.x * vector.x) + (vector.y * vector.y);\n    };\n\n    /**\n     * Rotates the vector about (0, 0) by specified angle.\n     * @method rotate\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} [output]\n     * @return {vector} The vector rotated about (0, 0)\n     */\n    Vector.rotate = function(vector, angle, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = vector.x * cos - vector.y * sin;\n        output.y = vector.x * sin + vector.y * cos;\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Rotates the vector about a specified point by specified angle.\n     * @method rotateAbout\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} point\n     * @param {vector} [output]\n     * @return {vector} A new vector rotated about the point\n     */\n    Vector.rotateAbout = function(vector, angle, point, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n        output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Normalises a vector (such that its magnitude is `1`).\n     * @method normalise\n     * @param {vector} vector\n     * @return {vector} A new vector normalised\n     */\n    Vector.normalise = function(vector) {\n        var magnitude = Vector.magnitude(vector);\n        if (magnitude === 0)\n            return { x: 0, y: 0 };\n        return { x: vector.x / magnitude, y: vector.y / magnitude };\n    };\n\n    /**\n     * Returns the dot-product of two vectors.\n     * @method dot\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The dot product of the two vectors\n     */\n    Vector.dot = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.x) + (vectorA.y * vectorB.y);\n    };\n\n    /**\n     * Returns the cross-product of two vectors.\n     * @method cross\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The cross product of the two vectors\n     */\n    Vector.cross = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.y) - (vectorA.y * vectorB.x);\n    };\n\n    /**\n     * Returns the cross-product of three vectors.\n     * @method cross3\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} vectorC\n     * @return {number} The cross product of the three vectors\n     */\n    Vector.cross3 = function(vectorA, vectorB, vectorC) {\n        return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n    };\n\n    /**\n     * Adds the two vectors.\n     * @method add\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB added\n     */\n    Vector.add = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x + vectorB.x;\n        output.y = vectorA.y + vectorB.y;\n        return output;\n    };\n\n    /**\n     * Subtracts the two vectors.\n     * @method sub\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB subtracted\n     */\n    Vector.sub = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x - vectorB.x;\n        output.y = vectorA.y - vectorB.y;\n        return output;\n    };\n\n    /**\n     * Multiplies a vector and a scalar.\n     * @method mult\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector multiplied by scalar\n     */\n    Vector.mult = function(vector, scalar) {\n        return { x: vector.x * scalar, y: vector.y * scalar };\n    };\n\n    /**\n     * Divides a vector and a scalar.\n     * @method div\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector divided by scalar\n     */\n    Vector.div = function(vector, scalar) {\n        return { x: vector.x / scalar, y: vector.y / scalar };\n    };\n\n    /**\n     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n     * @method perp\n     * @param {vector} vector\n     * @param {bool} [negate=false]\n     * @return {vector} The perpendicular vector\n     */\n    Vector.perp = function(vector, negate) {\n        negate = negate === true ? -1 : 1;\n        return { x: negate * -vector.y, y: negate * vector.x };\n    };\n\n    /**\n     * Negates both components of a vector such that it points in the opposite direction.\n     * @method neg\n     * @param {vector} vector\n     * @return {vector} The negated vector\n     */\n    Vector.neg = function(vector) {\n        return { x: -vector.x, y: -vector.y };\n    };\n\n    /**\n     * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n     * @method angle\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The angle in radians\n     */\n    Vector.angle = function(vectorA, vectorB) {\n        return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n    };\n\n    /**\n     * Temporary vector pool (not thread-safe).\n     * @property _temp\n     * @type {vector[]}\n     * @private\n     */\n    Vector._temp = [\n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create()\n    ];\n\n})();\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n* A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n* A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vertices\n*/\n\nvar Vertices = {};\n\nmodule.exports = Vertices;\n\nvar Vector = __webpack_require__(2);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new set of `Matter.Body` compatible vertices.\n     * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n     * but with some additional references required for efficient collision detection routines.\n     *\n     * Vertices must be specified in clockwise order.\n     *\n     * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n     *\n     * @method create\n     * @param {vector[]} points\n     * @param {body} body\n     */\n    Vertices.create = function(points, body) {\n        var vertices = [];\n\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n                vertex = {\n                    x: point.x,\n                    y: point.y,\n                    index: i,\n                    body: body,\n                    isInternal: false\n                };\n\n            vertices.push(vertex);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n     * into a `Matter.Vertices` object for the given `Matter.Body`.\n     * For parsing SVG paths, see `Svg.pathToVertices`.\n     * @method fromPath\n     * @param {string} path\n     * @param {body} body\n     * @return {vertices} vertices\n     */\n    Vertices.fromPath = function(path, body) {\n        var pathPattern = /L?\\s*([-\\d.e]+)[\\s,]*([-\\d.e]+)*/ig,\n            points = [];\n\n        path.replace(pathPattern, function(match, x, y) {\n            points.push({ x: parseFloat(x), y: parseFloat(y) });\n        });\n\n        return Vertices.create(points, body);\n    };\n\n    /**\n     * Returns the centre (centroid) of the set of vertices.\n     * @method centre\n     * @param {vertices} vertices\n     * @return {vector} The centre point\n     */\n    Vertices.centre = function(vertices) {\n        var area = Vertices.area(vertices, true),\n            centre = { x: 0, y: 0 },\n            cross,\n            temp,\n            j;\n\n        for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n        }\n\n        return Vector.div(centre, 6 * area);\n    };\n\n    /**\n     * Returns the average (mean) of the set of vertices.\n     * @method mean\n     * @param {vertices} vertices\n     * @return {vector} The average point\n     */\n    Vertices.mean = function(vertices) {\n        var average = { x: 0, y: 0 };\n\n        for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n        }\n\n        return Vector.div(average, vertices.length);\n    };\n\n    /**\n     * Returns the area of the set of vertices.\n     * @method area\n     * @param {vertices} vertices\n     * @param {bool} signed\n     * @return {number} The area\n     */\n    Vertices.area = function(vertices, signed) {\n        var area = 0,\n            j = vertices.length - 1;\n\n        for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n        }\n\n        if (signed)\n            return area / 2;\n\n        return Math.abs(area) / 2;\n    };\n\n    /**\n     * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n     * @method inertia\n     * @param {vertices} vertices\n     * @param {number} mass\n     * @return {number} The polygon's moment of inertia\n     */\n    Vertices.inertia = function(vertices, mass) {\n        var numerator = 0,\n            denominator = 0,\n            v = vertices,\n            cross,\n            j;\n\n        // find the polygon's moment of inertia, using second moment of area\n        // from equations at http://www.physicsforums.com/showthread.php?t=25293\n        for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n        }\n\n        return (mass / 6) * (numerator / denominator);\n    };\n\n    /**\n     * Translates the set of vertices in-place.\n     * @method translate\n     * @param {vertices} vertices\n     * @param {vector} vector\n     * @param {number} scalar\n     */\n    Vertices.translate = function(vertices, vector, scalar) {\n        scalar = typeof scalar !== 'undefined' ? scalar : 1;\n\n        var verticesLength = vertices.length,\n            translateX = vector.x * scalar,\n            translateY = vector.y * scalar,\n            i;\n        \n        for (i = 0; i < verticesLength; i++) {\n            vertices[i].x += translateX;\n            vertices[i].y += translateY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Rotates the set of vertices in-place.\n     * @method rotate\n     * @param {vertices} vertices\n     * @param {number} angle\n     * @param {vector} point\n     */\n    Vertices.rotate = function(vertices, angle, point) {\n        if (angle === 0)\n            return;\n\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle),\n            pointX = point.x,\n            pointY = point.y,\n            verticesLength = vertices.length,\n            vertex,\n            dx,\n            dy,\n            i;\n\n        for (i = 0; i < verticesLength; i++) {\n            vertex = vertices[i];\n            dx = vertex.x - pointX;\n            dy = vertex.y - pointY;\n            vertex.x = pointX + (dx * cos - dy * sin);\n            vertex.y = pointY + (dx * sin + dy * cos);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Returns `true` if the `point` is inside the set of `vertices`.\n     * @method contains\n     * @param {vertices} vertices\n     * @param {vector} point\n     * @return {boolean} True if the vertices contains point, otherwise false\n     */\n    Vertices.contains = function(vertices, point) {\n        var pointX = point.x,\n            pointY = point.y,\n            verticesLength = vertices.length,\n            vertex = vertices[verticesLength - 1],\n            nextVertex;\n\n        for (var i = 0; i < verticesLength; i++) {\n            nextVertex = vertices[i];\n\n            if ((pointX - vertex.x) * (nextVertex.y - vertex.y) \n                + (pointY - vertex.y) * (vertex.x - nextVertex.x) > 0) {\n                return false;\n            }\n\n            vertex = nextVertex;\n        }\n\n        return true;\n    };\n\n    /**\n     * Scales the vertices from a point (default is centre) in-place.\n     * @method scale\n     * @param {vertices} vertices\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     */\n    Vertices.scale = function(vertices, scaleX, scaleY, point) {\n        if (scaleX === 1 && scaleY === 1)\n            return vertices;\n\n        point = point || Vertices.centre(vertices);\n\n        var vertex,\n            delta;\n\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n     * The radius parameter is a single number or an array to specify the radius for each vertex.\n     * @method chamfer\n     * @param {vertices} vertices\n     * @param {number[]} radius\n     * @param {number} quality\n     * @param {number} qualityMin\n     * @param {number} qualityMax\n     */\n    Vertices.chamfer = function(vertices, radius, quality, qualityMin, qualityMax) {\n        if (typeof radius === 'number') {\n            radius = [radius];\n        } else {\n            radius = radius || [8];\n        }\n\n        // quality defaults to -1, which is auto\n        quality = (typeof quality !== 'undefined') ? quality : -1;\n        qualityMin = qualityMin || 2;\n        qualityMax = qualityMax || 14;\n\n        var newVertices = [];\n\n        for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n                vertex = vertices[i],\n                nextVertex = vertices[(i + 1) % vertices.length],\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\n            if (currentRadius === 0) {\n                newVertices.push(vertex);\n                continue;\n            }\n\n            var prevNormal = Vector.normalise({ \n                x: vertex.y - prevVertex.y, \n                y: prevVertex.x - vertex.x\n            });\n\n            var nextNormal = Vector.normalise({ \n                x: nextVertex.y - vertex.y, \n                y: vertex.x - nextVertex.x\n            });\n\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n\n            var precision = quality;\n\n            if (quality === -1) {\n                // automatically decide precision\n                precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n\n            precision = Common.clamp(precision, qualityMin, qualityMax);\n\n            // use an even value for precision, more likely to reduce axes by using symmetry\n            if (precision % 2 === 1)\n                precision += 1;\n\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n                theta = alpha / precision;\n\n            for (var j = 0; j < precision; j++) {\n                newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n        }\n\n        return newVertices;\n    };\n\n    /**\n     * Sorts the input vertices into clockwise order in place.\n     * @method clockwiseSort\n     * @param {vertices} vertices\n     * @return {vertices} vertices\n     */\n    Vertices.clockwiseSort = function(vertices) {\n        var centre = Vertices.mean(vertices);\n\n        vertices.sort(function(vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n        });\n\n        return vertices;\n    };\n\n    /**\n     * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n     * @method isConvex\n     * @param {vertices} vertices\n     * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n     */\n    Vertices.isConvex = function(vertices) {\n        // http://paulbourke.net/geometry/polygonmesh/\n        // Copyright (c) Paul Bourke (use permitted)\n\n        var flag = 0,\n            n = vertices.length,\n            i,\n            j,\n            k,\n            z;\n\n        if (n < 3)\n            return null;\n\n        for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\n            if (z < 0) {\n                flag |= 1;\n            } else if (z > 0) {\n                flag |= 2;\n            }\n\n            if (flag === 3) {\n                return false;\n            }\n        }\n\n        if (flag !== 0){\n            return true;\n        } else {\n            return null;\n        }\n    };\n\n    /**\n     * Returns the convex hull of the input vertices as a new array of points.\n     * @method hull\n     * @param {vertices} vertices\n     * @return [vertex] vertices\n     */\n    Vertices.hull = function(vertices) {\n        // http://geomalgorithms.com/a10-_hull-1.html\n\n        var upper = [],\n            lower = [], \n            vertex,\n            i;\n\n        // sort vertices on x-axis (y-axis for ties)\n        vertices = vertices.slice(0);\n        vertices.sort(function(vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n        });\n\n        // build lower hull\n        for (i = 0; i < vertices.length; i += 1) {\n            vertex = vertices[i];\n\n            while (lower.length >= 2 \n                   && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n                lower.pop();\n            }\n\n            lower.push(vertex);\n        }\n\n        // build upper hull\n        for (i = vertices.length - 1; i >= 0; i -= 1) {\n            vertex = vertices[i];\n\n            while (upper.length >= 2 \n                   && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n                upper.pop();\n            }\n\n            upper.push(vertex);\n        }\n\n        // concatenation of the lower and upper hulls gives the convex hull\n        // omit last points because they are repeated at the beginning of the other list\n        upper.pop();\n        lower.pop();\n\n        return upper.concat(lower);\n    };\n\n})();\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Body` module contains methods for creating and manipulating rigid bodies.\n* For creating bodies with common configurations such as rectangles, circles and other polygons see the module `Matter.Bodies`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\n* @class Body\n*/\n\nvar Body = {};\n\nmodule.exports = Body;\n\nvar Vertices = __webpack_require__(3);\nvar Vector = __webpack_require__(2);\nvar Sleeping = __webpack_require__(7);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\nvar Axes = __webpack_require__(11);\n\n(function() {\n\n    Body._timeCorrection = true;\n    Body._inertiaScale = 4;\n    Body._nextCollidingGroupId = 1;\n    Body._nextNonCollidingGroupId = -1;\n    Body._nextCategory = 0x0001;\n    Body._baseDelta = 1000 / 60;\n\n    /**\n     * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * Vertices must be specified in clockwise order.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {body} body\n     */\n    Body.create = function(options) {\n        var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            plugin: {},\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: { x: 0, y: 0 },\n            force: { x: 0, y: 0 },\n            torque: 0,\n            positionImpulse: { x: 0, y: 0 },\n            constraintImpulse: { x: 0, y: 0, angle: 0 },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: { x: 0, y: 0 },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n                visible: true,\n                opacity: 1,\n                strokeStyle: null,\n                fillStyle: null,\n                lineWidth: null,\n                sprite: {\n                    xScale: 1,\n                    yScale: 1,\n                    xOffset: 0,\n                    yOffset: 0\n                }\n            },\n            events: null,\n            bounds: null,\n            chamfer: null,\n            circleRadius: 0,\n            positionPrev: null,\n            anglePrev: 0,\n            parent: null,\n            axes: null,\n            area: 0,\n            mass: 0,\n            inertia: 0,\n            deltaTime: 1000 / 60,\n            _original: null\n        };\n\n        var body = Common.extend(defaults, options);\n\n        _initProperties(body, options);\n\n        return body;\n    };\n\n    /**\n     * Returns the next unique group index for which bodies will collide.\n     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n     * See `body.collisionFilter` for more information.\n     * @method nextGroup\n     * @param {bool} [isNonColliding=false]\n     * @return {Number} Unique group index\n     */\n    Body.nextGroup = function(isNonColliding) {\n        if (isNonColliding)\n            return Body._nextNonCollidingGroupId--;\n\n        return Body._nextCollidingGroupId++;\n    };\n\n    /**\n     * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n     * There are 32 available. See `body.collisionFilter` for more information.\n     * @method nextCategory\n     * @return {Number} Unique category bitfield\n     */\n    Body.nextCategory = function() {\n        Body._nextCategory = Body._nextCategory << 1;\n        return Body._nextCategory;\n    };\n\n    /**\n     * Initialises body properties.\n     * @method _initProperties\n     * @private\n     * @param {body} body\n     * @param {} [options]\n     */\n    var _initProperties = function(body, options) {\n        options = options || {};\n\n        // init required properties (order is important)\n        Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n        });\n\n        Vertices.rotate(body.vertices, body.angle, body.position);\n        Axes.rotate(body.axes, body.angle);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n\n        // allow options to override the automatically calculated properties\n        Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n        });\n\n        // render properties\n        var defaultFillStyle = (body.isStatic ? '#14151f' : Common.choose(['#f19648', '#f5d259', '#f55a3c', '#063e7b', '#ececd1'])),\n            defaultStrokeStyle = body.isStatic ? '#555' : '#ccc',\n            defaultLineWidth = body.isStatic && body.render.fillStyle === null ? 1 : 0;\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n        body.render.lineWidth = body.render.lineWidth || defaultLineWidth;\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n    };\n\n    /**\n     * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n     * Prefer to use the actual setter functions in performance critical situations.\n     * @method set\n     * @param {body} body\n     * @param {} settings A property name (or map of properties and values) to set on the body.\n     * @param {} value The value to set if `settings` is a single property name.\n     */\n    Body.set = function(body, settings, value) {\n        var property;\n\n        if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n        }\n\n        for (property in settings) {\n            if (!Object.prototype.hasOwnProperty.call(settings, property))\n                continue;\n\n            value = settings[property];\n            switch (property) {\n\n            case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n            case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n            case 'mass':\n                Body.setMass(body, value);\n                break;\n            case 'density':\n                Body.setDensity(body, value);\n                break;\n            case 'inertia':\n                Body.setInertia(body, value);\n                break;\n            case 'vertices':\n                Body.setVertices(body, value);\n                break;\n            case 'position':\n                Body.setPosition(body, value);\n                break;\n            case 'angle':\n                Body.setAngle(body, value);\n                break;\n            case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n            case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n            case 'speed':\n                Body.setSpeed(body, value);\n                break;\n            case 'angularSpeed':\n                Body.setAngularSpeed(body, value);\n                break;\n            case 'parts':\n                Body.setParts(body, value);\n                break;\n            case 'centre':\n                Body.setCentre(body, value);\n                break;\n            default:\n                body[property] = value;\n\n            }\n        }\n    };\n\n    /**\n     * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n     * @method setStatic\n     * @param {body} body\n     * @param {bool} isStatic\n     */\n    Body.setStatic = function(body, isStatic) {\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            if (isStatic) {\n                if (!part.isStatic) {\n                    part._original = {\n                        restitution: part.restitution,\n                        friction: part.friction,\n                        mass: part.mass,\n                        inertia: part.inertia,\n                        density: part.density,\n                        inverseMass: part.inverseMass,\n                        inverseInertia: part.inverseInertia\n                    };\n                }\n\n                part.restitution = 0;\n                part.friction = 1;\n                part.mass = part.inertia = part.density = Infinity;\n                part.inverseMass = part.inverseInertia = 0;\n\n                part.positionPrev.x = part.position.x;\n                part.positionPrev.y = part.position.y;\n                part.anglePrev = part.angle;\n                part.angularVelocity = 0;\n                part.speed = 0;\n                part.angularSpeed = 0;\n                part.motion = 0;\n            } else if (part._original) {\n                part.restitution = part._original.restitution;\n                part.friction = part._original.friction;\n                part.mass = part._original.mass;\n                part.inertia = part._original.inertia;\n                part.density = part._original.density;\n                part.inverseMass = part._original.inverseMass;\n                part.inverseInertia = part._original.inverseInertia;\n\n                part._original = null;\n            }\n\n            part.isStatic = isStatic;\n        }\n    };\n\n    /**\n     * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n     * @method setMass\n     * @param {body} body\n     * @param {number} mass\n     */\n    Body.setMass = function(body, mass) {\n        var moment = body.inertia / (body.mass / 6);\n        body.inertia = moment * (mass / 6);\n        body.inverseInertia = 1 / body.inertia;\n\n        body.mass = mass;\n        body.inverseMass = 1 / body.mass;\n        body.density = body.mass / body.area;\n    };\n\n    /**\n     * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n     * @method setDensity\n     * @param {body} body\n     * @param {number} density\n     */\n    Body.setDensity = function(body, density) {\n        Body.setMass(body, density * body.area);\n        body.density = density;\n    };\n\n    /**\n     * Sets the moment of inertia of the body. This is the second moment of area in two dimensions.\n     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n     * @method setInertia\n     * @param {body} body\n     * @param {number} inertia\n     */\n    Body.setInertia = function(body, inertia) {\n        body.inertia = inertia;\n        body.inverseInertia = 1 / body.inertia;\n    };\n\n    /**\n     * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n     * They are then automatically translated to world space based on `body.position`.\n     *\n     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n     * Vertices must form a convex hull. Concave vertices must be decomposed into convex parts.\n     * \n     * @method setVertices\n     * @param {body} body\n     * @param {vector[]} vertices\n     */\n    Body.setVertices = function(body, vertices) {\n        // change vertices\n        if (vertices[0].body === body) {\n            body.vertices = vertices;\n        } else {\n            body.vertices = Vertices.create(vertices, body);\n        }\n\n        // update properties\n        body.axes = Axes.fromVertices(body.vertices);\n        body.area = Vertices.area(body.vertices);\n        Body.setMass(body, body.density * body.area);\n\n        // orient vertices around the centre of mass at origin (0, 0)\n        var centre = Vertices.centre(body.vertices);\n        Vertices.translate(body.vertices, centre, -1);\n\n        // update inertia while vertices are at origin (0, 0)\n        Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\n\n        // update geometry\n        Vertices.translate(body.vertices, body.position);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n    };\n\n    /**\n     * Sets the parts of the `body`. \n     * \n     * See `body.parts` for details and requirements on how parts are used.\n     * \n     * See Bodies.fromVertices for a related utility.\n     * \n     * This function updates `body` mass, inertia and centroid based on the parts geometry.  \n     * Sets each `part.parent` to be this `body`.  \n     * \n     * The convex hull is computed and set on this `body` (unless `autoHull` is `false`).  \n     * Automatically ensures that the first part in `body.parts` is the `body`.\n     * @method setParts\n     * @param {body} body\n     * @param {body[]} parts\n     * @param {bool} [autoHull=true]\n     */\n    Body.setParts = function(body, parts, autoHull) {\n        var i;\n\n        // add all the parts, ensuring that the first part is always the parent body\n        parts = parts.slice(0);\n        body.parts.length = 0;\n        body.parts.push(body);\n        body.parent = body;\n\n        for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            if (part !== body) {\n                part.parent = body;\n                body.parts.push(part);\n            }\n        }\n\n        if (body.parts.length === 1)\n            return;\n\n        autoHull = typeof autoHull !== 'undefined' ? autoHull : true;\n\n        // find the convex hull of all parts to set on the parent body\n        if (autoHull) {\n            var vertices = [];\n            for (i = 0; i < parts.length; i++) {\n                vertices = vertices.concat(parts[i].vertices);\n            }\n\n            Vertices.clockwiseSort(vertices);\n\n            var hull = Vertices.hull(vertices),\n                hullCentre = Vertices.centre(hull);\n\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n        }\n\n        // sum the properties of all compound parts of the parent body\n        var total = Body._totalProperties(body);\n\n        body.area = total.area;\n        body.parent = body;\n        body.position.x = total.centre.x;\n        body.position.y = total.centre.y;\n        body.positionPrev.x = total.centre.x;\n        body.positionPrev.y = total.centre.y;\n\n        Body.setMass(body, total.mass);\n        Body.setInertia(body, total.inertia);\n        Body.setPosition(body, total.centre);\n    };\n\n    /**\n     * Set the centre of mass of the body. \n     * The `centre` is a vector in world-space unless `relative` is set, in which case it is a translation.\n     * The centre of mass is the point the body rotates about and can be used to simulate non-uniform density.\n     * This is equal to moving `body.position` but not the `body.vertices`.\n     * Invalid if the `centre` falls outside the body's convex hull.\n     * @method setCentre\n     * @param {body} body\n     * @param {vector} centre\n     * @param {bool} relative\n     */\n    Body.setCentre = function(body, centre, relative) {\n        if (!relative) {\n            body.positionPrev.x = centre.x - (body.position.x - body.positionPrev.x);\n            body.positionPrev.y = centre.y - (body.position.y - body.positionPrev.y);\n            body.position.x = centre.x;\n            body.position.y = centre.y;\n        } else {\n            body.positionPrev.x += centre.x;\n            body.positionPrev.y += centre.y;\n            body.position.x += centre.x;\n            body.position.y += centre.y;\n        }\n    };\n\n    /**\n     * Sets the position of the body. By default velocity is unchanged.\n     * If `updateVelocity` is `true` then velocity is inferred from the change in position.\n     * @method setPosition\n     * @param {body} body\n     * @param {vector} position\n     * @param {boolean} [updateVelocity=false]\n     */\n    Body.setPosition = function(body, position, updateVelocity) {\n        var delta = Vector.sub(position, body.position);\n\n        if (updateVelocity) {\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n            body.velocity.x = delta.x;\n            body.velocity.y = delta.y;\n            body.speed = Vector.magnitude(delta);\n        } else {\n            body.positionPrev.x += delta.x;\n            body.positionPrev.y += delta.y;\n        }\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Sets the angle of the body. By default angular velocity is unchanged.\n     * If `updateVelocity` is `true` then angular velocity is inferred from the change in angle.\n     * @method setAngle\n     * @param {body} body\n     * @param {number} angle\n     * @param {boolean} [updateVelocity=false]\n     */\n    Body.setAngle = function(body, angle, updateVelocity) {\n        var delta = angle - body.angle;\n        \n        if (updateVelocity) {\n            body.anglePrev = body.angle;\n            body.angularVelocity = delta;\n            body.angularSpeed = Math.abs(delta);\n        } else {\n            body.anglePrev += delta;\n        }\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n            if (i > 0) {\n                Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n        }\n    };\n\n    /**\n     * Sets the current linear velocity of the body.  \n     * Affects body speed.\n     * @method setVelocity\n     * @param {body} body\n     * @param {vector} velocity\n     */\n    Body.setVelocity = function(body, velocity) {\n        var timeScale = body.deltaTime / Body._baseDelta;\n        body.positionPrev.x = body.position.x - velocity.x * timeScale;\n        body.positionPrev.y = body.position.y - velocity.y * timeScale;\n        body.velocity.x = (body.position.x - body.positionPrev.x) / timeScale;\n        body.velocity.y = (body.position.y - body.positionPrev.y) / timeScale;\n        body.speed = Vector.magnitude(body.velocity);\n    };\n\n    /**\n     * Gets the current linear velocity of the body.\n     * @method getVelocity\n     * @param {body} body\n     * @return {vector} velocity\n     */\n    Body.getVelocity = function(body) {\n        var timeScale = Body._baseDelta / body.deltaTime;\n\n        return {\n            x: (body.position.x - body.positionPrev.x) * timeScale,\n            y: (body.position.y - body.positionPrev.y) * timeScale\n        };\n    };\n\n    /**\n     * Gets the current linear speed of the body.  \n     * Equivalent to the magnitude of its velocity.\n     * @method getSpeed\n     * @param {body} body\n     * @return {number} speed\n     */\n    Body.getSpeed = function(body) {\n        return Vector.magnitude(Body.getVelocity(body));\n    };\n\n    /**\n     * Sets the current linear speed of the body.  \n     * Direction is maintained. Affects body velocity.\n     * @method setSpeed\n     * @param {body} body\n     * @param {number} speed\n     */\n    Body.setSpeed = function(body, speed) {\n        Body.setVelocity(body, Vector.mult(Vector.normalise(Body.getVelocity(body)), speed));\n    };\n\n    /**\n     * Sets the current rotational velocity of the body.  \n     * Affects body angular speed.\n     * @method setAngularVelocity\n     * @param {body} body\n     * @param {number} velocity\n     */\n    Body.setAngularVelocity = function(body, velocity) {\n        var timeScale = body.deltaTime / Body._baseDelta;\n        body.anglePrev = body.angle - velocity * timeScale;\n        body.angularVelocity = (body.angle - body.anglePrev) / timeScale;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n    };\n\n    /**\n     * Gets the current rotational velocity of the body.\n     * @method getAngularVelocity\n     * @param {body} body\n     * @return {number} angular velocity\n     */\n    Body.getAngularVelocity = function(body) {\n        return (body.angle - body.anglePrev) * Body._baseDelta / body.deltaTime;\n    };\n\n    /**\n     * Gets the current rotational speed of the body.  \n     * Equivalent to the magnitude of its angular velocity.\n     * @method getAngularSpeed\n     * @param {body} body\n     * @return {number} angular speed\n     */\n    Body.getAngularSpeed = function(body) {\n        return Math.abs(Body.getAngularVelocity(body));\n    };\n\n    /**\n     * Sets the current rotational speed of the body.  \n     * Direction is maintained. Affects body angular velocity.\n     * @method setAngularSpeed\n     * @param {body} body\n     * @param {number} speed\n     */\n    Body.setAngularSpeed = function(body, speed) {\n        Body.setAngularVelocity(body, Common.sign(Body.getAngularVelocity(body)) * speed);\n    };\n\n    /**\n     * Moves a body by a given vector relative to its current position. By default velocity is unchanged.\n     * If `updateVelocity` is `true` then velocity is inferred from the change in position.\n     * @method translate\n     * @param {body} body\n     * @param {vector} translation\n     * @param {boolean} [updateVelocity=false]\n     */\n    Body.translate = function(body, translation, updateVelocity) {\n        Body.setPosition(body, Vector.add(body.position, translation), updateVelocity);\n    };\n\n    /**\n     * Rotates a body by a given angle relative to its current angle. By default angular velocity is unchanged.\n     * If `updateVelocity` is `true` then angular velocity is inferred from the change in angle.\n     * @method rotate\n     * @param {body} body\n     * @param {number} rotation\n     * @param {vector} [point]\n     * @param {boolean} [updateVelocity=false]\n     */\n    Body.rotate = function(body, rotation, point, updateVelocity) {\n        if (!point) {\n            Body.setAngle(body, body.angle + rotation, updateVelocity);\n        } else {\n            var cos = Math.cos(rotation),\n                sin = Math.sin(rotation),\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            }, updateVelocity);\n\n            Body.setAngle(body, body.angle + rotation, updateVelocity);\n        }\n    };\n\n    /**\n     * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n     * @method scale\n     * @param {body} body\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} [point]\n     */\n    Body.scale = function(body, scaleX, scaleY, point) {\n        var totalArea = 0,\n            totalInertia = 0;\n\n        point = point || body.position;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            // scale vertices\n            Vertices.scale(part.vertices, scaleX, scaleY, point);\n\n            // update properties\n            part.axes = Axes.fromVertices(part.vertices);\n            part.area = Vertices.area(part.vertices);\n            Body.setMass(part, body.density * part.area);\n\n            // update inertia (requires vertices to be at origin)\n            Vertices.translate(part.vertices, { x: -part.position.x, y: -part.position.y });\n            Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n            Vertices.translate(part.vertices, { x: part.position.x, y: part.position.y });\n\n            if (i > 0) {\n                totalArea += part.area;\n                totalInertia += part.inertia;\n            }\n\n            // scale position\n            part.position.x = point.x + (part.position.x - point.x) * scaleX;\n            part.position.y = point.y + (part.position.y - point.y) * scaleY;\n\n            // update bounds\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n\n        // handle parent body\n        if (body.parts.length > 1) {\n            body.area = totalArea;\n\n            if (!body.isStatic) {\n                Body.setMass(body, body.density * totalArea);\n                Body.setInertia(body, totalInertia);\n            }\n        }\n\n        // handle circles\n        if (body.circleRadius) { \n            if (scaleX === scaleY) {\n                body.circleRadius *= scaleX;\n            } else {\n                // body is no longer a circle\n                body.circleRadius = null;\n            }\n        }\n    };\n\n    /**\n     * Performs an update by integrating the equations of motion on the `body`.\n     * This is applied every update by `Matter.Engine` automatically.\n     * @method update\n     * @param {body} body\n     * @param {number} [deltaTime=16.666]\n     */\n    Body.update = function(body, deltaTime) {\n        deltaTime = (typeof deltaTime !== 'undefined' ? deltaTime : (1000 / 60)) * body.timeScale;\n\n        var deltaTimeSquared = deltaTime * deltaTime,\n            correction = Body._timeCorrection ? deltaTime / (body.deltaTime || deltaTime) : 1;\n\n        // from the previous step\n        var frictionAir = 1 - body.frictionAir * (deltaTime / Common._baseDelta),\n            velocityPrevX = (body.position.x - body.positionPrev.x) * correction,\n            velocityPrevY = (body.position.y - body.positionPrev.y) * correction;\n\n        // update velocity with Verlet integration\n        body.velocity.x = (velocityPrevX * frictionAir) + (body.force.x / body.mass) * deltaTimeSquared;\n        body.velocity.y = (velocityPrevY * frictionAir) + (body.force.y / body.mass) * deltaTimeSquared;\n\n        body.positionPrev.x = body.position.x;\n        body.positionPrev.y = body.position.y;\n        body.position.x += body.velocity.x;\n        body.position.y += body.velocity.y;\n        body.deltaTime = deltaTime;\n\n        // update angular velocity with Verlet integration\n        body.angularVelocity = ((body.angle - body.anglePrev) * frictionAir * correction) + (body.torque / body.inertia) * deltaTimeSquared;\n        body.anglePrev = body.angle;\n        body.angle += body.angularVelocity;\n\n        // transform the body geometry\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            Vertices.translate(part.vertices, body.velocity);\n            \n            if (i > 0) {\n                part.position.x += body.velocity.x;\n                part.position.y += body.velocity.y;\n            }\n\n            if (body.angularVelocity !== 0) {\n                Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n                Axes.rotate(part.axes, body.angularVelocity);\n                if (i > 0) {\n                    Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n                }\n            }\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Updates properties `body.velocity`, `body.speed`, `body.angularVelocity` and `body.angularSpeed` which are normalised in relation to `Body._baseDelta`.\n     * @method updateVelocities\n     * @param {body} body\n     */\n    Body.updateVelocities = function(body) {\n        var timeScale = Body._baseDelta / body.deltaTime,\n            bodyVelocity = body.velocity;\n\n        bodyVelocity.x = (body.position.x - body.positionPrev.x) * timeScale;\n        bodyVelocity.y = (body.position.y - body.positionPrev.y) * timeScale;\n        body.speed = Math.sqrt((bodyVelocity.x * bodyVelocity.x) + (bodyVelocity.y * bodyVelocity.y));\n\n        body.angularVelocity = (body.angle - body.anglePrev) * timeScale;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n    };\n\n    /**\n     * Applies the `force` to the `body` from the force origin `position` in world-space, over a single timestep, including applying any resulting angular torque.\n     * \n     * Forces are useful for effects like gravity, wind or rocket thrust, but can be difficult in practice when precise control is needed. In these cases see `Body.setVelocity` and `Body.setPosition` as an alternative.\n     * \n     * The force from this function is only applied once for the duration of a single timestep, in other words the duration depends directly on the current engine update `delta` and the rate of calls to this function.\n     * \n     * Therefore to account for time, you should apply the force constantly over as many engine updates as equivalent to the intended duration.\n     * \n     * If all or part of the force duration is some fraction of a timestep, first multiply the force by `duration / timestep`.\n     * \n     * The force origin `position` in world-space must also be specified. Passing `body.position` will result in zero angular effect as the force origin would be at the centre of mass.\n     * \n     * The `body` will take time to accelerate under a force, the resulting effect depends on duration of the force, the body mass and other forces on the body including friction combined.\n     * @method applyForce\n     * @param {body} body\n     * @param {vector} position The force origin in world-space. Pass `body.position` to avoid angular torque.\n     * @param {vector} force\n     */\n    Body.applyForce = function(body, position, force) {\n        var offset = { x: position.x - body.position.x, y: position.y - body.position.y };\n        body.force.x += force.x;\n        body.force.y += force.y;\n        body.torque += offset.x * force.y - offset.y * force.x;\n    };\n\n    /**\n     * Returns the sums of the properties of all compound parts of the parent body.\n     * @method _totalProperties\n     * @private\n     * @param {body} body\n     * @return {}\n     */\n    Body._totalProperties = function(body) {\n        // from equations at:\n        // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n        // http://output.to/sideway/default.asp?qno=121100087\n\n        var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: { x: 0, y: 0 }\n        };\n\n        // sum the properties of all compound parts of the parent body\n        for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i],\n                mass = part.mass !== Infinity ? part.mass : 1;\n\n            properties.mass += mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n        }\n\n        properties.centre = Vector.div(properties.centre, properties.mass);\n\n        return properties;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a body starts sleeping (where `this` is the body).\n    *\n    * @event sleepStart\n    * @this {body} The body that has started sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a body ends sleeping (where `this` is the body).\n    *\n    * @event sleepEnd\n    * @this {body} The body that has ended sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * _Read only_. Set by `Body.create`.\n     * \n     * A `String` denoting the type of object.\n     *\n     * @readOnly\n     * @property type\n     * @type string\n     * @default \"body\"\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Body\"\n     */\n\n    /**\n     * _Read only_. Use `Body.setParts` to set. \n     * \n     * See `Bodies.fromVertices` for a related utility.\n     * \n     * An array of bodies (the 'parts') that make up this body (the 'parent'). The first body in this array must always be a self-reference to this `body`.  \n     * \n     * The parts are fixed together and therefore perform as a single unified rigid body.\n     * \n     * Parts in relation to each other are allowed to overlap, as well as form gaps or holes, so can be used to create complex concave bodies unlike when using a single part. \n     * \n     * Use properties and functions on the parent `body` rather than on parts.\n     *   \n     * Outside of their geometry, most properties on parts are not considered or updated.  \n     * As such 'per-part' material properties among others are not currently considered.\n     * \n     * Parts should be created specifically for their parent body.  \n     * Parts should not be shared or reused between bodies, only one parent is supported.  \n     * Parts should not have their own parts, they are not handled recursively.  \n     * Parts should not be added to the world directly or any other composite.  \n     * Parts own vertices must be convex and in clockwise order.   \n     * \n     * A body with more than one part is sometimes referred to as a 'compound' body. \n     * \n     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.  \n     *\n     * @readOnly\n     * @property parts\n     * @type body[]\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * _Read only_. Updated by `Body.setParts`.\n     * \n     * A reference to the body that this is a part of. See `body.parts`.\n     * This is a self reference if the body is not a part of another body.\n     *\n     * @readOnly\n     * @property parent\n     * @type body\n     */\n\n    /**\n     * A `Number` specifying the angle of the body, in radians.\n     *\n     * @property angle\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * _Read only_. Use `Body.setVertices` or `Body.setParts` to set. See also `Bodies.fromVertices`.\n     * \n     * An array of `Vector` objects that specify the convex hull of the rigid body.\n     * These should be provided about the origin `(0, 0)`. E.g.\n     *\n     * `[{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]`\n     * \n     * Vertices must always be convex, in clockwise order and must not contain any duplicate points.\n     * \n     * Concave vertices should be decomposed into convex `parts`, see `Bodies.fromVertices` and `Body.setParts`.\n     *\n     * When set the vertices are translated such that `body.position` is at the centre of mass.\n     * Many other body properties are automatically calculated from these vertices when set including `density`, `area` and `inertia`.\n     * \n     * The module `Matter.Vertices` contains useful methods for working with vertices.\n     *\n     * @readOnly\n     * @property vertices\n     * @type vector[]\n     */\n\n    /**\n     * _Read only_. Use `Body.setPosition` to set. \n     * \n     * A `Vector` that specifies the current world-space position of the body.\n     * \n     * @readOnly\n     * @property position\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that accumulates the total force applied to the body for a single update.\n     * Force is zeroed after every `Engine.update`, so constant forces should be applied for every update they are needed. See also `Body.applyForce`.\n     * \n     * @property force\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that accumulates the total torque (turning force) applied to the body for a single update. See also `Body.applyForce`.\n     * Torque is zeroed after every `Engine.update`, so constant torques should be applied for every update they are needed.\n     *\n     * Torques result in angular acceleration on every update, which depends on body inertia and the engine update delta.\n     * \n     * @property torque\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * _Read only_. Use `Body.setSpeed` to set. \n     * \n     * See `Body.getSpeed` for details.\n     * \n     * Equivalent to the magnitude of `body.velocity` (always positive).\n     * \n     * @readOnly\n     * @property speed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * _Read only_. Use `Body.setVelocity` to set. \n     * \n     * See `Body.getVelocity` for details.\n     * \n     * Equivalent to the magnitude of `body.angularVelocity` (always positive).\n     * \n     * @readOnly\n     * @property velocity\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * _Read only_. Use `Body.setAngularSpeed` to set. \n     * \n     * See `Body.getAngularSpeed` for details.\n     * \n     * \n     * @readOnly\n     * @property angularSpeed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * _Read only_. Use `Body.setAngularVelocity` to set. \n     * \n     * See `Body.getAngularVelocity` for details.\n     * \n     *\n     * @readOnly\n     * @property angularVelocity\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * _Read only_. Use `Body.setStatic` to set. \n     * \n     * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n     *\n     * @readOnly\n     * @property isStatic\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n     *\n     * @property isSensor\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * _Read only_. Use `Sleeping.set` to set. \n     * \n     * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n     *\n     * @readOnly\n     * @property isSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * _Read only_. Calculated during engine update only when sleeping is enabled.\n     * \n     * A `Number` that loosely measures the amount of movement a body currently has.\n     *\n     * Derived from `body.speed^2 + body.angularSpeed^2`. See `Sleeping.update`.\n     * \n     * @readOnly\n     * @property motion\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the length of time during which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n     * \n     * @property sleepThreshold\n     * @type number\n     * @default 60\n     */\n\n    /**\n     * _Read only_. Use `Body.setDensity` to set. \n     * \n     * A `Number` that defines the density of the body (mass per unit area).\n     * \n     * Mass will also be updated when set.\n     *\n     * @readOnly\n     * @property density\n     * @type number\n     * @default 0.001\n     */\n\n    /**\n     * _Read only_. Use `Body.setMass` to set. \n     * \n     * A `Number` that defines the mass of the body.\n     * \n     * Density will also be updated when set.\n     * \n     * @readOnly\n     * @property mass\n     * @type number\n     */\n\n    /**\n     * _Read only_. Use `Body.setMass` to set. \n     * \n     * A `Number` that defines the inverse mass of the body (`1 / mass`).\n     *\n     * @readOnly\n     * @property inverseMass\n     * @type number\n     */\n\n    /**\n     * _Read only_. Automatically calculated when vertices, mass or density are set or set through `Body.setInertia`.\n     * \n     * A `Number` that defines the moment of inertia of the body. This is the second moment of area in two dimensions.\n     * \n     * Can be manually set to `Infinity` to prevent rotation of the body. See `Body.setInertia`.\n     * \n     * @readOnly\n     * @property inertia\n     * @type number\n     */\n\n    /**\n     * _Read only_. Automatically calculated when vertices, mass or density are set or calculated by `Body.setInertia`.\n     * \n     * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n     * \n     * @readOnly\n     * @property inverseInertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n     *\n     * `Math.max(bodyA.restitution, bodyB.restitution)`\n     *\n     * @property restitution\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means that the body may slide indefinitely.\n     * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n     *\n     * The effects of the value may be non-linear. \n     * High values may be unstable depending on the body.\n     * The engine uses a Coulomb friction model including static and kinetic friction.\n     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n     *\n     * `Math.min(bodyA.friction, bodyB.friction)`\n     *\n     * @property friction\n     * @type number\n     * @default 0.1\n     */\n\n    /**\n     * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n     *\n     * @property frictionStatic\n     * @type number\n     * @default 0.5\n     */\n\n    /**\n     * A `Number` that defines the air friction of the body (air resistance). \n     * A value of `0` means the body will never slow as it moves through space.\n     * The higher the value, the faster a body slows when moving through space.\n     * The effects of the value are non-linear. \n     *\n     * @property frictionAir\n     * @type number\n     * @default 0.01\n     */\n\n    /**\n     * An `Object` that specifies the collision filtering properties of this body.\n     *\n     * Collisions between two bodies will obey the following rules:\n     * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n     *   they will always collide if the value is positive, and they will never collide\n     *   if the value is negative.\n     * - If the two bodies have different values of `collisionFilter.group` or if one\n     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n     *\n     * Each body belongs to a collision category, given by `collisionFilter.category`. This\n     * value is used as a bit field and the category should have only one bit set, meaning that\n     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n     * different collision categories available.\n     *\n     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n     * the categories it collides with (the value is the bitwise AND value of all these categories).\n     *\n     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n     * are both true.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n    /**\n     * An Integer `Number`, that specifies the collision group this body belongs to.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.group\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * A bit field that specifies the collision category this body belongs to.\n     * The category value should have only one bit set, for example `0x0001`.\n     * This means there are up to 32 unique collision categories available.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.category\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * A bit mask that specifies the collision categories this body may collide with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.mask\n     * @type object\n     * @default -1\n     */\n\n    /**\n     * A `Number` that specifies a thin boundary around the body where it is allowed to slightly sink into other bodies.\n     * \n     * This is required for proper collision response, including friction and restitution effects.\n     * \n     * The default should generally suffice in most cases. You may need to decrease this value for very small bodies that are nearing the default value in scale.\n     *\n     * @property slop\n     * @type number\n     * @default 0.05\n     */\n\n    /**\n     * A `Number` that specifies per-body time scaling.\n     *\n     * @property timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * _Read only_. Updated during engine update.\n     * \n     * A `Number` that records the last delta time value used to update this body.\n     * Used to calculate speed and velocity.\n     *\n     * @readOnly\n     * @property deltaTime\n     * @type number\n     * @default 1000 / 60\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the body should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * Sets the opacity to use when rendering.\n     *\n     * @property render.opacity\n     * @type number\n     * @default 1\n    */\n\n    /**\n     * An `Object` that defines the sprite properties to use when rendering, if any.\n     *\n     * @property render.sprite\n     * @type object\n     */\n\n    /**\n     * An `String` that defines the path to the image to use as the sprite texture, if any.\n     *\n     * @property render.sprite.texture\n     * @type string\n     */\n     \n    /**\n     * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n     *\n     * @property render.sprite.xScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n     *\n     * @property render.sprite.yScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n      * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n      *\n      * @property render.sprite.xOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n      * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n      *\n      * @property render.sprite.yOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.fillStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * _Read only_. Calculated automatically when vertices are set.\n     * \n     * An array of unique axis vectors (edge normals) used for collision detection.\n     * These are automatically calculated when vertices are set.\n     * They are constantly updated by `Body.update` during the simulation.\n     *\n     * @readOnly\n     * @property axes\n     * @type vector[]\n     */\n     \n    /**\n     * _Read only_. Calculated automatically when vertices are set.\n     * \n     * A `Number` that measures the area of the body's convex hull.\n     * \n     * @readOnly\n     * @property area\n     * @type string\n     * @default \n     */\n\n    /**\n     * A `Bounds` object that defines the AABB region for the body.\n     * It is automatically calculated when vertices are set and constantly updated by `Body.update` during simulation.\n     * \n     * @property bounds\n     * @type bounds\n     */\n\n    /**\n     * Temporarily may hold parameters to be passed to `Vertices.chamfer` where supported by external functions.\n     * \n     * See `Vertices.chamfer` for possible parameters this object may hold.\n     * \n     * Currently only functions inside `Matter.Bodies` provide a utility using this property as a vertices pre-processing option.\n     * \n     * Alternatively consider using `Vertices.chamfer` directly on vertices before passing them to a body creation function.\n     * \n     * @property chamfer\n     * @type object|null|undefined\n     */\n\n})();\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Events\n*/\n\nvar Events = {};\n\nmodule.exports = Events;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Subscribes a callback function to the given object's `eventName`.\n     * @method on\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.on = function(object, eventNames, callback) {\n        var names = eventNames.split(' '),\n            name;\n\n        for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n        }\n\n        return callback;\n    };\n\n    /**\n     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n     * @method off\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.off = function(object, eventNames, callback) {\n        if (!eventNames) {\n            object.events = {};\n            return;\n        }\n\n        // handle Events.off(object, callback)\n        if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n        }\n\n        var names = eventNames.split(' ');\n\n        for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n                newCallbacks = [];\n\n            if (callback && callbacks) {\n                for (var j = 0; j < callbacks.length; j++) {\n                    if (callbacks[j] !== callback)\n                        newCallbacks.push(callbacks[j]);\n                }\n            }\n\n            object.events[names[i]] = newCallbacks;\n        }\n    };\n\n    /**\n     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n     * @method trigger\n     * @param {} object\n     * @param {string} eventNames\n     * @param {} event\n     */\n    Events.trigger = function(object, eventNames, event) {\n        var names,\n            name,\n            callbacks,\n            eventClone;\n\n        var events = object.events;\n        \n        if (events && Common.keys(events).length > 0) {\n            if (!event)\n                event = {};\n\n            names = eventNames.split(' ');\n\n            for (var i = 0; i < names.length; i++) {\n                name = names[i];\n                callbacks = events[name];\n\n                if (callbacks) {\n                    eventClone = Common.clone(event, false);\n                    eventClone.name = name;\n                    eventClone.source = object;\n\n                    for (var j = 0; j < callbacks.length; j++) {\n                        callbacks[j].apply(object, [eventClone]);\n                    }\n                }\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* A composite is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite` objects.\n*\n* They are a container that can represent complex objects made of multiple parts, even if they are not physically connected.\n* A composite could contain anything from a single body all the way up to a whole world.\n* \n* When making any changes to composites, use the included functions rather than changing their properties directly.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composite\n*/\n\nvar Composite = {};\n\nmodule.exports = Composite;\n\nvar Events = __webpack_require__(5);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\nvar Body = __webpack_require__(4);\n\n(function() {\n\n    /**\n     * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properites section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} [options]\n     * @return {composite} A new composite\n     */\n    Composite.create = function(options) {\n        return Common.extend({ \n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [], \n            constraints: [], \n            composites: [],\n            label: 'Composite',\n            plugin: {},\n            cache: {\n                allBodies: null,\n                allConstraints: null,\n                allComposites: null\n            }\n        }, options);\n    };\n\n    /**\n     * Sets the composite's `isModified` flag. \n     * If `updateParents` is true, all parents will be set (default: false).\n     * If `updateChildren` is true, all children will be set (default: false).\n     * @private\n     * @method setModified\n     * @param {composite} composite\n     * @param {boolean} isModified\n     * @param {boolean} [updateParents=false]\n     * @param {boolean} [updateChildren=false]\n     */\n    Composite.setModified = function(composite, isModified, updateParents, updateChildren) {\n        composite.isModified = isModified;\n\n        if (isModified && composite.cache) {\n            composite.cache.allBodies = null;\n            composite.cache.allConstraints = null;\n            composite.cache.allComposites = null;\n        }\n\n        if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n        }\n\n        if (updateChildren) {\n            for (var i = 0; i < composite.composites.length; i++) {\n                var childComposite = composite.composites[i];\n                Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n        }\n    };\n\n    /**\n     * Generic single or multi-add function. Adds a single or an array of body(s), constraint(s) or composite(s) to the given composite.\n     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n     * @method add\n     * @param {composite} composite\n     * @param {object|array} object A single or an array of body(s), constraint(s) or composite(s)\n     * @return {composite} The original composite with the objects added\n     */\n    Composite.add = function(composite, object) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeAdd', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                    Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                    break;\n                }\n\n                Composite.addBody(composite, obj);\n                break;\n            case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n            case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n            case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterAdd', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Optionally searching its children recursively.\n     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n     * @method remove\n     * @param {composite} composite\n     * @param {object|array} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the objects removed\n     */\n    Composite.remove = function(composite, object, deep) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeRemove', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n            case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n            case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n            case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterRemove', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Adds a composite to the given composite.\n     * @private\n     * @method addComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @return {composite} The original compositeA with the objects from compositeB added\n     */\n    Composite.addComposite = function(compositeA, compositeB) {\n        compositeA.composites.push(compositeB);\n        compositeB.parent = compositeA;\n        Composite.setModified(compositeA, true, true, false);\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @param {boolean} [deep=false]\n     * @return {composite} The original compositeA with the composite removed\n     */\n    Composite.removeComposite = function(compositeA, compositeB, deep) {\n        var position = Common.indexOf(compositeA.composites, compositeB);\n\n        if (position !== -1) {\n            var bodies = Composite.allBodies(compositeB);\n\n            Composite.removeCompositeAt(compositeA, position);\n\n            for (var i = 0; i < bodies.length; i++) {\n                bodies[i].sleepCounter = 0;\n            }\n        }\n\n        if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++){\n                Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n        }\n\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite.\n     * @private\n     * @method removeCompositeAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the composite removed\n     */\n    Composite.removeCompositeAt = function(composite, position) {\n        composite.composites.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a body to the given composite.\n     * @private\n     * @method addBody\n     * @param {composite} composite\n     * @param {body} body\n     * @return {composite} The original composite with the body added\n     */\n    Composite.addBody = function(composite, body) {\n        composite.bodies.push(body);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeBody\n     * @param {composite} composite\n     * @param {body} body\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBody = function(composite, body, deep) {\n        var position = Common.indexOf(composite.bodies, body);\n\n        if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n            body.sleepCounter = 0;\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeBody(composite.composites[i], body, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeBodyAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBodyAt = function(composite, position) {\n        composite.bodies.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a constraint to the given composite.\n     * @private\n     * @method addConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @return {composite} The original composite with the constraint added\n     */\n    Composite.addConstraint = function(composite, constraint) {\n        composite.constraints.push(constraint);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a constraint from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraint = function(composite, constraint, deep) {\n        var position = Common.indexOf(composite.constraints, constraint);\n        \n        if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeConstraintAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraintAt = function(composite, position) {\n        composite.constraints.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes all bodies, constraints and composites from the given composite.\n     * Optionally clearing its children recursively.\n     * @method clear\n     * @param {composite} composite\n     * @param {boolean} keepStatic\n     * @param {boolean} [deep=false]\n     */\n    Composite.clear = function(composite, keepStatic, deep) {\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.clear(composite.composites[i], keepStatic, true);\n            }\n        }\n        \n        if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function(body) { return body.isStatic; });\n        } else {\n            composite.bodies.length = 0;\n        }\n\n        composite.constraints.length = 0;\n        composite.composites.length = 0;\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns all bodies in the given composite, including all bodies in its children, recursively.\n     * @method allBodies\n     * @param {composite} composite\n     * @return {body[]} All the bodies\n     */\n    Composite.allBodies = function(composite) {\n        if (composite.cache && composite.cache.allBodies) {\n            return composite.cache.allBodies;\n        }\n\n        var bodies = [].concat(composite.bodies);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n\n        if (composite.cache) {\n            composite.cache.allBodies = bodies;\n        }\n\n        return bodies;\n    };\n\n    /**\n     * Returns all constraints in the given composite, including all constraints in its children, recursively.\n     * @method allConstraints\n     * @param {composite} composite\n     * @return {constraint[]} All the constraints\n     */\n    Composite.allConstraints = function(composite) {\n        if (composite.cache && composite.cache.allConstraints) {\n            return composite.cache.allConstraints;\n        }\n\n        var constraints = [].concat(composite.constraints);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n\n        if (composite.cache) {\n            composite.cache.allConstraints = constraints;\n        }\n\n        return constraints;\n    };\n\n    /**\n     * Returns all composites in the given composite, including all composites in its children, recursively.\n     * @method allComposites\n     * @param {composite} composite\n     * @return {composite[]} All the composites\n     */\n    Composite.allComposites = function(composite) {\n        if (composite.cache && composite.cache.allComposites) {\n            return composite.cache.allComposites;\n        }\n\n        var composites = [].concat(composite.composites);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            composites = composites.concat(Composite.allComposites(composite.composites[i]));\n\n        if (composite.cache) {\n            composite.cache.allComposites = composites;\n        }\n\n        return composites;\n    };\n\n    /**\n     * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n     * @method get\n     * @param {composite} composite\n     * @param {number} id\n     * @param {string} type\n     * @return {object} The requested object, if found\n     */\n    Composite.get = function(composite, id, type) {\n        var objects,\n            object;\n\n        switch (type) {\n        case 'body':\n            objects = Composite.allBodies(composite);\n            break;\n        case 'constraint':\n            objects = Composite.allConstraints(composite);\n            break;\n        case 'composite':\n            objects = Composite.allComposites(composite).concat(composite);\n            break;\n        }\n\n        if (!objects)\n            return null;\n\n        object = objects.filter(function(object) { \n            return object.id.toString() === id.toString(); \n        });\n\n        return object.length === 0 ? null : object[0];\n    };\n\n    /**\n     * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n     * @method move\n     * @param {compositeA} compositeA\n     * @param {object[]} objects\n     * @param {compositeB} compositeB\n     * @return {composite} Returns compositeA\n     */\n    Composite.move = function(compositeA, objects, compositeB) {\n        Composite.remove(compositeA, objects);\n        Composite.add(compositeB, objects);\n        return compositeA;\n    };\n\n    /**\n     * Assigns new ids for all objects in the composite, recursively.\n     * @method rebase\n     * @param {composite} composite\n     * @return {composite} Returns composite\n     */\n    Composite.rebase = function(composite) {\n        var objects = Composite.allBodies(composite)\n            .concat(Composite.allConstraints(composite))\n            .concat(Composite.allComposites(composite));\n\n        for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n        }\n\n        return composite;\n    };\n\n    /**\n     * Translates all children in the composite by a given vector relative to their current positions, \n     * without imparting any velocity.\n     * @method translate\n     * @param {composite} composite\n     * @param {vector} translation\n     * @param {bool} [recursive=true]\n     */\n    Composite.translate = function(composite, translation, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n        }\n\n        return composite;\n    };\n\n    /**\n     * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n     * @method rotate\n     * @param {composite} composite\n     * @param {number} rotation\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.rotate = function(composite, rotation, point, recursive) {\n        var cos = Math.cos(rotation),\n            sin = Math.sin(rotation),\n            bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.rotate(body, rotation);\n        }\n\n        return composite;\n    };\n\n    /**\n     * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n     * @method scale\n     * @param {composite} composite\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.scale = function(composite, scaleX, scaleY, point, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + dx * scaleX,\n                y: point.y + dy * scaleY\n            });\n\n            Body.scale(body, scaleX, scaleY);\n        }\n\n        return composite;\n    };\n\n    /**\n     * Returns the union of the bounds of all of the composite's bodies.\n     * @method bounds\n     * @param {composite} composite The composite.\n     * @returns {bounds} The composite bounds.\n     */\n    Composite.bounds = function(composite) {\n        var bodies = Composite.allBodies(composite),\n            vertices = [];\n\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i];\n            vertices.push(body.bounds.min, body.bounds.max);\n        }\n\n        return Bounds.create(vertices);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, before objects have been added.\n    *\n    * @event beforeAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, after objects have been added.\n    *\n    * @event afterAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, before objects have been removed.\n    *\n    * @event beforeRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, after objects have been removed.\n    *\n    * @event afterRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"composite\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage composites.\n     *\n     * @property label\n     * @type string\n     * @default \"Composite\"\n     */\n\n    /**\n     * A flag that specifies whether the composite has been modified during the current step.\n     * This is automatically managed when bodies, constraints or composites are added or removed.\n     *\n     * @property isModified\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n     *\n     * @property parent\n     * @type composite\n     * @default null\n     */\n\n    /**\n     * An array of `Body` that are _direct_ children of this composite.\n     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n     *\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * An array of `Constraint` that are _direct_ children of this composite.\n     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n     *\n     * @property constraints\n     * @type constraint[]\n     * @default []\n     */\n\n    /**\n     * An array of `Composite` that are _direct_ children of this composite.\n     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n     *\n     * @property composites\n     * @type composite[]\n     * @default []\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * An object used for storing cached results for performance reasons.\n     * This is used internally only and is automatically managed.\n     *\n     * @private\n     * @property cache\n     * @type {}\n     */\n\n})();\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n*\n* @class Sleeping\n*/\n\nvar Sleeping = {};\n\nmodule.exports = Sleeping;\n\nvar Body = __webpack_require__(4);\nvar Events = __webpack_require__(5);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    Sleeping._motionWakeThreshold = 0.18;\n    Sleeping._motionSleepThreshold = 0.08;\n    Sleeping._minBias = 0.9;\n\n    /**\n     * Puts bodies to sleep or wakes them up depending on their motion.\n     * @method update\n     * @param {body[]} bodies\n     * @param {number} delta\n     */\n    Sleeping.update = function(bodies, delta) {\n        var timeScale = delta / Common._baseDelta,\n            motionSleepThreshold = Sleeping._motionSleepThreshold;\n        \n        // update bodies sleeping status\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                speed = Body.getSpeed(body),\n                angularSpeed = Body.getAngularSpeed(body),\n                motion = speed * speed + angularSpeed * angularSpeed;\n\n            // wake up bodies if they have a force applied\n            if (body.force.x !== 0 || body.force.y !== 0) {\n                Sleeping.set(body, false);\n                continue;\n            }\n\n            var minMotion = Math.min(body.motion, motion),\n                maxMotion = Math.max(body.motion, motion);\n        \n            // biased average motion estimation between frames\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n\n            if (body.sleepThreshold > 0 && body.motion < motionSleepThreshold) {\n                body.sleepCounter += 1;\n                \n                if (body.sleepCounter >= body.sleepThreshold / timeScale) {\n                    Sleeping.set(body, true);\n                }\n            } else if (body.sleepCounter > 0) {\n                body.sleepCounter -= 1;\n            }\n        }\n    };\n\n    /**\n     * Given a set of colliding pairs, wakes the sleeping bodies involved.\n     * @method afterCollisions\n     * @param {pair[]} pairs\n     */\n    Sleeping.afterCollisions = function(pairs) {\n        var motionSleepThreshold = Sleeping._motionSleepThreshold;\n\n        // wake up bodies involved in collisions\n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            // don't wake inactive pairs\n            if (!pair.isActive)\n                continue;\n\n            var collision = pair.collision,\n                bodyA = collision.bodyA.parent, \n                bodyB = collision.bodyB.parent;\n        \n            // don't wake if at least one body is static\n            if ((bodyA.isSleeping && bodyB.isSleeping) || bodyA.isStatic || bodyB.isStatic)\n                continue;\n        \n            if (bodyA.isSleeping || bodyB.isSleeping) {\n                var sleepingBody = (bodyA.isSleeping && !bodyA.isStatic) ? bodyA : bodyB,\n                    movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\n                if (!sleepingBody.isStatic && movingBody.motion > motionSleepThreshold) {\n                    Sleeping.set(sleepingBody, false);\n                }\n            }\n        }\n    };\n  \n    /**\n     * Set a body as sleeping or awake.\n     * @method set\n     * @param {body} body\n     * @param {boolean} isSleeping\n     */\n    Sleeping.set = function(body, isSleeping) {\n        var wasSleeping = body.isSleeping;\n\n        if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n\n            if (!wasSleeping) {\n                Events.trigger(body, 'sleepStart');\n            }\n        } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n\n            if (wasSleeping) {\n                Events.trigger(body, 'sleepEnd');\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Collision` module contains methods for detecting collisions between a given pair of bodies.\n*\n* For efficient detection between a list of bodies, see `Matter.Detector` and `Matter.Query`.\n*\n* See `Matter.Engine` for collision events.\n*\n* @class Collision\n*/\n\nvar Collision = {};\n\nmodule.exports = Collision;\n\nvar Vertices = __webpack_require__(3);\nvar Pair = __webpack_require__(9);\n\n(function() {\n    var _supports = [];\n\n    var _overlapAB = {\n        overlap: 0,\n        axis: null\n    };\n\n    var _overlapBA = {\n        overlap: 0,\n        axis: null\n    };\n\n    /**\n     * Creates a new collision record.\n     * @method create\n     * @param {body} bodyA The first body part represented by the collision record\n     * @param {body} bodyB The second body part represented by the collision record\n     * @return {collision} A new collision record\n     */\n    Collision.create = function(bodyA, bodyB) {\n        return { \n            pair: null,\n            collided: false,\n            bodyA: bodyA,\n            bodyB: bodyB,\n            parentA: bodyA.parent,\n            parentB: bodyB.parent,\n            depth: 0,\n            normal: { x: 0, y: 0 },\n            tangent: { x: 0, y: 0 },\n            penetration: { x: 0, y: 0 },\n            supports: [null, null],\n            supportCount: 0\n        };\n    };\n\n    /**\n     * Detect collision between two bodies.\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {pairs} [pairs] Optionally reuse collision records from existing pairs.\n     * @return {collision|null} A collision record if detected, otherwise null\n     */\n    Collision.collides = function(bodyA, bodyB, pairs) {\n        Collision._overlapAxes(_overlapAB, bodyA.vertices, bodyB.vertices, bodyA.axes);\n\n        if (_overlapAB.overlap <= 0) {\n            return null;\n        }\n\n        Collision._overlapAxes(_overlapBA, bodyB.vertices, bodyA.vertices, bodyB.axes);\n\n        if (_overlapBA.overlap <= 0) {\n            return null;\n        }\n\n        // reuse collision records for gc efficiency\n        var pair = pairs && pairs.table[Pair.id(bodyA, bodyB)],\n            collision;\n\n        if (!pair) {\n            collision = Collision.create(bodyA, bodyB);\n            collision.collided = true;\n            collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n            collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n            collision.parentA = collision.bodyA.parent;\n            collision.parentB = collision.bodyB.parent;\n        } else {\n            collision = pair.collision;\n        }\n\n        bodyA = collision.bodyA;\n        bodyB = collision.bodyB;\n\n        var minOverlap;\n\n        if (_overlapAB.overlap < _overlapBA.overlap) {\n            minOverlap = _overlapAB;\n        } else {\n            minOverlap = _overlapBA;\n        }\n\n        var normal = collision.normal,\n            tangent = collision.tangent,\n            penetration = collision.penetration,\n            supports = collision.supports,\n            depth = minOverlap.overlap,\n            minAxis = minOverlap.axis,\n            normalX = minAxis.x,\n            normalY = minAxis.y,\n            deltaX = bodyB.position.x - bodyA.position.x,\n            deltaY = bodyB.position.y - bodyA.position.y;\n\n        // ensure normal is facing away from bodyA\n        if (normalX * deltaX + normalY * deltaY >= 0) {\n            normalX = -normalX;\n            normalY = -normalY;\n        }\n\n        normal.x = normalX;\n        normal.y = normalY;\n        \n        tangent.x = -normalY;\n        tangent.y = normalX;\n\n        penetration.x = normalX * depth;\n        penetration.y = normalY * depth;\n\n        collision.depth = depth;\n\n        // find support points, there is always either exactly one or two\n        var supportsB = Collision._findSupports(bodyA, bodyB, normal, 1),\n            supportCount = 0;\n\n        // find the supports from bodyB that are inside bodyA\n        if (Vertices.contains(bodyA.vertices, supportsB[0])) {\n            supports[supportCount++] = supportsB[0];\n        }\n\n        if (Vertices.contains(bodyA.vertices, supportsB[1])) {\n            supports[supportCount++] = supportsB[1];\n        }\n\n        // find the supports from bodyA that are inside bodyB\n        if (supportCount < 2) {\n            var supportsA = Collision._findSupports(bodyB, bodyA, normal, -1);\n\n            if (Vertices.contains(bodyB.vertices, supportsA[0])) {\n                supports[supportCount++] = supportsA[0];\n            }\n\n            if (supportCount < 2 && Vertices.contains(bodyB.vertices, supportsA[1])) {\n                supports[supportCount++] = supportsA[1];\n            }\n        }\n\n        // account for the edge case of overlapping but no vertex containment\n        if (supportCount === 0) {\n            supports[supportCount++] = supportsB[0];\n        }\n\n        // update support count\n        collision.supportCount = supportCount;\n\n        return collision;\n    };\n\n    /**\n     * Find the overlap between two sets of vertices.\n     * @method _overlapAxes\n     * @private\n     * @param {object} result\n     * @param {vertices} verticesA\n     * @param {vertices} verticesB\n     * @param {axes} axes\n     */\n    Collision._overlapAxes = function(result, verticesA, verticesB, axes) {\n        var verticesALength = verticesA.length,\n            verticesBLength = verticesB.length,\n            verticesAX = verticesA[0].x,\n            verticesAY = verticesA[0].y,\n            verticesBX = verticesB[0].x,\n            verticesBY = verticesB[0].y,\n            axesLength = axes.length,\n            overlapMin = Number.MAX_VALUE,\n            overlapAxisNumber = 0,\n            overlap,\n            overlapAB,\n            overlapBA,\n            dot,\n            i,\n            j;\n\n        for (i = 0; i < axesLength; i++) {\n            var axis = axes[i],\n                axisX = axis.x,\n                axisY = axis.y,\n                minA = verticesAX * axisX + verticesAY * axisY,\n                minB = verticesBX * axisX + verticesBY * axisY,\n                maxA = minA,\n                maxB = minB;\n            \n            for (j = 1; j < verticesALength; j += 1) {\n                dot = verticesA[j].x * axisX + verticesA[j].y * axisY;\n\n                if (dot > maxA) { \n                    maxA = dot;\n                } else if (dot < minA) { \n                    minA = dot;\n                }\n            }\n\n            for (j = 1; j < verticesBLength; j += 1) {\n                dot = verticesB[j].x * axisX + verticesB[j].y * axisY;\n\n                if (dot > maxB) { \n                    maxB = dot;\n                } else if (dot < minB) { \n                    minB = dot;\n                }\n            }\n\n            overlapAB = maxA - minB;\n            overlapBA = maxB - minA;\n            overlap = overlapAB < overlapBA ? overlapAB : overlapBA;\n\n            if (overlap < overlapMin) {\n                overlapMin = overlap;\n                overlapAxisNumber = i;\n\n                if (overlap <= 0) {\n                    // can not be intersecting\n                    break;\n                }\n            } \n        }\n\n        result.axis = axes[overlapAxisNumber];\n        result.overlap = overlapMin;\n    };\n\n    /**\n     * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n     * @method _findSupports\n     * @private\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {vector} normal\n     * @param {number} direction\n     * @return [vector]\n     */\n    Collision._findSupports = function(bodyA, bodyB, normal, direction) {\n        var vertices = bodyB.vertices,\n            verticesLength = vertices.length,\n            bodyAPositionX = bodyA.position.x,\n            bodyAPositionY = bodyA.position.y,\n            normalX = normal.x * direction,\n            normalY = normal.y * direction,\n            vertexA = vertices[0],\n            vertexB = vertexA,\n            nearestDistance = normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y),\n            vertexC,\n            distance,\n            j;\n\n        // find deepest vertex relative to the axis\n        for (j = 1; j < verticesLength; j += 1) {\n            vertexB = vertices[j];\n            distance = normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y);\n\n            // convex hill-climbing\n            if (distance < nearestDistance) {\n                nearestDistance = distance;\n                vertexA = vertexB;\n            }\n        }\n\n        // measure next vertex\n        vertexC = vertices[(verticesLength + vertexA.index - 1) % verticesLength];\n        nearestDistance = normalX * (bodyAPositionX - vertexC.x) + normalY * (bodyAPositionY - vertexC.y);\n\n        // compare with previous vertex\n        vertexB = vertices[(vertexA.index + 1) % verticesLength];\n        if (normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y) < nearestDistance) {\n            _supports[0] = vertexA;\n            _supports[1] = vertexB;\n\n            return _supports;\n        }\n\n        _supports[0] = vertexA;\n        _supports[1] = vertexC;\n\n        return _supports;\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A reference to the pair using this collision record, if there is one.\n     *\n     * @property pair\n     * @type {pair|null}\n     * @default null\n     */\n\n    /**\n     * A flag that indicates if the bodies were colliding when the collision was last updated.\n     * \n     * @property collided\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The first body part represented by the collision (see also `collision.parentA`).\n     * \n     * @property bodyA\n     * @type body\n     */\n\n    /**\n     * The second body part represented by the collision (see also `collision.parentB`).\n     * \n     * @property bodyB\n     * @type body\n     */\n\n    /**\n     * The first body represented by the collision (i.e. `collision.bodyA.parent`).\n     * \n     * @property parentA\n     * @type body\n     */\n\n    /**\n     * The second body represented by the collision (i.e. `collision.bodyB.parent`).\n     * \n     * @property parentB\n     * @type body\n     */\n\n    /**\n     * A `Number` that represents the minimum separating distance between the bodies along the collision normal.\n     *\n     * @readOnly\n     * @property depth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A normalised `Vector` that represents the direction between the bodies that provides the minimum separating distance.\n     *\n     * @property normal\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A normalised `Vector` that is the tangent direction to the collision normal.\n     *\n     * @property tangent\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that represents the direction and depth of the collision.\n     *\n     * @property penetration\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * An array of body vertices that represent the support points in the collision.\n     * \n     * _Note:_ Only the first `collision.supportCount` items of `collision.supports` are active.\n     * Therefore use `collision.supportCount` instead of `collision.supports.length` when iterating the active supports.\n     * \n     * These are the deepest vertices (along the collision normal) of each body that are contained by the other body's vertices.\n     *\n     * @property supports\n     * @type vector[]\n     * @default []\n     */\n\n    /**\n     * The number of active supports for this collision found in `collision.supports`.\n     * \n     * _Note:_ Only the first `collision.supportCount` items of `collision.supports` are active.\n     * Therefore use `collision.supportCount` instead of `collision.supports.length` when iterating the active supports.\n     *\n     * @property supportCount\n     * @type number\n     * @default 0\n     */\n\n})();\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n*\n* @class Pair\n*/\n\nvar Pair = {};\n\nmodule.exports = Pair;\n\nvar Contact = __webpack_require__(16);\n\n(function() {\n    \n    /**\n     * Creates a pair.\n     * @method create\n     * @param {collision} collision\n     * @param {number} timestamp\n     * @return {pair} A new pair\n     */\n    Pair.create = function(collision, timestamp) {\n        var bodyA = collision.bodyA,\n            bodyB = collision.bodyB;\n\n        var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            collision: collision,\n            contacts: [Contact.create(), Contact.create()],\n            contactCount: 0,\n            separation: 0,\n            isActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: 0,\n            friction: 0,\n            frictionStatic: 0,\n            restitution: 0,\n            slop: 0\n        };\n\n        Pair.update(pair, collision, timestamp);\n\n        return pair;\n    };\n\n    /**\n     * Updates a pair given a collision.\n     * @method update\n     * @param {pair} pair\n     * @param {collision} collision\n     * @param {number} timestamp\n     */\n    Pair.update = function(pair, collision, timestamp) {\n        var supports = collision.supports,\n            supportCount = collision.supportCount,\n            contacts = pair.contacts,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n        \n        pair.isActive = true;\n        pair.timeUpdated = timestamp;\n        pair.collision = collision;\n        pair.separation = collision.depth;\n        pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n        pair.friction = parentA.friction < parentB.friction ? parentA.friction : parentB.friction;\n        pair.frictionStatic = parentA.frictionStatic > parentB.frictionStatic ? parentA.frictionStatic : parentB.frictionStatic;\n        pair.restitution = parentA.restitution > parentB.restitution ? parentA.restitution : parentB.restitution;\n        pair.slop = parentA.slop > parentB.slop ? parentA.slop : parentB.slop;\n\n        pair.contactCount = supportCount;\n        collision.pair = pair;\n\n        var supportA = supports[0],\n            contactA = contacts[0],\n            supportB = supports[1],\n            contactB = contacts[1];\n\n        // match contacts to supports\n        if (contactB.vertex === supportA || contactA.vertex === supportB) {\n            contacts[1] = contactA;\n            contacts[0] = contactA = contactB;\n            contactB = contacts[1];\n        }\n\n        // update contacts\n        contactA.vertex = supportA;\n        contactB.vertex = supportB;\n    };\n    \n    /**\n     * Set a pair as active or inactive.\n     * @method setActive\n     * @param {pair} pair\n     * @param {bool} isActive\n     * @param {number} timestamp\n     */\n    Pair.setActive = function(pair, isActive, timestamp) {\n        if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n        } else {\n            pair.isActive = false;\n            pair.contactCount = 0;\n        }\n    };\n\n    /**\n     * Get the id for the given pair.\n     * @method id\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {string} Unique pairId\n     */\n    Pair.id = function(bodyA, bodyB) {\n        return bodyA.id < bodyB.id ? bodyA.id.toString(36) + ':' + bodyB.id.toString(36) \n            : bodyB.id.toString(36) + ':' + bodyA.id.toString(36);\n    };\n\n})();\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n* The stiffness of constraints can be modified to create springs or elastic.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Constraint\n*/\n\nvar Constraint = {};\n\nmodule.exports = Constraint;\n\nvar Vertices = __webpack_require__(3);\nvar Vector = __webpack_require__(2);\nvar Sleeping = __webpack_require__(7);\nvar Bounds = __webpack_require__(1);\nvar Axes = __webpack_require__(11);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    Constraint._warming = 0.4;\n    Constraint._torqueDampen = 1;\n    Constraint._minLength = 0.000001;\n\n    /**\n     * Creates a new constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n     * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n     * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {constraint} constraint\n     */\n    Constraint.create = function(options) {\n        var constraint = options;\n\n        // if bodies defined but no points, use body centre\n        if (constraint.bodyA && !constraint.pointA)\n            constraint.pointA = { x: 0, y: 0 };\n        if (constraint.bodyB && !constraint.pointB)\n            constraint.pointB = { x: 0, y: 0 };\n\n        // calculate static length using initial world space points\n        var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n            initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n            length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n    \n        constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length;\n\n        // option defaults\n        constraint.id = constraint.id || Common.nextId();\n        constraint.label = constraint.label || 'Constraint';\n        constraint.type = 'constraint';\n        constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n        constraint.damping = constraint.damping || 0;\n        constraint.angularStiffness = constraint.angularStiffness || 0;\n        constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n        constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n        constraint.plugin = {};\n\n        // render\n        var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#ffffff',\n            type: 'line',\n            anchors: true\n        };\n\n        if (constraint.length === 0 && constraint.stiffness > 0.1) {\n            render.type = 'pin';\n            render.anchors = false;\n        } else if (constraint.stiffness < 0.9) {\n            render.type = 'spring';\n        }\n\n        constraint.render = Common.extend(render, constraint.render);\n\n        return constraint;\n    };\n\n    /**\n     * Prepares for solving by constraint warming.\n     * @private\n     * @method preSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.preSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            body.position.x += impulse.x;\n            body.position.y += impulse.y;\n            body.angle += impulse.angle;\n        }\n    };\n\n    /**\n     * Solves all constraints in a list of collisions.\n     * @private\n     * @method solveAll\n     * @param {constraint[]} constraints\n     * @param {number} delta\n     */\n    Constraint.solveAll = function(constraints, delta) {\n        var timeScale = Common.clamp(delta / Common._baseDelta, 0, 1);\n\n        // Solve fixed constraints first.\n        for (var i = 0; i < constraints.length; i += 1) {\n            var constraint = constraints[i],\n                fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic),\n                fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (fixedA || fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n\n        // Solve free constraints last.\n        for (i = 0; i < constraints.length; i += 1) {\n            constraint = constraints[i];\n            fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic);\n            fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (!fixedA && !fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n    };\n\n    /**\n     * Solves a distance constraint with Gauss-Siedel method.\n     * @private\n     * @method solve\n     * @param {constraint} constraint\n     * @param {number} timeScale\n     */\n    Constraint.solve = function(constraint, timeScale) {\n        var bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB;\n\n        if (!bodyA && !bodyB)\n            return;\n\n        // update reference angle\n        if (bodyA && !bodyA.isStatic) {\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n            constraint.angleA = bodyA.angle;\n        }\n        \n        // update reference angle\n        if (bodyB && !bodyB.isStatic) {\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n            constraint.angleB = bodyB.angle;\n        }\n\n        var pointAWorld = pointA,\n            pointBWorld = pointB;\n\n        if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n        if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n\n        if (!pointAWorld || !pointBWorld)\n            return;\n\n        var delta = Vector.sub(pointAWorld, pointBWorld),\n            currentLength = Vector.magnitude(delta);\n\n        // prevent singularity\n        if (currentLength < Constraint._minLength) {\n            currentLength = Constraint._minLength;\n        }\n\n        // solve distance constraint with Gauss-Siedel method\n        var difference = (currentLength - constraint.length) / currentLength,\n            isRigid = constraint.stiffness >= 1 || constraint.length === 0,\n            stiffness = isRigid ? constraint.stiffness * timeScale \n                : constraint.stiffness * timeScale * timeScale,\n            damping = constraint.damping * timeScale,\n            force = Vector.mult(delta, difference * stiffness),\n            massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n            inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n            resistanceTotal = massTotal + inertiaTotal,\n            torque,\n            share,\n            normal,\n            normalVelocity,\n            relativeVelocity;\n    \n        if (damping > 0) {\n            var zero = Vector.create();\n            normal = Vector.div(delta, currentLength);\n\n            relativeVelocity = Vector.sub(\n                bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero,\n                bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero\n            );\n\n            normalVelocity = Vector.dot(normal, relativeVelocity);\n        }\n\n        if (bodyA && !bodyA.isStatic) {\n            share = bodyA.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyA.constraintImpulse.x -= force.x * share;\n            bodyA.constraintImpulse.y -= force.y * share;\n\n            // apply forces\n            bodyA.position.x -= force.x * share;\n            bodyA.position.y -= force.y * share;\n\n            // apply damping\n            if (damping > 0) {\n                bodyA.positionPrev.x -= damping * normal.x * normalVelocity * share;\n                bodyA.positionPrev.y -= damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointA, force) / resistanceTotal) * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n            bodyA.constraintImpulse.angle -= torque;\n            bodyA.angle -= torque;\n        }\n\n        if (bodyB && !bodyB.isStatic) {\n            share = bodyB.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyB.constraintImpulse.x += force.x * share;\n            bodyB.constraintImpulse.y += force.y * share;\n            \n            // apply forces\n            bodyB.position.x += force.x * share;\n            bodyB.position.y += force.y * share;\n\n            // apply damping\n            if (damping > 0) {\n                bodyB.positionPrev.x += damping * normal.x * normalVelocity * share;\n                bodyB.positionPrev.y += damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointB, force) / resistanceTotal) * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n            bodyB.constraintImpulse.angle += torque;\n            bodyB.angle += torque;\n        }\n\n    };\n\n    /**\n     * Performs body updates required after solving constraints.\n     * @private\n     * @method postSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.postSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            Sleeping.set(body, false);\n\n            // update geometry and reset\n            for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n                \n                Vertices.translate(part.vertices, impulse);\n\n                if (j > 0) {\n                    part.position.x += impulse.x;\n                    part.position.y += impulse.y;\n                }\n\n                if (impulse.angle !== 0) {\n                    Vertices.rotate(part.vertices, impulse.angle, body.position);\n                    Axes.rotate(part.axes, impulse.angle);\n                    if (j > 0) {\n                        Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                    }\n                }\n\n                Bounds.update(part.bounds, part.vertices, body.velocity);\n            }\n\n            // dampen the cached impulse for warming next step\n            impulse.angle *= Constraint._warming;\n            impulse.x *= Constraint._warming;\n            impulse.y *= Constraint._warming;\n        }\n    };\n\n    /**\n     * Returns the world-space position of `constraint.pointA`, accounting for `constraint.bodyA`.\n     * @method pointAWorld\n     * @param {constraint} constraint\n     * @returns {vector} the world-space position\n     */\n    Constraint.pointAWorld = function(constraint) {\n        return {\n            x: (constraint.bodyA ? constraint.bodyA.position.x : 0) \n                + (constraint.pointA ? constraint.pointA.x : 0),\n            y: (constraint.bodyA ? constraint.bodyA.position.y : 0) \n                + (constraint.pointA ? constraint.pointA.y : 0)\n        };\n    };\n\n    /**\n     * Returns the world-space position of `constraint.pointB`, accounting for `constraint.bodyB`.\n     * @method pointBWorld\n     * @param {constraint} constraint\n     * @returns {vector} the world-space position\n     */\n    Constraint.pointBWorld = function(constraint) {\n        return {\n            x: (constraint.bodyB ? constraint.bodyB.position.x : 0) \n                + (constraint.pointB ? constraint.pointB.x : 0),\n            y: (constraint.bodyB ? constraint.bodyB.position.y : 0) \n                + (constraint.pointB ? constraint.pointB.y : 0)\n        };\n    };\n\n    /**\n     * Returns the current length of the constraint. \n     * This is the distance between both of the constraint's end points.\n     * See `constraint.length` for the target rest length.\n     * @method currentLength\n     * @param {constraint} constraint\n     * @returns {number} the current length\n     */\n    Constraint.currentLength = function(constraint) {\n        var pointAX = (constraint.bodyA ? constraint.bodyA.position.x : 0) \n            + (constraint.pointA ? constraint.pointA.x : 0);\n\n        var pointAY = (constraint.bodyA ? constraint.bodyA.position.y : 0) \n            + (constraint.pointA ? constraint.pointA.y : 0);\n\n        var pointBX = (constraint.bodyB ? constraint.bodyB.position.x : 0) \n            + (constraint.pointB ? constraint.pointB.x : 0);\n            \n        var pointBY = (constraint.bodyB ? constraint.bodyB.position.y : 0) \n            + (constraint.pointB ? constraint.pointB.y : 0);\n\n        var deltaX = pointAX - pointBX;\n        var deltaY = pointAY - pointBY;\n\n        return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Constraint\"\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the constraint should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the constraint outline.\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the constraint outline.\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the constraint rendering type. \n     * The possible values are 'line', 'pin', 'spring'.\n     * An appropriate render type will be automatically chosen unless one is given in options.\n     *\n     * @property render.type\n     * @type string\n     * @default 'line'\n     */\n\n    /**\n     * A `Boolean` that defines if the constraint's anchor points should be rendered.\n     *\n     * @property render.anchors\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * The first possible `Body` that this constraint is attached to.\n     *\n     * @property bodyA\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The second possible `Body` that this constraint is attached to.\n     *\n     * @property bodyB\n     * @type body\n     * @default null\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointA\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n     *\n     * @property pointB\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n     * A value of `1` means the constraint should be very stiff.\n     * A value of `0.2` means the constraint acts like a soft spring.\n     *\n     * @property stiffness\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the damping of the constraint, \n     * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n     * Damping will only be apparent when the constraint also has a very low `stiffness`.\n     * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n     * A value of `0` means the constraint will apply no damping.\n     *\n     * @property damping\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that specifies the target resting length of the constraint. \n     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n     *\n     * @property length\n     * @type number\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n*\n* @class Axes\n*/\n\nvar Axes = {};\n\nmodule.exports = Axes;\n\nvar Vector = __webpack_require__(2);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new set of axes from the given vertices.\n     * @method fromVertices\n     * @param {vertices} vertices\n     * @return {axes} A new axes from the given vertices\n     */\n    Axes.fromVertices = function(vertices) {\n        var axes = {};\n\n        // find the unique axes, using edge normal gradients\n        for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length, \n                normal = Vector.normalise({ \n                    x: vertices[j].y - vertices[i].y, \n                    y: vertices[i].x - vertices[j].x\n                }),\n                gradient = (normal.y === 0) ? Infinity : (normal.x / normal.y);\n            \n            // limit precision\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n        }\n\n        return Common.values(axes);\n    };\n\n    /**\n     * Rotates a set of axes by the given angle.\n     * @method rotate\n     * @param {axes} axes\n     * @param {number} angle\n     */\n    Axes.rotate = function(axes, angle) {\n        if (angle === 0)\n            return;\n        \n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n                xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Bodies` module contains factory methods for creating rigid body models \n* with commonly used body configurations (such as rectangles, circles and other polygons).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Bodies\n*/\n\n// TODO: true circle bodies\n\nvar Bodies = {};\n\nmodule.exports = Bodies;\n\nvar Vertices = __webpack_require__(3);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(4);\nvar Bounds = __webpack_require__(1);\nvar Vector = __webpack_require__(2);\n\n(function() {\n\n    /**\n     * Creates a new rigid body model with a rectangle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method rectangle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {object} [options]\n     * @return {body} A new rectangle body\n     */\n    Bodies.rectangle = function(x, y, width, height, options) {\n        options = options || {};\n\n        var rectangle = { \n            label: 'Rectangle Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, rectangle, options));\n    };\n    \n    /**\n     * Creates a new rigid body model with a trapezoid hull. \n     * The `slope` is parameterised as a fraction of `width` and must be < 1 to form a valid trapezoid. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method trapezoid\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} slope Must be a number < 1.\n     * @param {object} [options]\n     * @return {body} A new trapezoid body\n     */\n    Bodies.trapezoid = function(x, y, width, height, slope, options) {\n        options = options || {};\n\n        if (slope >= 1) {\n            Common.warn('Bodies.trapezoid: slope parameter must be < 1.');\n        }\n\n        slope *= 0.5;\n        var roof = (1 - (slope * 2)) * width;\n        \n        var x1 = width * slope,\n            x2 = x1 + roof,\n            x3 = x2 + x1,\n            verticesPath;\n\n        if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + (-height) + ' L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        }\n\n        var trapezoid = { \n            label: 'Trapezoid Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(verticesPath)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, trapezoid, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a circle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method circle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @param {object} [options]\n     * @param {number} [maxSides]\n     * @return {body} A new circle body\n     */\n    Bodies.circle = function(x, y, radius, options, maxSides) {\n        options = options || {};\n\n        var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n        };\n        \n        // approximate circles with polygons until true circles implemented in SAT\n        maxSides = maxSides || 25;\n        var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\n\n        // optimisation: always use even number of sides (half the number of unique axes)\n        if (sides % 2 === 1)\n            sides += 1;\n\n        return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method polygon\n     * @param {number} x\n     * @param {number} y\n     * @param {number} sides\n     * @param {number} radius\n     * @param {object} [options]\n     * @return {body} A new regular polygon body\n     */\n    Bodies.polygon = function(x, y, sides, radius, options) {\n        options = options || {};\n\n        if (sides < 3)\n            return Bodies.circle(x, y, radius, options);\n\n        var theta = 2 * Math.PI / sides,\n            path = '',\n            offset = theta * 0.5;\n\n        for (var i = 0; i < sides; i += 1) {\n            var angle = offset + (i * theta),\n                xx = Math.cos(angle) * radius,\n                yy = Math.sin(angle) * radius;\n\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n        }\n\n        var polygon = { \n            label: 'Polygon Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(path)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, polygon, options));\n    };\n\n    /**\n     * Utility to create a compound body based on set(s) of vertices.\n     * \n     * _Note:_ To optionally enable automatic concave vertices decomposition the [poly-decomp](https://github.com/schteppe/poly-decomp.js) \n     * package must be first installed and provided see `Common.setDecomp`, otherwise the convex hull of each vertex set will be used.\n     * \n     * The resulting vertices are reorientated about their centre of mass,\n     * and offset such that `body.position` corresponds to this point.\n     * \n     * The resulting offset may be found if needed by subtracting `body.bounds` from the original input bounds.\n     * To later move the centre of mass see `Body.setCentre`.\n     * \n     * Note that automatic conconcave decomposition results are not always optimal. \n     * For best results, simplify the input vertices as much as possible first.\n     * By default this function applies some addtional simplification to help.\n     * \n     * Some outputs may also require further manual processing afterwards to be robust.\n     * In particular some parts may need to be overlapped to avoid collision gaps.\n     * Thin parts and sharp points should be avoided or removed where possible.\n     *\n     * The options parameter object specifies any `Matter.Body` properties you wish to override the defaults.\n     * \n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method fromVertices\n     * @param {number} x\n     * @param {number} y\n     * @param {array} vertexSets One or more arrays of vertex points e.g. `[[{ x: 0, y: 0 }...], ...]`.\n     * @param {object} [options] The body options.\n     * @param {bool} [flagInternal=false] Optionally marks internal edges with `isInternal`.\n     * @param {number} [removeCollinear=0.01] Threshold when simplifying vertices along the same edge.\n     * @param {number} [minimumArea=10] Threshold when removing small parts.\n     * @param {number} [removeDuplicatePoints=0.01] Threshold when simplifying nearby vertices.\n     * @return {body}\n     */\n    Bodies.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea, removeDuplicatePoints) {\n        var decomp = Common.getDecomp(),\n            canDecomp,\n            body,\n            parts,\n            isConvex,\n            isConcave,\n            vertices,\n            i,\n            j,\n            k,\n            v,\n            z;\n\n        // check decomp is as expected\n        canDecomp = Boolean(decomp && decomp.quickDecomp);\n\n        options = options || {};\n        parts = [];\n\n        flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n        removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n        minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n        removeDuplicatePoints = typeof removeDuplicatePoints !== 'undefined' ? removeDuplicatePoints : 0.01;\n\n        // ensure vertexSets is an array of arrays\n        if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n        }\n\n        for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n            isConcave = !isConvex;\n\n            if (isConcave && !canDecomp) {\n                Common.warnOnce(\n                    'Bodies.fromVertices: Install the \\'poly-decomp\\' library and use Common.setDecomp or provide \\'decomp\\' as a global to decompose concave vertices.'\n                );\n            }\n\n            if (isConvex || !canDecomp) {\n                if (isConvex) {\n                    vertices = Vertices.clockwiseSort(vertices);\n                } else {\n                    // fallback to convex hull when decomposition is not possible\n                    vertices = Vertices.hull(vertices);\n                }\n\n                parts.push({\n                    position: { x: x, y: y },\n                    vertices: vertices\n                });\n            } else {\n                // initialise a decomposition\n                var concave = vertices.map(function(vertex) {\n                    return [vertex.x, vertex.y];\n                });\n\n                // vertices are concave and simple, we can decompose into parts\n                decomp.makeCCW(concave);\n                if (removeCollinear !== false)\n                    decomp.removeCollinearPoints(concave, removeCollinear);\n                if (removeDuplicatePoints !== false && decomp.removeDuplicatePoints)\n                    decomp.removeDuplicatePoints(concave, removeDuplicatePoints);\n\n                // use the quick decomposition algorithm (Bayazit)\n                var decomposed = decomp.quickDecomp(concave);\n\n                // for each decomposed chunk\n                for (i = 0; i < decomposed.length; i++) {\n                    var chunk = decomposed[i];\n\n                    // convert vertices into the correct structure\n                    var chunkVertices = chunk.map(function(vertices) {\n                        return {\n                            x: vertices[0],\n                            y: vertices[1]\n                        };\n                    });\n\n                    // skip small chunks\n                    if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea)\n                        continue;\n\n                    // create a compound part\n                    parts.push({\n                        position: Vertices.centre(chunkVertices),\n                        vertices: chunkVertices\n                    });\n                }\n            }\n        }\n\n        // create body parts\n        for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n        }\n\n        // flag internal edges (coincident part edges)\n        if (flagInternal) {\n            var coincident_max_dist = 5;\n\n            for (i = 0; i < parts.length; i++) {\n                var partA = parts[i];\n\n                for (j = i + 1; j < parts.length; j++) {\n                    var partB = parts[j];\n\n                    if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                        var pav = partA.vertices,\n                            pbv = partB.vertices;\n\n                        // iterate vertices of both parts\n                        for (k = 0; k < partA.vertices.length; k++) {\n                            for (z = 0; z < partB.vertices.length; z++) {\n                                // find distances between the vertices\n                                var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                                    db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\n\n                                // if both vertices are very close, consider the edge concident (internal)\n                                if (da < coincident_max_dist && db < coincident_max_dist) {\n                                    pav[k].isInternal = true;\n                                    pbv[z].isInternal = true;\n                                }\n                            }\n                        }\n\n                    }\n                }\n            }\n        }\n\n        if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({ parts: parts.slice(0) }, options));\n\n            // offset such that body.position is at the centre off mass\n            Body.setPosition(body, { x: x, y: y });\n\n            return body;\n        } else {\n            return parts[0];\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Detector` module contains methods for efficiently detecting collisions between a list of bodies using a broadphase algorithm.\n*\n* @class Detector\n*/\n\nvar Detector = {};\n\nmodule.exports = Detector;\n\nvar Common = __webpack_require__(0);\nvar Collision = __webpack_require__(8);\n\n(function() {\n\n    /**\n     * Creates a new collision detector.\n     * @method create\n     * @param {} options\n     * @return {detector} A new collision detector\n     */\n    Detector.create = function(options) {\n        var defaults = {\n            bodies: [],\n            collisions: [],\n            pairs: null\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * Sets the list of bodies in the detector.\n     * @method setBodies\n     * @param {detector} detector\n     * @param {body[]} bodies\n     */\n    Detector.setBodies = function(detector, bodies) {\n        detector.bodies = bodies.slice(0);\n    };\n\n    /**\n     * Clears the detector including its list of bodies.\n     * @method clear\n     * @param {detector} detector\n     */\n    Detector.clear = function(detector) {\n        detector.bodies = [];\n        detector.collisions = [];\n    };\n\n    /**\n     * Efficiently finds all collisions among all the bodies in `detector.bodies` using a broadphase algorithm.\n     * \n     * _Note:_ The specific ordering of collisions returned is not guaranteed between releases and may change for performance reasons.\n     * If a specific ordering is required then apply a sort to the resulting array.\n     * @method collisions\n     * @param {detector} detector\n     * @return {collision[]} collisions\n     */\n    Detector.collisions = function(detector) {\n        var pairs = detector.pairs,\n            bodies = detector.bodies,\n            bodiesLength = bodies.length,\n            canCollide = Detector.canCollide,\n            collides = Collision.collides,\n            collisions = detector.collisions,\n            collisionIndex = 0,\n            i,\n            j;\n\n        bodies.sort(Detector._compareBoundsX);\n\n        for (i = 0; i < bodiesLength; i++) {\n            var bodyA = bodies[i],\n                boundsA = bodyA.bounds,\n                boundXMax = bodyA.bounds.max.x,\n                boundYMax = bodyA.bounds.max.y,\n                boundYMin = bodyA.bounds.min.y,\n                bodyAStatic = bodyA.isStatic || bodyA.isSleeping,\n                partsALength = bodyA.parts.length,\n                partsASingle = partsALength === 1;\n\n            for (j = i + 1; j < bodiesLength; j++) {\n                var bodyB = bodies[j],\n                    boundsB = bodyB.bounds;\n\n                if (boundsB.min.x > boundXMax) {\n                    break;\n                }\n\n                if (boundYMax < boundsB.min.y || boundYMin > boundsB.max.y) {\n                    continue;\n                }\n\n                if (bodyAStatic && (bodyB.isStatic || bodyB.isSleeping)) {\n                    continue;\n                }\n\n                if (!canCollide(bodyA.collisionFilter, bodyB.collisionFilter)) {\n                    continue;\n                }\n\n                var partsBLength = bodyB.parts.length;\n\n                if (partsASingle && partsBLength === 1) {\n                    var collision = collides(bodyA, bodyB, pairs);\n\n                    if (collision) {\n                        collisions[collisionIndex++] = collision;\n                    }\n                } else {\n                    var partsAStart = partsALength > 1 ? 1 : 0,\n                        partsBStart = partsBLength > 1 ? 1 : 0;\n                    \n                    for (var k = partsAStart; k < partsALength; k++) {\n                        var partA = bodyA.parts[k],\n                            boundsA = partA.bounds;\n\n                        for (var z = partsBStart; z < partsBLength; z++) {\n                            var partB = bodyB.parts[z],\n                                boundsB = partB.bounds;\n\n                            if (boundsA.min.x > boundsB.max.x || boundsA.max.x < boundsB.min.x\n                                || boundsA.max.y < boundsB.min.y || boundsA.min.y > boundsB.max.y) {\n                                continue;\n                            }\n\n                            var collision = collides(partA, partB, pairs);\n\n                            if (collision) {\n                                collisions[collisionIndex++] = collision;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (collisions.length !== collisionIndex) {\n            collisions.length = collisionIndex;\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns `true` if both supplied collision filters will allow a collision to occur.\n     * See `body.collisionFilter` for more information.\n     * @method canCollide\n     * @param {} filterA\n     * @param {} filterB\n     * @return {bool} `true` if collision can occur\n     */\n    Detector.canCollide = function(filterA, filterB) {\n        if (filterA.group === filterB.group && filterA.group !== 0)\n            return filterA.group > 0;\n\n        return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n    };\n\n    /**\n     * The comparison function used in the broadphase algorithm.\n     * Returns the signed delta of the bodies bounds on the x-axis.\n     * @private\n     * @method _sortCompare\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {number} The signed delta used for sorting\n     */\n    Detector._compareBoundsX = function(bodyA, bodyB) {\n        return bodyA.bounds.min.x - bodyB.bounds.min.x;\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * The array of `Matter.Body` between which the detector finds collisions.\n     * \n     * _Note:_ The order of bodies in this array _is not fixed_ and will be continually managed by the detector.\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * The array of `Matter.Collision` found in the last call to `Detector.collisions` on this detector.\n     * @property collisions\n     * @type collision[]\n     * @default []\n     */\n\n    /**\n     * Optional. A `Matter.Pairs` object from which previous collision objects may be reused. Intended for internal `Matter.Engine` usage.\n     * @property pairs\n     * @type {pairs|null}\n     * @default null\n     */\n\n})();\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n*\n* @class Mouse\n*/\n\nvar Mouse = {};\n\nmodule.exports = Mouse;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a mouse input.\n     * @method create\n     * @param {HTMLElement} element\n     * @return {mouse} A new mouse\n     */\n    Mouse.create = function(element) {\n        var mouse = {};\n\n        if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n        }\n        \n        mouse.element = element || document.body;\n        mouse.absolute = { x: 0, y: 0 };\n        mouse.position = { x: 0, y: 0 };\n        mouse.mousedownPosition = { x: 0, y: 0 };\n        mouse.mouseupPosition = { x: 0, y: 0 };\n        mouse.offset = { x: 0, y: 0 };\n        mouse.scale = { x: 1, y: 1 };\n        mouse.wheelDelta = 0;\n        mouse.button = -1;\n        mouse.pixelRatio = parseInt(mouse.element.getAttribute('data-pixel-ratio'), 10) || 1;\n\n        mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n        };\n        \n        mouse.mousemove = function(event) { \n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n        };\n        \n        mouse.mousedown = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            } else {\n                mouse.button = event.button;\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n        };\n        \n        mouse.mouseup = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                event.preventDefault();\n            }\n            \n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n        };\n\n        mouse.mousewheel = function(event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n            mouse.sourceEvents.mousewheel = event;\n        };\n\n        Mouse.setElement(mouse, mouse.element);\n\n        return mouse;\n    };\n\n    /**\n     * Sets the element the mouse is bound to (and relative to).\n     * @method setElement\n     * @param {mouse} mouse\n     * @param {HTMLElement} element\n     */\n    Mouse.setElement = function(mouse, element) {\n        mouse.element = element;\n\n        element.addEventListener('mousemove', mouse.mousemove, { passive: true });\n        element.addEventListener('mousedown', mouse.mousedown, { passive: true });\n        element.addEventListener('mouseup', mouse.mouseup, { passive: true });\n        \n        element.addEventListener('wheel', mouse.mousewheel, { passive: false });\n        \n        element.addEventListener('touchmove', mouse.mousemove, { passive: false });\n        element.addEventListener('touchstart', mouse.mousedown, { passive: false });\n        element.addEventListener('touchend', mouse.mouseup, { passive: false });\n    };\n\n    /**\n     * Clears all captured source events.\n     * @method clearSourceEvents\n     * @param {mouse} mouse\n     */\n    Mouse.clearSourceEvents = function(mouse) {\n        mouse.sourceEvents.mousemove = null;\n        mouse.sourceEvents.mousedown = null;\n        mouse.sourceEvents.mouseup = null;\n        mouse.sourceEvents.mousewheel = null;\n        mouse.wheelDelta = 0;\n    };\n\n    /**\n     * Sets the mouse position offset.\n     * @method setOffset\n     * @param {mouse} mouse\n     * @param {vector} offset\n     */\n    Mouse.setOffset = function(mouse, offset) {\n        mouse.offset.x = offset.x;\n        mouse.offset.y = offset.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n\n    /**\n     * Sets the mouse position scale.\n     * @method setScale\n     * @param {mouse} mouse\n     * @param {vector} scale\n     */\n    Mouse.setScale = function(mouse, scale) {\n        mouse.scale.x = scale.x;\n        mouse.scale.y = scale.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n    \n    /**\n     * Gets the mouse position relative to an element given a screen pixel ratio.\n     * @method _getRelativeMousePosition\n     * @private\n     * @param {} event\n     * @param {} element\n     * @param {number} pixelRatio\n     * @return {}\n     */\n    Mouse._getRelativeMousePosition = function(event, element, pixelRatio) {\n        var elementBounds = element.getBoundingClientRect(),\n            rootNode = (document.documentElement || document.body.parentNode || document.body),\n            scrollX = (window.pageXOffset !== undefined) ? window.pageXOffset : rootNode.scrollLeft,\n            scrollY = (window.pageYOffset !== undefined) ? window.pageYOffset : rootNode.scrollTop,\n            touches = event.changedTouches,\n            x, y;\n        \n        if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n        } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n        }\n\n        return { \n            x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n            y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n        };\n    };\n\n})();\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n*\n* @class Plugin\n*/\n\nvar Plugin = {};\n\nmodule.exports = Plugin;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    Plugin._registry = {};\n\n    /**\n     * Registers a plugin object so it can be resolved later by name.\n     * @method register\n     * @param plugin {} The plugin to register.\n     * @return {object} The plugin.\n     */\n    Plugin.register = function(plugin) {\n        if (!Plugin.isPlugin(plugin)) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n        }\n\n        if (plugin.name in Plugin._registry) {\n            var registered = Plugin._registry[plugin.name],\n                pluginVersion = Plugin.versionParse(plugin.version).number,\n                registeredVersion = Plugin.versionParse(registered.version).number;\n\n            if (pluginVersion > registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n                Plugin._registry[plugin.name] = plugin;\n            } else if (pluginVersion < registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n            } else if (plugin !== registered) {\n                Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n            }\n        } else {\n            Plugin._registry[plugin.name] = plugin;\n        }\n\n        return plugin;\n    };\n\n    /**\n     * Resolves a dependency to a plugin object from the registry if it exists. \n     * The `dependency` may contain a version, but only the name matters when resolving.\n     * @method resolve\n     * @param dependency {string} The dependency.\n     * @return {object} The plugin if resolved, otherwise `undefined`.\n     */\n    Plugin.resolve = function(dependency) {\n        return Plugin._registry[Plugin.dependencyParse(dependency).name];\n    };\n\n    /**\n     * Returns a pretty printed plugin name and version.\n     * @method toString\n     * @param plugin {} The plugin.\n     * @return {string} Pretty printed plugin name and version.\n     */\n    Plugin.toString = function(plugin) {\n        return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n    };\n\n    /**\n     * Returns `true` if the object meets the minimum standard to be considered a plugin.\n     * This means it must define the following properties:\n     * - `name`\n     * - `version`\n     * - `install`\n     * @method isPlugin\n     * @param obj {} The obj to test.\n     * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n     */\n    Plugin.isPlugin = function(obj) {\n        return obj && obj.name && obj.version && obj.install;\n    };\n\n    /**\n     * Returns `true` if a plugin with the given `name` been installed on `module`.\n     * @method isUsed\n     * @param module {} The module.\n     * @param name {string} The plugin name.\n     * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n     */\n    Plugin.isUsed = function(module, name) {\n        return module.used.indexOf(name) > -1;\n    };\n\n    /**\n     * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n     * If `plugin.for` is not specified then it is assumed to be applicable.\n     * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n     * @method isFor\n     * @param plugin {} The plugin.\n     * @param module {} The module.\n     * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n     */\n    Plugin.isFor = function(plugin, module) {\n        var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n        return !plugin.for || (module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range));\n    };\n\n    /**\n     * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n     * For installing plugins on `Matter` see the convenience function `Matter.use`.\n     * Plugins may be specified either by their name or a reference to the plugin object.\n     * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n     * Order is important, a topological sort is performed to find the best resulting order of installation.\n     * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n     * This function logs the resulting status of each dependency in the console, along with any warnings.\n     * - A green tick ✅ indicates a dependency was resolved and installed.\n     * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n     * - A red cross ❌ indicates a dependency could not be resolved.\n     * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n     * @method use\n     * @param module {} The module install plugins on.\n     * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n     */\n    Plugin.use = function(module, plugins) {\n        module.uses = (module.uses || []).concat(plugins || []);\n\n        if (module.uses.length === 0) {\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n            return;\n        }\n\n        var dependencies = Plugin.dependencies(module),\n            sortedDependencies = Common.topologicalSort(dependencies),\n            status = [];\n\n        for (var i = 0; i < sortedDependencies.length; i += 1) {\n            if (sortedDependencies[i] === module.name) {\n                continue;\n            }\n\n            var plugin = Plugin.resolve(sortedDependencies[i]);\n\n            if (!plugin) {\n                status.push('❌ ' + sortedDependencies[i]);\n                continue;\n            }\n\n            if (Plugin.isUsed(module, plugin.name)) {\n                continue;\n            }\n\n            if (!Plugin.isFor(plugin, module)) {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n                plugin._warned = true;\n            }\n\n            if (plugin.install) {\n                plugin.install(module);\n            } else {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n                plugin._warned = true;\n            }\n\n            if (plugin._warned) {\n                status.push('🔶 ' + Plugin.toString(plugin));\n                delete plugin._warned;\n            } else {\n                status.push('✅ ' + Plugin.toString(plugin));\n            }\n\n            module.used.push(plugin.name);\n        }\n\n        if (status.length > 0) {\n            Common.info(status.join('  '));\n        }\n    };\n\n    /**\n     * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n     * @method dependencies\n     * @param module {} The module.\n     * @return {object} A dependency graph.\n     */\n    Plugin.dependencies = function(module, tracked) {\n        var parsedBase = Plugin.dependencyParse(module),\n            name = parsedBase.name;\n\n        tracked = tracked || {};\n\n        if (name in tracked) {\n            return;\n        }\n\n        module = Plugin.resolve(module) || module;\n\n        tracked[name] = Common.map(module.uses || [], function(dependency) {\n            if (Plugin.isPlugin(dependency)) {\n                Plugin.register(dependency);\n            }\n\n            var parsed = Plugin.dependencyParse(dependency),\n                resolved = Plugin.resolve(dependency);\n\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy',\n                    Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.'\n                );\n\n                resolved._warned = true;\n                module._warned = true;\n            } else if (!resolved) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(dependency), 'used by',\n                    Plugin.toString(parsedBase), 'could not be resolved.'\n                );\n\n                module._warned = true;\n            }\n\n            return parsed.name;\n        });\n\n        for (var i = 0; i < tracked[name].length; i += 1) {\n            Plugin.dependencies(tracked[name][i], tracked);\n        }\n\n        return tracked;\n    };\n\n    /**\n     * Parses a dependency string into its components.\n     * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * This function can also handle dependencies that are already resolved (e.g. a module object).\n     * @method dependencyParse\n     * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n     * @return {object} The dependency parsed into its components.\n     */\n    Plugin.dependencyParse = function(dependency) {\n        if (Common.isString(dependency)) {\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-+]+)?))?$/;\n\n            if (!pattern.test(dependency)) {\n                Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n            }\n\n            return {\n                name: dependency.split('@')[0],\n                range: dependency.split('@')[1] || '*'\n            };\n        }\n\n        return {\n            name: dependency.name,\n            range: dependency.range || dependency.version\n        };\n    };\n\n    /**\n     * Parses a version string into its components.  \n     * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n     * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n     * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n     * Only the following range types are supported:\n     * - Tilde ranges e.g. `~1.2.3`\n     * - Caret ranges e.g. `^1.2.3`\n     * - Greater than ranges e.g. `>1.2.3`\n     * - Greater than or equal ranges e.g. `>=1.2.3`\n     * - Exact version e.g. `1.2.3`\n     * - Any version `*`\n     * @method versionParse\n     * @param range {string} The version string.\n     * @return {object} The version range parsed into its components.\n     */\n    Plugin.versionParse = function(range) {\n        var pattern = /^(\\*)|(\\^|~|>=|>)?\\s*((\\d+)\\.(\\d+)\\.(\\d+))(-[0-9A-Za-z-+]+)?$/;\n\n        if (!pattern.test(range)) {\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n        }\n\n        var parts = pattern.exec(range);\n        var major = Number(parts[4]);\n        var minor = Number(parts[5]);\n        var patch = Number(parts[6]);\n\n        return {\n            isRange: Boolean(parts[1] || parts[2]),\n            version: parts[3],\n            range: range,\n            operator: parts[1] || parts[2] || '',\n            major: major,\n            minor: minor,\n            patch: patch,\n            parts: [major, minor, patch],\n            prerelease: parts[7],\n            number: major * 1e8 + minor * 1e4 + patch\n        };\n    };\n\n    /**\n     * Returns `true` if `version` satisfies the given `range`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n     * @method versionSatisfies\n     * @param version {string} The version string.\n     * @param range {string} The range string.\n     * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n     */\n    Plugin.versionSatisfies = function(version, range) {\n        range = range || '*';\n\n        var r = Plugin.versionParse(range),\n            v = Plugin.versionParse(version);\n\n        if (r.isRange) {\n            if (r.operator === '*' || version === '*') {\n                return true;\n            }\n\n            if (r.operator === '>') {\n                return v.number > r.number;\n            }\n\n            if (r.operator === '>=') {\n                return v.number >= r.number;\n            }\n\n            if (r.operator === '~') {\n                return v.major === r.major && v.minor === r.minor && v.patch >= r.patch;\n            }\n\n            if (r.operator === '^') {\n                if (r.major > 0) {\n                    return v.major === r.major && v.number >= r.number;\n                }\n\n                if (r.minor > 0) {\n                    return v.minor === r.minor && v.patch >= r.patch;\n                }\n\n                return v.patch === r.patch;\n            }\n        }\n\n        return version === range || version === '*';\n    };\n\n})();\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n*\n* @class Contact\n*/\n\nvar Contact = {};\n\nmodule.exports = Contact;\n\n(function() {\n\n    /**\n     * Creates a new contact.\n     * @method create\n     * @param {vertex} [vertex]\n     * @return {contact} A new contact\n     */\n    Contact.create = function(vertex) {\n        return {\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n        };\n    };\n\n})();\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Engine` module contains methods for creating and manipulating engines.\n* An engine is a controller that manages updating the simulation of the world.\n* See `Matter.Runner` for an optional game loop utility.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Engine\n*/\n\nvar Engine = {};\n\nmodule.exports = Engine;\n\nvar Sleeping = __webpack_require__(7);\nvar Resolver = __webpack_require__(18);\nvar Detector = __webpack_require__(13);\nvar Pairs = __webpack_require__(19);\nvar Events = __webpack_require__(5);\nvar Composite = __webpack_require__(6);\nvar Constraint = __webpack_require__(10);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(4);\n\n(function() {\n\n    Engine._deltaMax = 1000 / 60;\n\n    /**\n     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {engine} engine\n     */\n    Engine.create = function(options) {\n        options = options || {};\n\n        var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            plugin: {},\n            gravity: {\n                x: 0,\n                y: 1,\n                scale: 0.001\n            },\n            timing: {\n                timestamp: 0,\n                timeScale: 1,\n                lastDelta: 0,\n                lastElapsed: 0,\n                lastUpdatesPerFrame: 0\n            }\n        };\n\n        var engine = Common.extend(defaults, options);\n\n        engine.world = options.world || Composite.create({ label: 'World' });\n        engine.pairs = options.pairs || Pairs.create();\n        engine.detector = options.detector || Detector.create();\n        engine.detector.pairs = engine.pairs;\n\n        // for temporary back compatibility only\n        engine.grid = { buckets: [] };\n        engine.world.gravity = engine.gravity;\n        engine.broadphase = engine.grid;\n        engine.metrics = {};\n        \n        return engine;\n    };\n\n    /**\n     * Moves the simulation forward in time by `delta` milliseconds.\n     * Triggers `beforeUpdate`, `beforeSolve` and `afterUpdate` events.\n     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n     * @method update\n     * @param {engine} engine\n     * @param {number} [delta=16.666]\n     */\n    Engine.update = function(engine, delta) {\n        var startTime = Common.now();\n\n        var world = engine.world,\n            detector = engine.detector,\n            pairs = engine.pairs,\n            timing = engine.timing,\n            timestamp = timing.timestamp,\n            i;\n\n        // warn if high delta\n        if (delta > Engine._deltaMax) {\n            Common.warnOnce(\n                'Matter.Engine.update: delta argument is recommended to be less than or equal to', Engine._deltaMax.toFixed(3), 'ms.'\n            );\n        }\n\n        delta = typeof delta !== 'undefined' ? delta : Common._baseDelta;\n        delta *= timing.timeScale;\n\n        // increment timestamp\n        timing.timestamp += delta;\n        timing.lastDelta = delta;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp,\n            delta: delta\n        };\n\n        Events.trigger(engine, 'beforeUpdate', event);\n\n        // get all bodies and all constraints in the world\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world);\n\n        // if the world has changed\n        if (world.isModified) {\n            // update the detector bodies\n            Detector.setBodies(detector, allBodies);\n\n            // reset all composite modified flags\n            Composite.setModified(world, false, false, true);\n        }\n\n        // update sleeping if enabled\n        if (engine.enableSleeping)\n            Sleeping.update(allBodies, delta);\n\n        // apply gravity to all bodies\n        Engine._bodiesApplyGravity(allBodies, engine.gravity);\n\n        // update all body position and rotation by integration\n        if (delta > 0) {\n            Engine._bodiesUpdate(allBodies, delta);\n        }\n\n        Events.trigger(engine, 'beforeSolve', event);\n\n        // update all constraints (first pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, delta);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // find all collisions\n        var collisions = Detector.collisions(detector);\n\n        // update collision pairs\n        Pairs.update(pairs, collisions, timestamp);\n\n        // wake up bodies involved in collisions\n        if (engine.enableSleeping)\n            Sleeping.afterCollisions(pairs.list);\n\n        // trigger collision events\n        if (pairs.collisionStart.length > 0) {\n            Events.trigger(engine, 'collisionStart', { \n                pairs: pairs.collisionStart,\n                timestamp: timing.timestamp,\n                delta: delta\n            });\n        }\n\n        // iteratively resolve position between collisions\n        var positionDamping = Common.clamp(20 / engine.positionIterations, 0, 1);\n        \n        Resolver.preSolvePosition(pairs.list);\n        for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, delta, positionDamping);\n        }\n        Resolver.postSolvePosition(allBodies);\n\n        // update all constraints (second pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, delta);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // iteratively resolve velocity between collisions\n        Resolver.preSolveVelocity(pairs.list);\n        for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, delta);\n        }\n\n        // update body speed and velocity properties\n        Engine._bodiesUpdateVelocities(allBodies);\n\n        // trigger collision events\n        if (pairs.collisionActive.length > 0) {\n            Events.trigger(engine, 'collisionActive', { \n                pairs: pairs.collisionActive, \n                timestamp: timing.timestamp,\n                delta: delta\n            });\n        }\n\n        if (pairs.collisionEnd.length > 0) {\n            Events.trigger(engine, 'collisionEnd', {\n                pairs: pairs.collisionEnd,\n                timestamp: timing.timestamp,\n                delta: delta\n            });\n        }\n\n        // clear force buffers\n        Engine._bodiesClearForces(allBodies);\n\n        Events.trigger(engine, 'afterUpdate', event);\n\n        // log the time elapsed computing this update\n        engine.timing.lastElapsed = Common.now() - startTime;\n\n        return engine;\n    };\n    \n    /**\n     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n     * @method merge\n     * @param {engine} engineA\n     * @param {engine} engineB\n     */\n    Engine.merge = function(engineA, engineB) {\n        Common.extend(engineA, engineB);\n        \n        if (engineB.world) {\n            engineA.world = engineB.world;\n\n            Engine.clear(engineA);\n\n            var bodies = Composite.allBodies(engineA.world);\n\n            for (var i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                Sleeping.set(body, false);\n                body.id = Common.nextId();\n            }\n        }\n    };\n\n    /**\n     * Clears the engine pairs and detector.\n     * @method clear\n     * @param {engine} engine\n     */\n    Engine.clear = function(engine) {\n        Pairs.clear(engine.pairs);\n        Detector.clear(engine.detector);\n    };\n\n    /**\n     * Zeroes the `body.force` and `body.torque` force buffers.\n     * @method _bodiesClearForces\n     * @private\n     * @param {body[]} bodies\n     */\n    Engine._bodiesClearForces = function(bodies) {\n        var bodiesLength = bodies.length;\n\n        for (var i = 0; i < bodiesLength; i++) {\n            var body = bodies[i];\n\n            // reset force buffers\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n        }\n    };\n\n    /**\n     * Applies gravitational acceleration to all `bodies`.\n     * This models a [uniform gravitational field](https://en.wikipedia.org/wiki/Gravity_of_Earth), similar to near the surface of a planet.\n     * \n     * @method _bodiesApplyGravity\n     * @private\n     * @param {body[]} bodies\n     * @param {vector} gravity\n     */\n    Engine._bodiesApplyGravity = function(bodies, gravity) {\n        var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001,\n            bodiesLength = bodies.length;\n\n        if ((gravity.x === 0 && gravity.y === 0) || gravityScale === 0) {\n            return;\n        }\n        \n        for (var i = 0; i < bodiesLength; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            // add the resultant force of gravity\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n        }\n    };\n\n    /**\n     * Applies `Body.update` to all given `bodies`.\n     * @method _bodiesUpdate\n     * @private\n     * @param {body[]} bodies\n     * @param {number} delta The amount of time elapsed between updates\n     */\n    Engine._bodiesUpdate = function(bodies, delta) {\n        var bodiesLength = bodies.length;\n\n        for (var i = 0; i < bodiesLength; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            Body.update(body, delta);\n        }\n    };\n\n    /**\n     * Applies `Body.updateVelocities` to all given `bodies`.\n     * @method _bodiesUpdateVelocities\n     * @private\n     * @param {body[]} bodies\n     */\n    Engine._bodiesUpdateVelocities = function(bodies) {\n        var bodiesLength = bodies.length;\n\n        for (var i = 0; i < bodiesLength; i++) {\n            Body.updateVelocities(bodies[i]);\n        }\n    };\n\n    /**\n     * A deprecated alias for `Runner.run`, use `Matter.Runner.run(engine)` instead and see `Matter.Runner` for more information.\n     * @deprecated use Matter.Runner.run(engine) instead\n     * @method run\n     * @param {engine} engine\n     */\n\n    /**\n    * Fired just before an update\n    *\n    * @event beforeUpdate\n    * @param {object} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {number} event.delta The delta time in milliseconds value used in the update\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after bodies updated based on their velocity and forces, but before any collision detection, constraints and resolving etc.\n    *\n    * @event beforeSolve\n    * @param {object} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {number} event.delta The delta time in milliseconds value used in the update\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update and all collision events\n    *\n    * @event afterUpdate\n    * @param {object} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {number} event.delta The delta time in milliseconds value used in the update\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n    *\n    * @event collisionStart\n    * @param {object} event An event object\n    * @param {pair[]} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {number} event.delta The delta time in milliseconds value used in the update\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n    *\n    * @event collisionActive\n    * @param {object} event An event object\n    * @param {pair[]} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {number} event.delta The delta time in milliseconds value used in the update\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n    *\n    * @event collisionEnd\n    * @param {object} event An event object\n    * @param {pair[]} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {number} event.delta The delta time in milliseconds value used in the update\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` that specifies the number of position iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property positionIterations\n     * @type number\n     * @default 6\n     */\n\n    /**\n     * An integer `Number` that specifies the number of velocity iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property velocityIterations\n     * @type number\n     * @default 4\n     */\n\n    /**\n     * An integer `Number` that specifies the number of constraint iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     * The default value of `2` is usually very adequate.\n     *\n     * @property constraintIterations\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n     * Sleeping can improve stability and performance, but often at the expense of accuracy.\n     *\n     * @property enableSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * An `Object` containing properties regarding the timing systems of the engine. \n     *\n     * @property timing\n     * @type object\n     */\n\n    /**\n     * A `Number` that specifies the global scaling factor of time for all bodies.\n     * A value of `0` freezes the simulation.\n     * A value of `0.1` gives a slow-motion effect.\n     * A value of `1.2` gives a speed-up effect.\n     *\n     * @property timing.timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n     * It is incremented on every `Engine.update` by the given `delta` argument. \n     * \n     * @property timing.timestamp\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that represents the total execution time elapsed during the last `Engine.update` in milliseconds.\n     * It is updated by timing from the start of the last `Engine.update` call until it ends.\n     *\n     * This value will also include the total execution time of all event handlers directly or indirectly triggered by the engine update.\n     * \n     * @property timing.lastElapsed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that represents the `delta` value used in the last engine update.\n     * \n     * @property timing.lastDelta\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Matter.Detector` instance.\n     *\n     * @property detector\n     * @type detector\n     * @default a Matter.Detector instance\n     */\n\n    /**\n     * A `Matter.Grid` instance.\n     *\n     * @deprecated replaced by `engine.detector`\n     * @property grid\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * Replaced by and now alias for `engine.grid`.\n     *\n     * @deprecated replaced by `engine.detector`\n     * @property broadphase\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * The root `Matter.Composite` instance that will contain all bodies, constraints and other composites to be simulated by this engine.\n     *\n     * @property world\n     * @type composite\n     * @default a Matter.Composite instance\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * An optional gravitational acceleration applied to all bodies in `engine.world` on every update.\n     * \n     * This models a [uniform gravitational field](https://en.wikipedia.org/wiki/Gravity_of_Earth), similar to near the surface of a planet. For gravity in other contexts, disable this and apply forces as needed.\n     * \n     * To disable set the `scale` component to `0`.\n     * \n     * This is split into three components for ease of use:  \n     * a normalised direction (`x` and `y`) and magnitude (`scale`).\n     *\n     * @property gravity\n     * @type object\n     */\n\n    /**\n     * The gravitational direction normal `x` component, to be multiplied by `gravity.scale`.\n     * \n     * @property gravity.x\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * The gravitational direction normal `y` component, to be multiplied by `gravity.scale`.\n     *\n     * @property gravity.y\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * The magnitude of the gravitational acceleration.\n     * \n     * @property gravity.scale\n     * @type object\n     * @default 0.001\n     */\n\n})();\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Resolver` module contains methods for resolving collision pairs.\n*\n* @class Resolver\n*/\n\nvar Resolver = {};\n\nmodule.exports = Resolver;\n\nvar Vertices = __webpack_require__(3);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\n\n(function() {\n\n    Resolver._restingThresh = 2;\n    Resolver._restingThreshTangent = Math.sqrt(6);\n    Resolver._positionDampen = 0.9;\n    Resolver._positionWarming = 0.8;\n    Resolver._frictionNormalMultiplier = 5;\n    Resolver._frictionMaxStatic = Number.MAX_VALUE;\n\n    /**\n     * Prepare pairs for position solving.\n     * @method preSolvePosition\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolvePosition = function(pairs) {\n        var i,\n            pair,\n            contactCount,\n            pairsLength = pairs.length;\n\n        // find total contacts on each body\n        for (i = 0; i < pairsLength; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive)\n                continue;\n            \n            contactCount = pair.contactCount;\n            pair.collision.parentA.totalContacts += contactCount;\n            pair.collision.parentB.totalContacts += contactCount;\n        }\n    };\n\n    /**\n     * Find a solution for pair positions.\n     * @method solvePosition\n     * @param {pair[]} pairs\n     * @param {number} delta\n     * @param {number} [damping=1]\n     */\n    Resolver.solvePosition = function(pairs, delta, damping) {\n        var i,\n            pair,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            contactShare,\n            positionImpulse,\n            positionDampen = Resolver._positionDampen * (damping || 1),\n            slopDampen = Common.clamp(delta / Common._baseDelta, 0, 1),\n            pairsLength = pairs.length;\n\n        // find impulses required to resolve penetration\n        for (i = 0; i < pairsLength; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n\n            // get current separation between body edges involved in collision\n            pair.separation = \n                collision.depth + normal.x * (bodyB.positionImpulse.x - bodyA.positionImpulse.x)\n                + normal.y * (bodyB.positionImpulse.y - bodyA.positionImpulse.y);\n        }\n        \n        for (i = 0; i < pairsLength; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = pair.separation - pair.slop * slopDampen;\n\n            if (bodyA.isStatic || bodyB.isStatic)\n                positionImpulse *= 2;\n            \n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                contactShare = positionDampen / bodyA.totalContacts;\n                bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n                bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                contactShare = positionDampen / bodyB.totalContacts;\n                bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n                bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n        }\n    };\n\n    /**\n     * Apply position resolution.\n     * @method postSolvePosition\n     * @param {body[]} bodies\n     */\n    Resolver.postSolvePosition = function(bodies) {\n        var positionWarming = Resolver._positionWarming,\n            bodiesLength = bodies.length,\n            verticesTranslate = Vertices.translate,\n            boundsUpdate = Bounds.update;\n\n        for (var i = 0; i < bodiesLength; i++) {\n            var body = bodies[i],\n                positionImpulse = body.positionImpulse,\n                positionImpulseX = positionImpulse.x,\n                positionImpulseY = positionImpulse.y,\n                velocity = body.velocity;\n\n            // reset contact count\n            body.totalContacts = 0;\n\n            if (positionImpulseX !== 0 || positionImpulseY !== 0) {\n                // update body geometry\n                for (var j = 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n                    verticesTranslate(part.vertices, positionImpulse);\n                    boundsUpdate(part.bounds, part.vertices, velocity);\n                    part.position.x += positionImpulseX;\n                    part.position.y += positionImpulseY;\n                }\n\n                // move the body without changing velocity\n                body.positionPrev.x += positionImpulseX;\n                body.positionPrev.y += positionImpulseY;\n\n                if (positionImpulseX * velocity.x + positionImpulseY * velocity.y < 0) {\n                    // reset cached impulse if the body has velocity along it\n                    positionImpulse.x = 0;\n                    positionImpulse.y = 0;\n                } else {\n                    // warm the next iteration\n                    positionImpulse.x *= positionWarming;\n                    positionImpulse.y *= positionWarming;\n                }\n            }\n        }\n    };\n\n    /**\n     * Prepare pairs for velocity solving.\n     * @method preSolveVelocity\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolveVelocity = function(pairs) {\n        var pairsLength = pairs.length,\n            i,\n            j;\n        \n        for (i = 0; i < pairsLength; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var contacts = pair.contacts,\n                contactCount = pair.contactCount,\n                collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normal = collision.normal,\n                tangent = collision.tangent;\n    \n            // resolve each contact\n            for (j = 0; j < contactCount; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex,\n                    normalImpulse = contact.normalImpulse,\n                    tangentImpulse = contact.tangentImpulse;\n    \n                if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                    // total impulse from contact\n                    var impulseX = normal.x * normalImpulse + tangent.x * tangentImpulse,\n                        impulseY = normal.y * normalImpulse + tangent.y * tangentImpulse;\n                    \n                    // apply impulse from contact\n                    if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                        bodyA.positionPrev.x += impulseX * bodyA.inverseMass;\n                        bodyA.positionPrev.y += impulseY * bodyA.inverseMass;\n                        bodyA.anglePrev += bodyA.inverseInertia * (\n                            (contactVertex.x - bodyA.position.x) * impulseY\n                            - (contactVertex.y - bodyA.position.y) * impulseX\n                        );\n                    }\n    \n                    if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                        bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;\n                        bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;\n                        bodyB.anglePrev -= bodyB.inverseInertia * (\n                            (contactVertex.x - bodyB.position.x) * impulseY \n                            - (contactVertex.y - bodyB.position.y) * impulseX\n                        );\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Find a solution for pair velocities.\n     * @method solveVelocity\n     * @param {pair[]} pairs\n     * @param {number} delta\n     */\n    Resolver.solveVelocity = function(pairs, delta) {\n        var timeScale = delta / Common._baseDelta,\n            timeScaleSquared = timeScale * timeScale,\n            timeScaleCubed = timeScaleSquared * timeScale,\n            restingThresh = -Resolver._restingThresh * timeScale,\n            restingThreshTangent = Resolver._restingThreshTangent,\n            frictionNormalMultiplier = Resolver._frictionNormalMultiplier * timeScale,\n            frictionMaxStatic = Resolver._frictionMaxStatic,\n            pairsLength = pairs.length,\n            tangentImpulse,\n            maxFriction,\n            i,\n            j;\n\n        for (i = 0; i < pairsLength; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normalX = collision.normal.x,\n                normalY = collision.normal.y,\n                tangentX = collision.tangent.x,\n                tangentY = collision.tangent.y,\n                inverseMassTotal = pair.inverseMass,\n                friction = pair.friction * pair.frictionStatic * frictionNormalMultiplier,\n                contacts = pair.contacts,\n                contactCount = pair.contactCount,\n                contactShare = 1 / contactCount;\n\n            // get body velocities\n            var bodyAVelocityX = bodyA.position.x - bodyA.positionPrev.x,\n                bodyAVelocityY = bodyA.position.y - bodyA.positionPrev.y,\n                bodyAAngularVelocity = bodyA.angle - bodyA.anglePrev,\n                bodyBVelocityX = bodyB.position.x - bodyB.positionPrev.x,\n                bodyBVelocityY = bodyB.position.y - bodyB.positionPrev.y,\n                bodyBAngularVelocity = bodyB.angle - bodyB.anglePrev;\n\n            // resolve each contact\n            for (j = 0; j < contactCount; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex;\n\n                var offsetAX = contactVertex.x - bodyA.position.x,\n                    offsetAY = contactVertex.y - bodyA.position.y,\n                    offsetBX = contactVertex.x - bodyB.position.x,\n                    offsetBY = contactVertex.y - bodyB.position.y;\n \n                var velocityPointAX = bodyAVelocityX - offsetAY * bodyAAngularVelocity,\n                    velocityPointAY = bodyAVelocityY + offsetAX * bodyAAngularVelocity,\n                    velocityPointBX = bodyBVelocityX - offsetBY * bodyBAngularVelocity,\n                    velocityPointBY = bodyBVelocityY + offsetBX * bodyBAngularVelocity;\n\n                var relativeVelocityX = velocityPointAX - velocityPointBX,\n                    relativeVelocityY = velocityPointAY - velocityPointBY;\n\n                var normalVelocity = normalX * relativeVelocityX + normalY * relativeVelocityY,\n                    tangentVelocity = tangentX * relativeVelocityX + tangentY * relativeVelocityY;\n\n                // coulomb friction\n                var normalOverlap = pair.separation + normalVelocity;\n                var normalForce = Math.min(normalOverlap, 1);\n                normalForce = normalOverlap < 0 ? 0 : normalForce;\n\n                var frictionLimit = normalForce * friction;\n\n                if (tangentVelocity < -frictionLimit || tangentVelocity > frictionLimit) {\n                    maxFriction = (tangentVelocity > 0 ? tangentVelocity : -tangentVelocity);\n                    tangentImpulse = pair.friction * (tangentVelocity > 0 ? 1 : -1) * timeScaleCubed;\n                    \n                    if (tangentImpulse < -maxFriction) {\n                        tangentImpulse = -maxFriction;\n                    } else if (tangentImpulse > maxFriction) {\n                        tangentImpulse = maxFriction;\n                    }\n                } else {\n                    tangentImpulse = tangentVelocity;\n                    maxFriction = frictionMaxStatic;\n                }\n\n                // account for mass, inertia and contact offset\n                var oAcN = offsetAX * normalY - offsetAY * normalX,\n                    oBcN = offsetBX * normalY - offsetBY * normalX,\n                    share = contactShare / (inverseMassTotal + bodyA.inverseInertia * oAcN * oAcN + bodyB.inverseInertia * oBcN * oBcN);\n\n                // raw impulses\n                var normalImpulse = (1 + pair.restitution) * normalVelocity * share;\n                tangentImpulse *= share;\n\n                // handle high velocity and resting collisions separately\n                if (normalVelocity < restingThresh) {\n                    // high normal velocity so clear cached contact normal impulse\n                    contact.normalImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // impulse constraint tends to 0\n                    var contactNormalImpulse = contact.normalImpulse;\n                    contact.normalImpulse += normalImpulse;\n                    if (contact.normalImpulse > 0) contact.normalImpulse = 0;\n                    normalImpulse = contact.normalImpulse - contactNormalImpulse;\n                }\n\n                // handle high velocity and resting collisions separately\n                if (tangentVelocity < -restingThreshTangent || tangentVelocity > restingThreshTangent) {\n                    // high tangent velocity so clear cached contact tangent impulse\n                    contact.tangentImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                    var contactTangentImpulse = contact.tangentImpulse;\n                    contact.tangentImpulse += tangentImpulse;\n                    if (contact.tangentImpulse < -maxFriction) contact.tangentImpulse = -maxFriction;\n                    if (contact.tangentImpulse > maxFriction) contact.tangentImpulse = maxFriction;\n                    tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n                }\n\n                // total impulse from contact\n                var impulseX = normalX * normalImpulse + tangentX * tangentImpulse,\n                    impulseY = normalY * normalImpulse + tangentY * tangentImpulse;\n                \n                // apply impulse from contact\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                    bodyA.positionPrev.x += impulseX * bodyA.inverseMass;\n                    bodyA.positionPrev.y += impulseY * bodyA.inverseMass;\n                    bodyA.anglePrev += (offsetAX * impulseY - offsetAY * impulseX) * bodyA.inverseInertia;\n                }\n\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                    bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;\n                    bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;\n                    bodyB.anglePrev -= (offsetBX * impulseY - offsetBY * impulseX) * bodyB.inverseInertia;\n                }\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n*\n* @class Pairs\n*/\n\nvar Pairs = {};\n\nmodule.exports = Pairs;\n\nvar Pair = __webpack_require__(9);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new pairs structure.\n     * @method create\n     * @param {object} options\n     * @return {pairs} A new pairs structure\n     */\n    Pairs.create = function(options) {\n        return Common.extend({ \n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n        }, options);\n    };\n\n    /**\n     * Updates pairs given a list of collisions.\n     * @method update\n     * @param {object} pairs\n     * @param {collision[]} collisions\n     * @param {number} timestamp\n     */\n    Pairs.update = function(pairs, collisions, timestamp) {\n        var pairUpdate = Pair.update,\n            pairCreate = Pair.create,\n            pairSetActive = Pair.setActive,\n            pairsTable = pairs.table,\n            pairsList = pairs.list,\n            pairsListLength = pairsList.length,\n            pairsListIndex = pairsListLength,\n            collisionStart = pairs.collisionStart,\n            collisionEnd = pairs.collisionEnd,\n            collisionActive = pairs.collisionActive,\n            collisionsLength = collisions.length,\n            collisionStartIndex = 0,\n            collisionEndIndex = 0,\n            collisionActiveIndex = 0,\n            collision,\n            pair,\n            i;\n\n        for (i = 0; i < collisionsLength; i++) {\n            collision = collisions[i];\n            pair = collision.pair;\n\n            if (pair) {\n                // pair already exists (but may or may not be active)\n                if (pair.isActive) {\n                    // pair exists and is active\n                    collisionActive[collisionActiveIndex++] = pair;\n                }\n\n                // update the pair\n                pairUpdate(pair, collision, timestamp);\n            } else {\n                // pair did not exist, create a new pair\n                pair = pairCreate(collision, timestamp);\n                pairsTable[pair.id] = pair;\n\n                // add the new pair\n                collisionStart[collisionStartIndex++] = pair;\n                pairsList[pairsListIndex++] = pair;\n            }\n        }\n\n        // find pairs that are no longer active\n        pairsListIndex = 0;\n        pairsListLength = pairsList.length;\n\n        for (i = 0; i < pairsListLength; i++) {\n            pair = pairsList[i];\n            \n            // pair is active if updated this timestep\n            if (pair.timeUpdated >= timestamp) {\n                // keep active pairs\n                pairsList[pairsListIndex++] = pair;\n            } else {\n                pairSetActive(pair, false, timestamp);\n\n                // keep inactive pairs if both bodies may be sleeping\n                if (pair.collision.bodyA.sleepCounter > 0 && pair.collision.bodyB.sleepCounter > 0) {\n                    pairsList[pairsListIndex++] = pair;\n                } else {\n                    // remove inactive pairs if either body awake\n                    collisionEnd[collisionEndIndex++] = pair;\n                    delete pairsTable[pair.id];\n                }\n            }\n        }\n\n        // update array lengths if changed\n        if (pairsList.length !== pairsListIndex) {\n            pairsList.length = pairsListIndex;\n        }\n\n        if (collisionStart.length !== collisionStartIndex) {\n            collisionStart.length = collisionStartIndex;\n        }\n\n        if (collisionEnd.length !== collisionEndIndex) {\n            collisionEnd.length = collisionEndIndex;\n        }\n\n        if (collisionActive.length !== collisionActiveIndex) {\n            collisionActive.length = collisionActiveIndex;\n        }\n    };\n\n    /**\n     * Clears the given pairs structure.\n     * @method clear\n     * @param {pairs} pairs\n     * @return {pairs} pairs\n     */\n    Pairs.clear = function(pairs) {\n        pairs.table = {};\n        pairs.list.length = 0;\n        pairs.collisionStart.length = 0;\n        pairs.collisionActive.length = 0;\n        pairs.collisionEnd.length = 0;\n        return pairs;\n    };\n\n})();\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Matter = module.exports = __webpack_require__(21);\r\n\r\nMatter.Axes = __webpack_require__(11);\r\nMatter.Bodies = __webpack_require__(12);\r\nMatter.Body = __webpack_require__(4);\r\nMatter.Bounds = __webpack_require__(1);\r\nMatter.Collision = __webpack_require__(8);\r\nMatter.Common = __webpack_require__(0);\r\nMatter.Composite = __webpack_require__(6);\r\nMatter.Composites = __webpack_require__(22);\r\nMatter.Constraint = __webpack_require__(10);\r\nMatter.Contact = __webpack_require__(16);\r\nMatter.Detector = __webpack_require__(13);\r\nMatter.Engine = __webpack_require__(17);\r\nMatter.Events = __webpack_require__(5);\r\nMatter.Grid = __webpack_require__(23);\r\nMatter.Mouse = __webpack_require__(14);\r\nMatter.MouseConstraint = __webpack_require__(24);\r\nMatter.Pair = __webpack_require__(9);\r\nMatter.Pairs = __webpack_require__(19);\r\nMatter.Plugin = __webpack_require__(15);\r\nMatter.Query = __webpack_require__(25);\r\nMatter.Render = __webpack_require__(26);\r\nMatter.Resolver = __webpack_require__(18);\r\nMatter.Runner = __webpack_require__(27);\r\nMatter.SAT = __webpack_require__(28);\r\nMatter.Sleeping = __webpack_require__(7);\r\nMatter.Svg = __webpack_require__(29);\r\nMatter.Vector = __webpack_require__(2);\r\nMatter.Vertices = __webpack_require__(3);\r\nMatter.World = __webpack_require__(30);\r\n\r\n// temporary back compatibility\r\nMatter.Engine.run = Matter.Runner.run;\r\nMatter.Common.deprecated(Matter.Engine, 'run', 'Engine.run ➤ use Matter.Runner.run(engine) instead');\r\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\r\n* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\r\n*\r\n* @class Matter\r\n*/\r\n\r\nvar Matter = {};\r\n\r\nmodule.exports = Matter;\r\n\r\nvar Plugin = __webpack_require__(15);\r\nvar Common = __webpack_require__(0);\r\n\r\n(function() {\r\n\r\n    /**\r\n     * The library name.\r\n     * @property name\r\n     * @readOnly\r\n     * @type {String}\r\n     */\r\n    Matter.name = 'matter-js';\r\n\r\n    /**\r\n     * The library version.\r\n     * @property version\r\n     * @readOnly\r\n     * @type {String}\r\n     */\r\n    Matter.version =  true ? \"0.20.0\" : undefined;\r\n\r\n    /**\r\n     * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\r\n     * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\r\n     * @property uses\r\n     * @type {Array}\r\n     */\r\n    Matter.uses = [];\r\n\r\n    /**\r\n     * The plugins that have been installed through `Matter.Plugin.install`. Read only.\r\n     * @property used\r\n     * @readOnly\r\n     * @type {Array}\r\n     */\r\n    Matter.used = [];\r\n\r\n    /**\r\n     * Installs the given plugins on the `Matter` namespace.\r\n     * This is a short-hand for `Plugin.use`, see it for more information.\r\n     * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\r\n     * Avoid calling this function multiple times unless you intend to manually control installation order.\r\n     * @method use\r\n     * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\r\n     */\r\n    Matter.use = function() {\r\n        Plugin.use(Matter, Array.prototype.slice.call(arguments));\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute before the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method before\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain before the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Matter.before = function(path, func) {\r\n        path = path.replace(/^Matter./, '');\r\n        return Common.chainPathBefore(Matter, path, func);\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute after the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method after\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain after the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Matter.after = function(path, func) {\r\n        path = path.replace(/^Matter./, '');\r\n        return Common.chainPathAfter(Matter, path, func);\r\n    };\r\n\r\n})();\r\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Composites` module contains factory methods for creating composite bodies\n* with commonly used configurations (such as stacks and chains).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composites\n*/\n\nvar Composites = {};\n\nmodule.exports = Composites;\n\nvar Composite = __webpack_require__(6);\nvar Constraint = __webpack_require__(10);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(4);\nvar Bodies = __webpack_require__(12);\nvar deprecated = Common.deprecated;\n\n(function() {\n\n    /**\n     * Create a new composite containing bodies created in the callback in a grid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method stack\n     * @param {number} x Starting position in X.\n     * @param {number} y Starting position in Y.\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.stack = function(x, y, columns, rows, columnGap, rowGap, callback) {\n        var stack = Composite.create({ label: 'Stack' }),\n            currentX = x,\n            currentY = y,\n            lastBody,\n            i = 0;\n\n        for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n            \n            for (var column = 0; column < columns; column++) {\n                var body = callback(currentX, currentY, column, row, lastBody, i);\n                    \n                if (body) {\n                    var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                        bodyWidth = body.bounds.max.x - body.bounds.min.x; \n\n                    if (bodyHeight > maxHeight)\n                        maxHeight = bodyHeight;\n                    \n                    Body.translate(body, { x: bodyWidth * 0.5, y: bodyHeight * 0.5 });\n\n                    currentX = body.bounds.max.x + columnGap;\n\n                    Composite.addBody(stack, body);\n                    \n                    lastBody = body;\n                    i += 1;\n                } else {\n                    currentX += columnGap;\n                }\n            }\n            \n            currentY += maxHeight + rowGap;\n            currentX = x;\n        }\n\n        return stack;\n    };\n    \n    /**\n     * Chains all bodies in the given composite together using constraints.\n     * @method chain\n     * @param {composite} composite\n     * @param {number} xOffsetA\n     * @param {number} yOffsetA\n     * @param {number} xOffsetB\n     * @param {number} yOffsetB\n     * @param {object} options\n     * @return {composite} A new composite containing objects chained together with constraints\n     */\n    Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n        var bodies = composite.bodies;\n        \n        for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n                bodyB = bodies[i],\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x, \n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n        \n            var defaults = {\n                bodyA: bodyA,\n                pointA: { x: bodyAWidth * xOffsetA, y: bodyAHeight * yOffsetA },\n                bodyB: bodyB,\n                pointB: { x: bodyBWidth * xOffsetB, y: bodyBHeight * yOffsetB }\n            };\n            \n            var constraint = Common.extend(defaults, options);\n        \n            Composite.addConstraint(composite, Constraint.create(constraint));\n        }\n\n        composite.label += ' Chain';\n        \n        return composite;\n    };\n\n    /**\n     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n     * @method mesh\n     * @param {composite} composite\n     * @param {number} columns\n     * @param {number} rows\n     * @param {boolean} crossBrace\n     * @param {object} options\n     * @return {composite} The composite containing objects meshed together with constraints\n     */\n    Composites.mesh = function(composite, columns, rows, crossBrace, options) {\n        var bodies = composite.bodies,\n            row,\n            col,\n            bodyA,\n            bodyB,\n            bodyC;\n        \n        for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n                bodyA = bodies[(col - 1) + (row * columns)];\n                bodyB = bodies[col + (row * columns)];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n            }\n\n            if (row > 0) {\n                for (col = 0; col < columns; col++) {\n                    bodyA = bodies[col + ((row - 1) * columns)];\n                    bodyB = bodies[col + (row * columns)];\n                    Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n\n                    if (crossBrace && col > 0) {\n                        bodyC = bodies[(col - 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n\n                    if (crossBrace && col < columns - 1) {\n                        bodyC = bodies[(col + 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n                }\n            }\n        }\n\n        composite.label += ' Mesh';\n        \n        return composite;\n    };\n    \n    /**\n     * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method pyramid\n     * @param {number} x Starting position in X.\n     * @param {number} y Starting position in Y.\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.pyramid = function(x, y, columns, rows, columnGap, rowGap, callback) {\n        return Composites.stack(x, y, columns, rows, columnGap, rowGap, function(stackX, stackY, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n            \n            if (row > actualRows)\n                return;\n            \n            // reverse row order\n            row = actualRows - row;\n            \n            var start = row,\n                end = columns - 1 - row;\n\n            if (column < start || column > end)\n                return;\n            \n            // retroactively fix the first body's position, since width was unknown\n            if (i === 1) {\n                Body.translate(lastBody, { x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth, y: 0 });\n            }\n\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n            \n            return callback(x + xOffset + column * columnGap, stackY, column, row, lastBody, i);\n        });\n    };\n\n    /**\n     * This has now moved to the [newtonsCradle example](https://github.com/liabru/matter-js/blob/master/examples/newtonsCradle.js), follow that instead as this function is deprecated here.\n     * @deprecated moved to newtonsCradle example\n     * @method newtonsCradle\n     * @param {number} x Starting position in X.\n     * @param {number} y Starting position in Y.\n     * @param {number} number\n     * @param {number} size\n     * @param {number} length\n     * @return {composite} A new composite newtonsCradle body\n     */\n    Composites.newtonsCradle = function(x, y, number, size, length) {\n        var newtonsCradle = Composite.create({ label: 'Newtons Cradle' });\n\n        for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n                circle = Bodies.circle(x + i * (size * separation), y + length, size, \n                    { inertia: Infinity, restitution: 1, friction: 0, frictionAir: 0.0001, slop: 1 }),\n                constraint = Constraint.create({ pointA: { x: x + i * (size * separation), y: y }, bodyB: circle });\n\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n        }\n\n        return newtonsCradle;\n    };\n\n    deprecated(Composites, 'newtonsCradle', 'Composites.newtonsCradle ➤ moved to newtonsCradle example');\n    \n    /**\n     * This has now moved to the [car example](https://github.com/liabru/matter-js/blob/master/examples/car.js), follow that instead as this function is deprecated here.\n     * @deprecated moved to car example\n     * @method car\n     * @param {number} x Starting position in X.\n     * @param {number} y Starting position in Y.\n     * @param {number} width\n     * @param {number} height\n     * @param {number} wheelSize\n     * @return {composite} A new composite car body\n     */\n    Composites.car = function(x, y, width, height, wheelSize) {\n        var group = Body.nextGroup(true),\n            wheelBase = 20,\n            wheelAOffset = -width * 0.5 + wheelBase,\n            wheelBOffset = width * 0.5 - wheelBase,\n            wheelYOffset = 0;\n    \n        var car = Composite.create({ label: 'Car' }),\n            body = Bodies.rectangle(x, y, width, height, { \n                collisionFilter: {\n                    group: group\n                },\n                chamfer: {\n                    radius: height * 0.5\n                },\n                density: 0.0002\n            });\n    \n        var wheelA = Bodies.circle(x + wheelAOffset, y + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var wheelB = Bodies.circle(x + wheelBOffset, y + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var axelA = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelAOffset, y: wheelYOffset },\n            bodyA: wheelA,\n            stiffness: 1,\n            length: 0\n        });\n                        \n        var axelB = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelBOffset, y: wheelYOffset },\n            bodyA: wheelB,\n            stiffness: 1,\n            length: 0\n        });\n        \n        Composite.addBody(car, body);\n        Composite.addBody(car, wheelA);\n        Composite.addBody(car, wheelB);\n        Composite.addConstraint(car, axelA);\n        Composite.addConstraint(car, axelB);\n\n        return car;\n    };\n\n    deprecated(Composites, 'car', 'Composites.car ➤ moved to car example');\n\n    /**\n     * This has now moved to the [softBody example](https://github.com/liabru/matter-js/blob/master/examples/softBody.js)\n     * and the [cloth example](https://github.com/liabru/matter-js/blob/master/examples/cloth.js), follow those instead as this function is deprecated here.\n     * @deprecated moved to softBody and cloth examples\n     * @method softBody\n     * @param {number} x Starting position in X.\n     * @param {number} y Starting position in Y.\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {boolean} crossBrace\n     * @param {number} particleRadius\n     * @param {} particleOptions\n     * @param {} constraintOptions\n     * @return {composite} A new composite softBody\n     */\n    Composites.softBody = function(x, y, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n        particleOptions = Common.extend({ inertia: Infinity }, particleOptions);\n        constraintOptions = Common.extend({ stiffness: 0.2, render: { type: 'line', anchors: false } }, constraintOptions);\n\n        var softBody = Composites.stack(x, y, columns, rows, columnGap, rowGap, function(stackX, stackY) {\n            return Bodies.circle(stackX, stackY, particleRadius, particleOptions);\n        });\n\n        Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n\n        softBody.label = 'Soft Body';\n\n        return softBody;\n    };\n\n    deprecated(Composites, 'softBody', 'Composites.softBody ➤ moved to softBody and cloth examples');\n})();\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* This module has now been replaced by `Matter.Detector`.\n*\n* All usage should be migrated to `Matter.Detector` or another alternative.\n* For back-compatibility purposes this module will remain for a short term and then later removed in a future release.\n*\n* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n*\n* @class Grid\n* @deprecated\n*/\n\nvar Grid = {};\n\nmodule.exports = Grid;\n\nvar Pair = __webpack_require__(9);\nvar Common = __webpack_require__(0);\nvar deprecated = Common.deprecated;\n\n(function() {\n\n    /**\n     * Creates a new grid.\n     * @deprecated replaced by Matter.Detector\n     * @method create\n     * @param {} options\n     * @return {grid} A new grid\n     */\n    Grid.create = function(options) {\n        var defaults = {\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * The width of a single grid bucket.\n     *\n     * @property bucketWidth\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * The height of a single grid bucket.\n     *\n     * @property bucketHeight\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * Updates the grid.\n     * @deprecated replaced by Matter.Detector\n     * @method update\n     * @param {grid} grid\n     * @param {body[]} bodies\n     * @param {engine} engine\n     * @param {boolean} forceUpdate\n     */\n    Grid.update = function(grid, bodies, engine, forceUpdate) {\n        var i, col, row,\n            world = engine.world,\n            buckets = grid.buckets,\n            bucket,\n            bucketId,\n            gridChanged = false;\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isSleeping && !forceUpdate)\n                continue;\n\n            // temporary back compatibility bounds check\n            if (world.bounds && (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x\n                || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y))\n                continue;\n\n            var newRegion = Grid._getRegion(grid, body);\n\n            // if the body has changed grid region\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n\n                if (!body.region || forceUpdate)\n                    body.region = newRegion;\n\n                var union = Grid._regionUnion(newRegion, body.region);\n\n                // update grid buckets affected by region change\n                // iterate over the union of both regions\n                for (col = union.startCol; col <= union.endCol; col++) {\n                    for (row = union.startRow; row <= union.endRow; row++) {\n                        bucketId = Grid._getBucketId(col, row);\n                        bucket = buckets[bucketId];\n\n                        var isInsideNewRegion = (col >= newRegion.startCol && col <= newRegion.endCol\n                                                && row >= newRegion.startRow && row <= newRegion.endRow);\n\n                        var isInsideOldRegion = (col >= body.region.startCol && col <= body.region.endCol\n                                                && row >= body.region.startRow && row <= body.region.endRow);\n\n                        // remove from old region buckets\n                        if (!isInsideNewRegion && isInsideOldRegion) {\n                            if (isInsideOldRegion) {\n                                if (bucket)\n                                    Grid._bucketRemoveBody(grid, bucket, body);\n                            }\n                        }\n\n                        // add to new region buckets\n                        if (body.region === newRegion || (isInsideNewRegion && !isInsideOldRegion) || forceUpdate) {\n                            if (!bucket)\n                                bucket = Grid._createBucket(buckets, bucketId);\n                            Grid._bucketAddBody(grid, bucket, body);\n                        }\n                    }\n                }\n\n                // set the new region\n                body.region = newRegion;\n\n                // flag changes so we can update pairs\n                gridChanged = true;\n            }\n        }\n\n        // update pairs list only if pairs changed (i.e. a body changed region)\n        if (gridChanged)\n            grid.pairsList = Grid._createActivePairsList(grid);\n    };\n\n    deprecated(Grid, 'update', 'Grid.update ➤ replaced by Matter.Detector');\n\n    /**\n     * Clears the grid.\n     * @deprecated replaced by Matter.Detector\n     * @method clear\n     * @param {grid} grid\n     */\n    Grid.clear = function(grid) {\n        grid.buckets = {};\n        grid.pairs = {};\n        grid.pairsList = [];\n    };\n\n    deprecated(Grid, 'clear', 'Grid.clear ➤ replaced by Matter.Detector');\n\n    /**\n     * Finds the union of two regions.\n     * @method _regionUnion\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} regionA\n     * @param {} regionB\n     * @return {} region\n     */\n    Grid._regionUnion = function(regionA, regionB) {\n        var startCol = Math.min(regionA.startCol, regionB.startCol),\n            endCol = Math.max(regionA.endCol, regionB.endCol),\n            startRow = Math.min(regionA.startRow, regionB.startRow),\n            endRow = Math.max(regionA.endRow, regionB.endRow);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Gets the region a given body falls in for a given grid.\n     * @method _getRegion\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @param {} body\n     * @return {} region\n     */\n    Grid._getRegion = function(grid, body) {\n        var bounds = body.bounds,\n            startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n            endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n            startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n            endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Creates a region.\n     * @method _createRegion\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} startCol\n     * @param {} endCol\n     * @param {} startRow\n     * @param {} endRow\n     * @return {} region\n     */\n    Grid._createRegion = function(startCol, endCol, startRow, endRow) {\n        return { \n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol, \n            endCol: endCol, \n            startRow: startRow, \n            endRow: endRow \n        };\n    };\n\n    /**\n     * Gets the bucket id at the given position.\n     * @method _getBucketId\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} column\n     * @param {} row\n     * @return {string} bucket id\n     */\n    Grid._getBucketId = function(column, row) {\n        return 'C' + column + 'R' + row;\n    };\n\n    /**\n     * Creates a bucket.\n     * @method _createBucket\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} buckets\n     * @param {} bucketId\n     * @return {} bucket\n     */\n    Grid._createBucket = function(buckets, bucketId) {\n        var bucket = buckets[bucketId] = [];\n        return bucket;\n    };\n\n    /**\n     * Adds a body to a bucket.\n     * @method _bucketAddBody\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketAddBody = function(grid, bucket, body) {\n        var gridPairs = grid.pairs,\n            pairId = Pair.id,\n            bucketLength = bucket.length,\n            i;\n\n        // add new pairs\n        for (i = 0; i < bucketLength; i++) {\n            var bodyB = bucket[i];\n\n            if (body.id === bodyB.id || (body.isStatic && bodyB.isStatic))\n                continue;\n\n            // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n            var id = pairId(body, bodyB),\n                pair = gridPairs[id];\n\n            if (pair) {\n                pair[2] += 1;\n            } else {\n                gridPairs[id] = [body, bodyB, 1];\n            }\n        }\n\n        // add to bodies (after pairs, otherwise pairs with self)\n        bucket.push(body);\n    };\n\n    /**\n     * Removes a body from a bucket.\n     * @method _bucketRemoveBody\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketRemoveBody = function(grid, bucket, body) {\n        var gridPairs = grid.pairs,\n            pairId = Pair.id,\n            i;\n\n        // remove from bucket\n        bucket.splice(Common.indexOf(bucket, body), 1);\n\n        var bucketLength = bucket.length;\n\n        // update pair counts\n        for (i = 0; i < bucketLength; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var pair = gridPairs[pairId(body, bucket[i])];\n\n            if (pair)\n                pair[2] -= 1;\n        }\n    };\n\n    /**\n     * Generates a list of the active pairs in the grid.\n     * @method _createActivePairsList\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @return [] pairs\n     */\n    Grid._createActivePairsList = function(grid) {\n        var pair,\n            gridPairs = grid.pairs,\n            pairKeys = Common.keys(gridPairs),\n            pairKeysLength = pairKeys.length,\n            pairs = [],\n            k;\n\n        // iterate over grid.pairs\n        for (k = 0; k < pairKeysLength; k++) {\n            pair = gridPairs[pairKeys[k]];\n\n            // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n            if (pair[2] > 0) {\n                pairs.push(pair);\n            } else {\n                delete gridPairs[pairKeys[k]];\n            }\n        }\n\n        return pairs;\n    };\n    \n})();\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n* Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class MouseConstraint\n*/\n\nvar MouseConstraint = {};\n\nmodule.exports = MouseConstraint;\n\nvar Vertices = __webpack_require__(3);\nvar Sleeping = __webpack_require__(7);\nvar Mouse = __webpack_require__(14);\nvar Events = __webpack_require__(5);\nvar Detector = __webpack_require__(13);\nvar Constraint = __webpack_require__(10);\nvar Composite = __webpack_require__(6);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\n\n(function() {\n\n    /**\n     * Creates a new mouse constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {engine} engine\n     * @param {} options\n     * @return {MouseConstraint} A new MouseConstraint\n     */\n    MouseConstraint.create = function(engine, options) {\n        var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\n        if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n                mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n                mouse = Mouse.create(options.element);\n            } else {\n                mouse = Mouse.create();\n                Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n            }\n        }\n\n        var constraint = Constraint.create({ \n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: { x: 0, y: 0 },\n            length: 0.01, \n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n                strokeStyle: '#90EE90',\n                lineWidth: 3\n            }\n        });\n\n        var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            }\n        };\n\n        var mouseConstraint = Common.extend(defaults, options);\n\n        Events.on(engine, 'beforeUpdate', function() {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n            MouseConstraint._triggerEvents(mouseConstraint);\n        });\n\n        return mouseConstraint;\n    };\n\n    /**\n     * Updates the given mouse constraint.\n     * @private\n     * @method update\n     * @param {MouseConstraint} mouseConstraint\n     * @param {body[]} bodies\n     */\n    MouseConstraint.update = function(mouseConstraint, bodies) {\n        var mouse = mouseConstraint.mouse,\n            constraint = mouseConstraint.constraint,\n            body = mouseConstraint.body;\n\n        if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n                for (var i = 0; i < bodies.length; i++) {\n                    body = bodies[i];\n                    if (Bounds.contains(body.bounds, mouse.position) \n                            && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                        for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                            var part = body.parts[j];\n                            if (Vertices.contains(part.vertices, mouse.position)) {\n                                constraint.pointA = mouse.position;\n                                constraint.bodyB = mouseConstraint.body = body;\n                                constraint.pointB = { x: mouse.position.x - body.position.x, y: mouse.position.y - body.position.y };\n                                constraint.angleB = body.angle;\n\n                                Sleeping.set(body, false);\n                                Events.trigger(mouseConstraint, 'startdrag', { mouse: mouse, body: body });\n\n                                break;\n                            }\n                        }\n                    }\n                }\n            } else {\n                Sleeping.set(constraint.bodyB, false);\n                constraint.pointA = mouse.position;\n            }\n        } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n\n            if (body)\n                Events.trigger(mouseConstraint, 'enddrag', { mouse: mouse, body: body });\n        }\n    };\n\n    /**\n     * Triggers mouse constraint events.\n     * @method _triggerEvents\n     * @private\n     * @param {mouse} mouseConstraint\n     */\n    MouseConstraint._triggerEvents = function(mouseConstraint) {\n        var mouse = mouseConstraint.mouse,\n            mouseEvents = mouse.sourceEvents;\n\n        if (mouseEvents.mousemove)\n            Events.trigger(mouseConstraint, 'mousemove', { mouse: mouse });\n\n        if (mouseEvents.mousedown)\n            Events.trigger(mouseConstraint, 'mousedown', { mouse: mouse });\n\n        if (mouseEvents.mouseup)\n            Events.trigger(mouseConstraint, 'mouseup', { mouse: mouse });\n\n        // reset the mouse state ready for the next step\n        Mouse.clearSourceEvents(mouse);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when the mouse has moved (or a touch moves) during the last step\n    *\n    * @event mousemove\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is down (or a touch has started) during the last step\n    *\n    * @event mousedown\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is up (or a touch has ended) during the last step\n    *\n    * @event mouseup\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user starts dragging a body\n    *\n    * @event startdrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user ends dragging a body\n    *\n    * @event enddrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body that has stopped being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n     *\n     * @property mouse\n     * @type mouse\n     * @default mouse\n     */\n\n    /**\n     * The `Body` that is currently being moved by the user, or `null` if no body.\n     *\n     * @property body\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The `Constraint` object that is used to move the body during interaction.\n     *\n     * @property constraint\n     * @type constraint\n     */\n\n    /**\n     * An `Object` that specifies the collision filter properties.\n     * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n})();\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Query` module contains methods for performing collision queries.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Query\n*/\n\nvar Query = {};\n\nmodule.exports = Query;\n\nvar Vector = __webpack_require__(2);\nvar Collision = __webpack_require__(8);\nvar Bounds = __webpack_require__(1);\nvar Bodies = __webpack_require__(12);\nvar Vertices = __webpack_require__(3);\n\n(function() {\n\n    /**\n     * Returns a list of collisions between `body` and `bodies`.\n     * @method collides\n     * @param {body} body\n     * @param {body[]} bodies\n     * @return {collision[]} Collisions\n     */\n    Query.collides = function(body, bodies) {\n        var collisions = [],\n            bodiesLength = bodies.length,\n            bounds = body.bounds,\n            collides = Collision.collides,\n            overlaps = Bounds.overlaps;\n\n        for (var i = 0; i < bodiesLength; i++) {\n            var bodyA = bodies[i],\n                partsALength = bodyA.parts.length,\n                partsAStart = partsALength === 1 ? 0 : 1;\n            \n            if (overlaps(bodyA.bounds, bounds)) {\n                for (var j = partsAStart; j < partsALength; j++) {\n                    var part = bodyA.parts[j];\n\n                    if (overlaps(part.bounds, bounds)) {\n                        var collision = collides(part, body);\n\n                        if (collision) {\n                            collisions.push(collision);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n     * @method ray\n     * @param {body[]} bodies\n     * @param {vector} startPoint\n     * @param {vector} endPoint\n     * @param {number} [rayWidth]\n     * @return {collision[]} Collisions\n     */\n    Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\n        rayWidth = rayWidth || 1e-100;\n\n        var rayAngle = Vector.angle(startPoint, endPoint),\n            rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n            rayX = (endPoint.x + startPoint.x) * 0.5,\n            rayY = (endPoint.y + startPoint.y) * 0.5,\n            ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, { angle: rayAngle }),\n            collisions = Query.collides(ray, bodies);\n\n        for (var i = 0; i < collisions.length; i += 1) {\n            var collision = collisions[i];\n            collision.body = collision.bodyB = collision.bodyA;            \n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n     * @method region\n     * @param {body[]} bodies\n     * @param {bounds} bounds\n     * @param {bool} [outside=false]\n     * @return {body[]} The bodies matching the query\n     */\n    Query.region = function(bodies, bounds, outside) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                overlaps = Bounds.overlaps(body.bounds, bounds);\n            if ((overlaps && !outside) || (!overlaps && outside))\n                result.push(body);\n        }\n\n        return result;\n    };\n\n    /**\n     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n     * @method point\n     * @param {body[]} bodies\n     * @param {vector} point\n     * @return {body[]} The bodies matching the query\n     */\n    Query.point = function(bodies, point) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            \n            if (Bounds.contains(body.bounds, point)) {\n                for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n\n                    if (Bounds.contains(part.bounds, point)\n                        && Vertices.contains(part.vertices, point)) {\n                        result.push(body);\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n})();\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Render` module is a lightweight, optional utility which provides a simple canvas based renderer for visualising instances of `Matter.Engine`.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n*\n* @class Render\n*/\n\nvar Render = {};\n\nmodule.exports = Render;\n\nvar Body = __webpack_require__(4);\nvar Common = __webpack_require__(0);\nvar Composite = __webpack_require__(6);\nvar Bounds = __webpack_require__(1);\nvar Events = __webpack_require__(5);\nvar Vector = __webpack_require__(2);\nvar Mouse = __webpack_require__(14);\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame\n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n\n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame\n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    Render._goodFps = 30;\n    Render._goodDelta = 1000 / 60;\n\n    /**\n     * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {render} A new renderer\n     */\n    Render.create = function(options) {\n        var defaults = {\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            timing: {\n                historySize: 60,\n                delta: 0,\n                deltaHistory: [],\n                lastTime: 0,\n                lastTimestamp: 0,\n                lastElapsed: 0,\n                timestampElapsed: 0,\n                timestampElapsedHistory: [],\n                engineDeltaHistory: [],\n                engineElapsedHistory: [],\n                engineUpdatesHistory: [],\n                elapsedHistory: []\n            },\n            options: {\n                width: 800,\n                height: 600,\n                pixelRatio: 1,\n                background: '#14151f',\n                wireframeBackground: '#14151f',\n                wireframeStrokeStyle: '#bbb',\n                hasBounds: !!options.bounds,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showStats: false,\n                showPerformance: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showSeparations: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showVertexNumbers: false,\n                showConvexHulls: false,\n                showInternalEdges: false,\n                showMousePosition: false\n            }\n        };\n\n        var render = Common.extend(defaults, options);\n\n        if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n        }\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n        render.context = render.canvas.getContext('2d');\n        render.textures = {};\n\n        render.bounds = render.bounds || {\n            min: {\n                x: 0,\n                y: 0\n            },\n            max: {\n                x: render.canvas.width,\n                y: render.canvas.height\n            }\n        };\n\n        // for temporary back compatibility only\n        render.controller = Render;\n        render.options.showBroadphase = false;\n\n        if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n        }\n\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        }\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     */\n    Render.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            \n            _updateTiming(render, time);\n\n            Render.world(render, time);\n\n            render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n\n            if (render.options.showStats || render.options.showDebug) {\n                Render.stats(render, render.context, time);\n            }\n\n            if (render.options.showPerformance || render.options.showDebug) {\n                Render.performance(render, render.context, time);\n            }\n\n            render.context.setTransform(1, 0, 0, 1, 0, 0);\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     */\n    Render.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Sets the pixel ratio of the renderer and updates the canvas.\n     * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n     * @method setPixelRatio\n     * @param {render} render\n     * @param {number} pixelRatio\n     */\n    Render.setPixelRatio = function(render, pixelRatio) {\n        var options = render.options,\n            canvas = render.canvas;\n\n        if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n        }\n\n        options.pixelRatio = pixelRatio;\n        canvas.setAttribute('data-pixel-ratio', pixelRatio);\n        canvas.width = options.width * pixelRatio;\n        canvas.height = options.height * pixelRatio;\n        canvas.style.width = options.width + 'px';\n        canvas.style.height = options.height + 'px';\n    };\n\n    /**\n     * Sets the render `width` and `height`.\n     * \n     * Updates the canvas accounting for `render.options.pixelRatio`.  \n     * \n     * Updates the bottom right render bound `render.bounds.max` relative to the provided `width` and `height`.\n     * The top left render bound `render.bounds.min` isn't changed.\n     * \n     * Follow this call with `Render.lookAt` if you need to change the render bounds.\n     * \n     * See also `Render.setPixelRatio`.\n     * @method setSize\n     * @param {render} render\n     * @param {number} width The width (in CSS pixels)\n     * @param {number} height The height (in CSS pixels)\n     */\n    Render.setSize = function(render, width, height) {\n        render.options.width = width;\n        render.options.height = height;\n        render.bounds.max.x = render.bounds.min.x + width;\n        render.bounds.max.y = render.bounds.min.y + height;\n\n        if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n        } else {\n            render.canvas.width = width;\n            render.canvas.height = height;\n        }\n    };\n\n    /**\n     * Positions and sizes the viewport around the given object bounds.\n     * Objects must have at least one of the following properties:\n     * - `object.bounds`\n     * - `object.position`\n     * - `object.min` and `object.max`\n     * - `object.x` and `object.y`\n     * @method lookAt\n     * @param {render} render\n     * @param {object[]} objects\n     * @param {vector} [padding]\n     * @param {bool} [center=true]\n     */\n    Render.lookAt = function(render, objects, padding, center) {\n        center = typeof center !== 'undefined' ? center : true;\n        objects = Common.isArray(objects) ? objects : [objects];\n        padding = padding || {\n            x: 0,\n            y: 0\n        };\n\n        // find bounds of all objects\n        var bounds = {\n            min: { x: Infinity, y: Infinity },\n            max: { x: -Infinity, y: -Infinity }\n        };\n\n        for (var i = 0; i < objects.length; i += 1) {\n            var object = objects[i],\n                min = object.bounds ? object.bounds.min : (object.min || object.position || object),\n                max = object.bounds ? object.bounds.max : (object.max || object.position || object);\n\n            if (min && max) {\n                if (min.x < bounds.min.x)\n                    bounds.min.x = min.x;\n\n                if (max.x > bounds.max.x)\n                    bounds.max.x = max.x;\n\n                if (min.y < bounds.min.y)\n                    bounds.min.y = min.y;\n\n                if (max.y > bounds.max.y)\n                    bounds.max.y = max.y;\n            }\n        }\n\n        // find ratios\n        var width = (bounds.max.x - bounds.min.x) + 2 * padding.x,\n            height = (bounds.max.y - bounds.min.y) + 2 * padding.y,\n            viewHeight = render.canvas.height,\n            viewWidth = render.canvas.width,\n            outerRatio = viewWidth / viewHeight,\n            innerRatio = width / height,\n            scaleX = 1,\n            scaleY = 1;\n\n        // find scale factor\n        if (innerRatio > outerRatio) {\n            scaleY = innerRatio / outerRatio;\n        } else {\n            scaleX = outerRatio / innerRatio;\n        }\n\n        // enable bounds\n        render.options.hasBounds = true;\n\n        // position and size\n        render.bounds.min.x = bounds.min.x;\n        render.bounds.max.x = bounds.min.x + width * scaleX;\n        render.bounds.min.y = bounds.min.y;\n        render.bounds.max.y = bounds.min.y + height * scaleY;\n\n        // center\n        if (center) {\n            render.bounds.min.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.max.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.min.y += height * 0.5 - (height * scaleY) * 0.5;\n            render.bounds.max.y += height * 0.5 - (height * scaleY) * 0.5;\n        }\n\n        // padding\n        render.bounds.min.x -= padding.x;\n        render.bounds.max.x -= padding.x;\n        render.bounds.min.y -= padding.y;\n        render.bounds.max.y -= padding.y;\n\n        // update mouse\n        if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n                x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n            });\n\n            Mouse.setOffset(render.mouse, render.bounds.min);\n        }\n    };\n\n    /**\n     * Applies viewport transforms based on `render.bounds` to a render context.\n     * @method startViewTransform\n     * @param {render} render\n     */\n    Render.startViewTransform = function(render) {\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        render.context.setTransform(\n            render.options.pixelRatio / boundsScaleX, 0, 0, \n            render.options.pixelRatio / boundsScaleY, 0, 0\n        );\n        \n        render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n    };\n\n    /**\n     * Resets all transforms on the render context.\n     * @method endViewTransform\n     * @param {render} render\n     */\n    Render.endViewTransform = function(render) {\n        render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n    };\n\n    /**\n     * Renders the given `engine`'s `Matter.World` object.\n     * This is the entry point for all rendering and should be called every time the scene changes.\n     * @method world\n     * @param {render} render\n     */\n    Render.world = function(render, time) {\n        var startTime = Common.now(),\n            engine = render.engine,\n            world = engine.world,\n            canvas = render.canvas,\n            context = render.context,\n            options = render.options,\n            timing = render.timing;\n\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            background = options.wireframes ? options.wireframeBackground : options.background,\n            bodies = [],\n            constraints = [],\n            i;\n\n        var event = {\n            timestamp: engine.timing.timestamp\n        };\n\n        Events.trigger(render, 'beforeRender', event);\n\n        // apply background if it has changed\n        if (render.currentBackground !== background)\n            _applyBackground(render, background);\n\n        // clear the canvas with a transparent fill, to allow the canvas background to show\n        context.globalCompositeOperation = 'source-in';\n        context.fillStyle = \"transparent\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        context.globalCompositeOperation = 'source-over';\n\n        // handle bounds\n        if (options.hasBounds) {\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n                var body = allBodies[i];\n                if (Bounds.overlaps(body.bounds, render.bounds))\n                    bodies.push(body);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            Render.startViewTransform(render);\n\n            // update mouse\n            if (render.mouse) {\n                Mouse.setScale(render.mouse, {\n                    x: (render.bounds.max.x - render.bounds.min.x) / render.options.width,\n                    y: (render.bounds.max.y - render.bounds.min.y) / render.options.height\n                });\n\n                Mouse.setOffset(render.mouse, render.bounds.min);\n            }\n        } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n\n            if (render.options.pixelRatio !== 1) {\n                render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n            }\n        }\n\n        if (!options.wireframes || (engine.enableSleeping && options.showSleeping)) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n        } else {\n            if (options.showConvexHulls)\n                Render.bodyConvexHulls(render, bodies, context);\n\n            // optimised method for wireframes only\n            Render.bodyWireframes(render, bodies, context);\n        }\n\n        if (options.showBounds)\n            Render.bodyBounds(render, bodies, context);\n\n        if (options.showAxes || options.showAngleIndicator)\n            Render.bodyAxes(render, bodies, context);\n\n        if (options.showPositions)\n            Render.bodyPositions(render, bodies, context);\n\n        if (options.showVelocity)\n            Render.bodyVelocity(render, bodies, context);\n\n        if (options.showIds)\n            Render.bodyIds(render, bodies, context);\n\n        if (options.showSeparations)\n            Render.separations(render, engine.pairs.list, context);\n\n        if (options.showCollisions)\n            Render.collisions(render, engine.pairs.list, context);\n\n        if (options.showVertexNumbers)\n            Render.vertexNumbers(render, bodies, context);\n\n        if (options.showMousePosition)\n            Render.mousePosition(render, render.mouse, context);\n\n        Render.constraints(constraints, context);\n\n        if (options.hasBounds) {\n            // revert view transforms\n            Render.endViewTransform(render);\n        }\n\n        Events.trigger(render, 'afterRender', event);\n\n        // log the time elapsed computing this update\n        timing.lastElapsed = Common.now() - startTime;\n    };\n\n    /**\n     * Renders statistics about the engine and world useful for debugging.\n     * @private\n     * @method stats\n     * @param {render} render\n     * @param {RenderingContext} context\n     * @param {Number} time\n     */\n    Render.stats = function(render, context, time) {\n        var engine = render.engine,\n            world = engine.world,\n            bodies = Composite.allBodies(world),\n            parts = 0,\n            width = 55,\n            height = 44,\n            x = 0,\n            y = 0;\n        \n        // count parts\n        for (var i = 0; i < bodies.length; i += 1) {\n            parts += bodies[i].parts.length;\n        }\n\n        // sections\n        var sections = {\n            'Part': parts,\n            'Body': bodies.length,\n            'Cons': Composite.allConstraints(world).length,\n            'Comp': Composite.allComposites(world).length,\n            'Pair': engine.pairs.list.length\n        };\n\n        // background\n        context.fillStyle = '#0e0f19';\n        context.fillRect(x, y, width * 5.5, height);\n\n        context.font = '12px Arial';\n        context.textBaseline = 'top';\n        context.textAlign = 'right';\n\n        // sections\n        for (var key in sections) {\n            var section = sections[key];\n            // label\n            context.fillStyle = '#aaa';\n            context.fillText(key, x + width, y + 8);\n\n            // value\n            context.fillStyle = '#eee';\n            context.fillText(section, x + width, y + 26);\n\n            x += width;\n        }\n    };\n\n    /**\n     * Renders engine and render performance information.\n     * @private\n     * @method performance\n     * @param {render} render\n     * @param {RenderingContext} context\n     */\n    Render.performance = function(render, context) {\n        var engine = render.engine,\n            timing = render.timing,\n            deltaHistory = timing.deltaHistory,\n            elapsedHistory = timing.elapsedHistory,\n            timestampElapsedHistory = timing.timestampElapsedHistory,\n            engineDeltaHistory = timing.engineDeltaHistory,\n            engineUpdatesHistory = timing.engineUpdatesHistory,\n            engineElapsedHistory = timing.engineElapsedHistory,\n            lastEngineUpdatesPerFrame = engine.timing.lastUpdatesPerFrame,\n            lastEngineDelta = engine.timing.lastDelta;\n        \n        var deltaMean = _mean(deltaHistory),\n            elapsedMean = _mean(elapsedHistory),\n            engineDeltaMean = _mean(engineDeltaHistory),\n            engineUpdatesMean = _mean(engineUpdatesHistory),\n            engineElapsedMean = _mean(engineElapsedHistory),\n            timestampElapsedMean = _mean(timestampElapsedHistory),\n            rateMean = (timestampElapsedMean / deltaMean) || 0,\n            neededUpdatesPerFrame = Math.round(deltaMean / lastEngineDelta),\n            fps = (1000 / deltaMean) || 0;\n\n        var graphHeight = 4,\n            gap = 12,\n            width = 60,\n            height = 34,\n            x = 10,\n            y = 69;\n\n        // background\n        context.fillStyle = '#0e0f19';\n        context.fillRect(0, 50, gap * 5 + width * 6 + 22, height);\n\n        // show FPS\n        Render.status(\n            context, x, y, width, graphHeight, deltaHistory.length, \n            Math.round(fps) + ' fps', \n            fps / Render._goodFps,\n            function(i) { return (deltaHistory[i] / deltaMean) - 1; }\n        );\n\n        // show engine delta\n        Render.status(\n            context, x + gap + width, y, width, graphHeight, engineDeltaHistory.length,\n            lastEngineDelta.toFixed(2) + ' dt', \n            Render._goodDelta / lastEngineDelta,\n            function(i) { return (engineDeltaHistory[i] / engineDeltaMean) - 1; }\n        );\n\n        // show engine updates per frame\n        Render.status(\n            context, x + (gap + width) * 2, y, width, graphHeight, engineUpdatesHistory.length,\n            lastEngineUpdatesPerFrame + ' upf', \n            Math.pow(Common.clamp((engineUpdatesMean / neededUpdatesPerFrame) || 1, 0, 1), 4),\n            function(i) { return (engineUpdatesHistory[i] / engineUpdatesMean) - 1; }\n        );\n\n        // show engine update time\n        Render.status(\n            context, x + (gap + width) * 3, y, width, graphHeight, engineElapsedHistory.length,\n            engineElapsedMean.toFixed(2) + ' ut', \n            1 - (lastEngineUpdatesPerFrame * engineElapsedMean / Render._goodFps),\n            function(i) { return (engineElapsedHistory[i] / engineElapsedMean) - 1; }\n        );\n\n        // show render time\n        Render.status(\n            context, x + (gap + width) * 4, y, width, graphHeight, elapsedHistory.length,\n            elapsedMean.toFixed(2) + ' rt', \n            1 - (elapsedMean / Render._goodFps),\n            function(i) { return (elapsedHistory[i] / elapsedMean) - 1; }\n        );\n\n        // show effective speed\n        Render.status(\n            context, x + (gap + width) * 5, y, width, graphHeight, timestampElapsedHistory.length, \n            rateMean.toFixed(2) + ' x', \n            rateMean * rateMean * rateMean,\n            function(i) { return (((timestampElapsedHistory[i] / deltaHistory[i]) / rateMean) || 0) - 1; }\n        );\n    };\n\n    /**\n     * Renders a label, indicator and a chart.\n     * @private\n     * @method status\n     * @param {RenderingContext} context\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} count\n     * @param {string} label\n     * @param {string} indicator\n     * @param {function} plotY\n     */\n    Render.status = function(context, x, y, width, height, count, label, indicator, plotY) {\n        // background\n        context.strokeStyle = '#888';\n        context.fillStyle = '#444';\n        context.lineWidth = 1;\n        context.fillRect(x, y + 7, width, 1);\n\n        // chart\n        context.beginPath();\n        context.moveTo(x, y + 7 - height * Common.clamp(0.4 * plotY(0), -2, 2));\n        for (var i = 0; i < width; i += 1) {\n            context.lineTo(x + i, y + 7 - (i < count ? height * Common.clamp(0.4 * plotY(i), -2, 2) : 0));\n        }\n        context.stroke();\n\n        // indicator\n        context.fillStyle = 'hsl(' + Common.clamp(25 + 95 * indicator, 0, 120) + ',100%,60%)';\n        context.fillRect(x, y - 7, 4, 4);\n\n        // label\n        context.font = '12px Arial';\n        context.textBaseline = 'middle';\n        context.textAlign = 'right';\n        context.fillStyle = '#eee';\n        context.fillText(label, x + width, y - 5);\n    };\n\n    /**\n     * Description\n     * @private\n     * @method constraints\n     * @param {constraint[]} constraints\n     * @param {RenderingContext} context\n     */\n    Render.constraints = function(constraints, context) {\n        var c = context;\n\n        for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB)\n                continue;\n\n            var bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB,\n                start,\n                end;\n\n            if (bodyA) {\n                start = Vector.add(bodyA.position, constraint.pointA);\n            } else {\n                start = constraint.pointA;\n            }\n\n            if (constraint.render.type === 'pin') {\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                if (bodyB) {\n                    end = Vector.add(bodyB.position, constraint.pointB);\n                } else {\n                    end = constraint.pointB;\n                }\n\n                c.beginPath();\n                c.moveTo(start.x, start.y);\n\n                if (constraint.render.type === 'spring') {\n                    var delta = Vector.sub(end, start),\n                        normal = Vector.perp(Vector.normalise(delta)),\n                        coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\n                        offset;\n\n                    for (var j = 1; j < coils; j += 1) {\n                        offset = j % 2 === 0 ? 1 : -1;\n\n                        c.lineTo(\n                            start.x + delta.x * (j / coils) + normal.x * offset * 4,\n                            start.y + delta.y * (j / coils) + normal.y * offset * 4\n                        );\n                    }\n                }\n\n                c.lineTo(end.x, end.y);\n            }\n\n            if (constraint.render.lineWidth) {\n                c.lineWidth = constraint.render.lineWidth;\n                c.strokeStyle = constraint.render.strokeStyle;\n                c.stroke();\n            }\n\n            if (constraint.render.anchors) {\n                c.fillStyle = constraint.render.strokeStyle;\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n                c.fill();\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodies\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodies = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            showInternalEdges = options.showInternalEdges || !options.wireframes,\n            body,\n            part,\n            i,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                if (!part.render.visible)\n                    continue;\n\n                if (options.showSleeping && body.isSleeping) {\n                    c.globalAlpha = 0.5 * part.render.opacity;\n                } else if (part.render.opacity !== 1) {\n                    c.globalAlpha = part.render.opacity;\n                }\n\n                if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                    // part sprite\n                    var sprite = part.render.sprite,\n                        texture = _getTexture(render, sprite.texture);\n\n                    c.translate(part.position.x, part.position.y);\n                    c.rotate(part.angle);\n\n                    c.drawImage(\n                        texture,\n                        texture.width * -sprite.xOffset * sprite.xScale,\n                        texture.height * -sprite.yOffset * sprite.yScale,\n                        texture.width * sprite.xScale,\n                        texture.height * sprite.yScale\n                    );\n\n                    // revert translation, hopefully faster than save / restore\n                    c.rotate(-part.angle);\n                    c.translate(-part.position.x, -part.position.y);\n                } else {\n                    // part polygon\n                    if (part.circleRadius) {\n                        c.beginPath();\n                        c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                    } else {\n                        c.beginPath();\n                        c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                        for (var j = 1; j < part.vertices.length; j++) {\n                            if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                                c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                            } else {\n                                c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                            }\n\n                            if (part.vertices[j].isInternal && !showInternalEdges) {\n                                c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                            }\n                        }\n\n                        c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                        c.closePath();\n                    }\n\n                    if (!options.wireframes) {\n                        c.fillStyle = part.render.fillStyle;\n\n                        if (part.render.lineWidth) {\n                            c.lineWidth = part.render.lineWidth;\n                            c.strokeStyle = part.render.strokeStyle;\n                            c.stroke();\n                        }\n\n                        c.fill();\n                    } else {\n                        c.lineWidth = 1;\n                        c.strokeStyle = render.options.wireframeStrokeStyle;\n                        c.stroke();\n                    }\n                }\n\n                c.globalAlpha = 1;\n            }\n        }\n    };\n\n    /**\n     * Optimised method for drawing body wireframes in one pass\n     * @private\n     * @method bodyWireframes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyWireframes = function(render, bodies, context) {\n        var c = context,\n            showInternalEdges = render.options.showInternalEdges,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render all bodies\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                for (j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                        c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                        c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                        c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                }\n\n                c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = render.options.wireframeStrokeStyle;\n        c.stroke();\n    };\n\n    /**\n     * Optimised method for drawing body convex hull wireframes in one pass\n     * @private\n     * @method bodyConvexHulls\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyConvexHulls = function(render, bodies, context) {\n        var c = context,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render convex hulls\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible || body.parts.length === 1)\n                continue;\n\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n            for (j = 1; j < body.vertices.length; j++) {\n                c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n\n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = 'rgba(255,255,255,0.2)';\n        c.stroke();\n    };\n\n    /**\n     * Renders body vertex numbers.\n     * @private\n     * @method vertexNumbers\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.vertexNumbers = function(render, bodies, context) {\n        var c = context,\n            i,\n            j,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n                var part = parts[k];\n                for (j = 0; j < part.vertices.length; j++) {\n                    c.fillStyle = 'rgba(255,255,255,0.2)';\n                    c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n                }\n            }\n        }\n    };\n\n    /**\n     * Renders mouse position.\n     * @private\n     * @method mousePosition\n     * @param {render} render\n     * @param {mouse} mouse\n     * @param {RenderingContext} context\n     */\n    Render.mousePosition = function(render, mouse, context) {\n        var c = context;\n        c.fillStyle = 'rgba(255,255,255,0.8)';\n        c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n    };\n\n    /**\n     * Draws body bounds\n     * @private\n     * @method bodyBounds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyBounds = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.render.visible) {\n                var parts = bodies[i].parts;\n                for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    var part = parts[j];\n                    c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n        } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Draws body angle indicators and axes\n     * @private\n     * @method bodyAxes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyAxes = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                parts = body.parts;\n\n            if (!body.render.visible)\n                continue;\n\n            if (options.showAxes) {\n                // render all axes\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        var axis = part.axes[k];\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                    }\n                }\n            } else {\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        // render a single axis indicator\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2,\n                            (part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2);\n                    }\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n            c.lineWidth = 1;\n        } else {\n            c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n            c.globalCompositeOperation = 'overlay';\n            c.lineWidth = 2;\n        }\n\n        c.stroke();\n        c.globalCompositeOperation = 'source-over';\n    };\n\n    /**\n     * Draws body positions\n     * @private\n     * @method bodyPositions\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyPositions = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            body,\n            part,\n            i,\n            k;\n\n        c.beginPath();\n\n        // render current positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n                c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'indianred';\n        } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render previous positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (body.render.visible) {\n                c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        c.fillStyle = 'rgba(255,165,0,0.8)';\n        c.fill();\n    };\n\n    /**\n     * Draws body velocity\n     * @private\n     * @method bodyVelocity\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyVelocity = function(render, bodies, context) {\n        var c = context;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            var velocity = Body.getVelocity(body);\n\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + velocity.x, body.position.y + velocity.y);\n        }\n\n        c.lineWidth = 3;\n        c.strokeStyle = 'cornflowerblue';\n        c.stroke();\n    };\n\n    /**\n     * Draws body ids\n     * @private\n     * @method bodyIds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyIds = function(render, bodies, context) {\n        var c = context,\n            i,\n            j;\n\n        for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible)\n                continue;\n\n            var parts = bodies[i].parts;\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.font = \"12px Arial\";\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n                c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method collisions\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.collisions = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render collision positions\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            for (j = 0; j < pair.contactCount; j++) {\n                var contact = pair.contacts[j],\n                    vertex = contact.vertex;\n                c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n        } else {\n            c.fillStyle = 'orange';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render collision normals\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n\n            if (pair.contactCount > 0) {\n                var normalPosX = pair.contacts[0].vertex.x,\n                    normalPosY = pair.contacts[0].vertex.y;\n\n                if (pair.contactCount === 2) {\n                    normalPosX = (pair.contacts[0].vertex.x + pair.contacts[1].vertex.x) / 2;\n                    normalPosY = (pair.contacts[0].vertex.y + pair.contacts[1].vertex.y) / 2;\n                }\n\n                if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                    c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n                } else {\n                    c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n                }\n\n                c.lineTo(normalPosX, normalPosY);\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method separations\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.separations = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render separations\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n\n            var k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n\n            k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method inspector\n     * @param {inspector} inspector\n     * @param {RenderingContext} context\n     */\n    Render.inspector = function(inspector, context) {\n        var engine = inspector.engine,\n            selected = inspector.selected,\n            render = inspector.render,\n            options = render.options,\n            bounds;\n\n        if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / render.options.width,\n                boundsScaleY = boundsHeight / render.options.height;\n\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        }\n\n        for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1,2]);\n\n            switch (item.type) {\n\n            case 'body':\n\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3),\n                    Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            case 'constraint':\n\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA)\n                    point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            }\n\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n        }\n\n        // render selection region\n        if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y),\n                Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n        }\n\n        if (options.hasBounds)\n            context.setTransform(1, 0, 0, 1, 0, 0);\n    };\n\n    /**\n     * Updates render timing.\n     * @method _updateTiming\n     * @private\n     * @param {render} render\n     * @param {number} time\n     */\n    var _updateTiming = function(render, time) {\n        var engine = render.engine,\n            timing = render.timing,\n            historySize = timing.historySize,\n            timestamp = engine.timing.timestamp;\n\n        timing.delta = time - timing.lastTime || Render._goodDelta;\n        timing.lastTime = time;\n\n        timing.timestampElapsed = timestamp - timing.lastTimestamp || 0;\n        timing.lastTimestamp = timestamp;\n\n        timing.deltaHistory.unshift(timing.delta);\n        timing.deltaHistory.length = Math.min(timing.deltaHistory.length, historySize);\n\n        timing.engineDeltaHistory.unshift(engine.timing.lastDelta);\n        timing.engineDeltaHistory.length = Math.min(timing.engineDeltaHistory.length, historySize);\n\n        timing.timestampElapsedHistory.unshift(timing.timestampElapsed);\n        timing.timestampElapsedHistory.length = Math.min(timing.timestampElapsedHistory.length, historySize);\n\n        timing.engineUpdatesHistory.unshift(engine.timing.lastUpdatesPerFrame);\n        timing.engineUpdatesHistory.length = Math.min(timing.engineUpdatesHistory.length, historySize);\n\n        timing.engineElapsedHistory.unshift(engine.timing.lastElapsed);\n        timing.engineElapsedHistory.length = Math.min(timing.engineElapsedHistory.length, historySize);\n\n        timing.elapsedHistory.unshift(timing.lastElapsed);\n        timing.elapsedHistory.length = Math.min(timing.elapsedHistory.length, historySize);\n    };\n\n    /**\n     * Returns the mean value of the given numbers.\n     * @method _mean\n     * @private\n     * @param {Number[]} values\n     * @return {Number} the mean of given values\n     */\n    var _mean = function(values) {\n        var result = 0;\n        for (var i = 0; i < values.length; i += 1) {\n            result += values[i];\n        }\n        return (result / values.length) || 0;\n    };\n\n    /**\n     * @method _createCanvas\n     * @private\n     * @param {} width\n     * @param {} height\n     * @return canvas\n     */\n    var _createCanvas = function(width, height) {\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        canvas.oncontextmenu = function() { return false; };\n        canvas.onselectstart = function() { return false; };\n        return canvas;\n    };\n\n    /**\n     * Gets the pixel ratio of the canvas.\n     * @method _getPixelRatio\n     * @private\n     * @param {HTMLElement} canvas\n     * @return {Number} pixel ratio\n     */\n    var _getPixelRatio = function(canvas) {\n        var context = canvas.getContext('2d'),\n            devicePixelRatio = window.devicePixelRatio || 1,\n            backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio\n                                      || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio\n                                      || context.backingStorePixelRatio || 1;\n\n        return devicePixelRatio / backingStorePixelRatio;\n    };\n\n    /**\n     * Gets the requested texture (an Image) via its path\n     * @method _getTexture\n     * @private\n     * @param {render} render\n     * @param {string} imagePath\n     * @return {Image} texture\n     */\n    var _getTexture = function(render, imagePath) {\n        var image = render.textures[imagePath];\n\n        if (image)\n            return image;\n\n        image = render.textures[imagePath] = new Image();\n        image.src = imagePath;\n\n        return image;\n    };\n\n    /**\n     * Applies the background to the canvas using CSS.\n     * @method applyBackground\n     * @private\n     * @param {render} render\n     * @param {string} background\n     */\n    var _applyBackground = function(render, background) {\n        var cssBackground = background;\n\n        if (/(jpg|gif|png)$/.test(background))\n            cssBackground = 'url(' + background + ')';\n\n        render.canvas.style.background = cssBackground;\n        render.canvas.style.backgroundSize = \"contain\";\n        render.currentBackground = background;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A back-reference to the `Matter.Render` module.\n     *\n     * @deprecated\n     * @property controller\n     * @type render\n     */\n\n    /**\n     * A reference to the `Matter.Engine` instance to be used.\n     *\n     * @property engine\n     * @type engine\n     */\n\n    /**\n     * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n     *\n     * @property element\n     * @type HTMLElement\n     * @default null\n     */\n\n    /**\n     * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n     *\n     * @property canvas\n     * @type HTMLCanvasElement\n     * @default null\n     */\n\n    /**\n     * A `Bounds` object that specifies the drawing view region.\n     * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n     * This allows for creating views that can pan or zoom around the scene.\n     * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n    /**\n     * The 2d rendering context from the `render.canvas` element.\n     *\n     * @property context\n     * @type CanvasRenderingContext2D\n     */\n\n    /**\n     * The sprite texture cache.\n     *\n     * @property textures\n     * @type {}\n     */\n\n    /**\n     * The mouse to render if `render.options.showMousePosition` is enabled.\n     *\n     * @property mouse\n     * @type mouse\n     * @default null\n     */\n\n    /**\n     * The configuration options of the renderer.\n     *\n     * @property options\n     * @type {}\n     */\n\n    /**\n     * The target width in pixels of the `render.canvas` to be created.\n     * See also the `options.pixelRatio` property to change render quality.\n     *\n     * @property options.width\n     * @type number\n     * @default 800\n     */\n\n    /**\n     * The target height in pixels of the `render.canvas` to be created.\n     * See also the `options.pixelRatio` property to change render quality.\n     *\n     * @property options.height\n     * @type number\n     * @default 600\n     */\n\n    /**\n     * The [pixel ratio](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio) to use when rendering.\n     *\n     * @property options.pixelRatio\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A CSS background color string to use when `render.options.wireframes` is disabled.\n     * This may be also set to `'transparent'` or equivalent.\n     *\n     * @property options.background\n     * @type string\n     * @default '#14151f'\n     */\n\n    /**\n     * A CSS color string to use for background when `render.options.wireframes` is enabled.\n     * This may be also set to `'transparent'` or equivalent.\n     *\n     * @property options.wireframeBackground\n     * @type string\n     * @default '#14151f'\n     */\n\n    /**\n     * A CSS color string to use for stroke when `render.options.wireframes` is enabled.\n     * This may be also set to `'transparent'` or equivalent.\n     *\n     * @property options.wireframeStrokeStyle\n     * @type string\n     * @default '#bbb'\n     */\n\n    /**\n     * A flag that specifies if `render.bounds` should be used when rendering.\n     *\n     * @property options.hasBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable all debug information overlays together.  \n     * This includes and has priority over the values of:\n     *\n     * - `render.options.showStats`\n     * - `render.options.showPerformance`\n     *\n     * @property options.showDebug\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the engine stats info overlay.  \n     * From left to right, the values shown are:\n     *\n     * - body parts total\n     * - body total\n     * - constraints total\n     * - composites total\n     * - collision pairs total\n     *\n     * @property options.showStats\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable performance charts.  \n     * From left to right, the values shown are:\n     *\n     * - average render frequency (e.g. 60 fps)\n     * - exact engine delta time used for last update (e.g. 16.66ms)\n     * - average updates per frame (e.g. 1)\n     * - average engine execution duration (e.g. 5.00ms)\n     * - average render execution duration (e.g. 0.40ms)\n     * - average effective play speed (e.g. '1.00x' is 'real-time')\n     *\n     * Each value is recorded over a fixed sample of past frames (60 frames).\n     *\n     * A chart shown below each value indicates the variance from the average over the sample.\n     * The more stable or fixed the value is the flatter the chart will appear.\n     *\n     * @property options.showPerformance\n     * @type boolean\n     * @default false\n     */\n    \n    /**\n     * A flag to enable or disable rendering entirely.\n     *\n     * @property options.enabled\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to toggle wireframe rendering otherwise solid fill rendering is used.\n     *\n     * @property options.wireframes\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A flag to enable or disable sleeping bodies indicators.\n     *\n     * @property options.showSleeping\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A flag to enable or disable the debug information overlay.\n     *\n     * @property options.showDebug\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the collision broadphase debug overlay.\n     *\n     * @deprecated no longer implemented\n     * @property options.showBroadphase\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body bounds debug overlay.\n     *\n     * @property options.showBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body velocity debug overlay.\n     *\n     * @property options.showVelocity\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body collisions debug overlay.\n     *\n     * @property options.showCollisions\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the collision resolver separations debug overlay.\n     *\n     * @property options.showSeparations\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body axes debug overlay.\n     *\n     * @property options.showAxes\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body positions debug overlay.\n     *\n     * @property options.showPositions\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body angle debug overlay.\n     *\n     * @property options.showAngleIndicator\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body and part ids debug overlay.\n     *\n     * @property options.showIds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body vertex numbers debug overlay.\n     *\n     * @property options.showVertexNumbers\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body convex hulls debug overlay.\n     *\n     * @property options.showConvexHulls\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body internal edges debug overlay.\n     *\n     * @property options.showInternalEdges\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the mouse position debug overlay.\n     *\n     * @property options.showMousePosition\n     * @type boolean\n     * @default false\n     */\n\n})();\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Runner` module is an optional utility that provides a game loop for running a `Matter.Engine` inside a browser environment.\n* A runner will continuously update a `Matter.Engine` whilst synchronising engine updates with the browser frame rate.\n* This runner favours a smoother user experience over perfect time keeping.\n* This runner is optional and is used for development and debugging but could be useful as a starting point for implementing some games and experiences.\n* Alternatively see `Engine.update` to step the engine directly inside your own game loop implementation as may be needed inside other environments.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Runner\n*/\n\nvar Runner = {};\n\nmodule.exports = Runner;\n\nvar Events = __webpack_require__(5);\nvar Engine = __webpack_require__(17);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    Runner._maxFrameDelta = 1000 / 15;\n    Runner._frameDeltaFallback = 1000 / 60;\n    Runner._timeBufferMargin = 1.5;\n    Runner._elapsedNextEstimate = 1;\n    Runner._smoothingLowerBound = 0.1;\n    Runner._smoothingUpperBound = 0.9;\n\n    /**\n     * Creates a new Runner. \n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     */\n    Runner.create = function(options) {\n        var defaults = {\n            delta: 1000 / 60,\n            frameDelta: null,\n            frameDeltaSmoothing: true,\n            frameDeltaSnapping: true,\n            frameDeltaHistory: [],\n            frameDeltaHistorySize: 100,\n            frameRequestId: null,\n            timeBuffer: 0,\n            timeLastTick: null,\n            maxUpdates: null,\n            maxFrameTime: 1000 / 30,\n            lastUpdatesDeferred: 0,\n            enabled: true\n        };\n\n        var runner = Common.extend(defaults, options);\n\n        // for temporary back compatibility only\n        runner.fps = 0;\n\n        return runner;\n    };\n\n    /**\n     * Runs a `Matter.Engine` whilst synchronising engine updates with the browser frame rate. \n     * See module and properties descriptions for more information on this runner.\n     * Alternatively see `Engine.update` to step the engine directly inside your own game loop implementation.\n     * @method run\n     * @param {runner} runner\n     * @param {engine} [engine]\n     * @return {runner} runner\n     */\n    Runner.run = function(runner, engine) {\n        // initial time buffer for the first frame\n        runner.timeBuffer = Runner._frameDeltaFallback;\n\n        (function onFrame(time){\n            runner.frameRequestId = Runner._onNextFrame(runner, onFrame);\n\n            if (time && runner.enabled) {\n                Runner.tick(runner, engine, time);\n            }\n        })();\n\n        return runner;\n    };\n\n    /**\n     * Performs a single runner tick as used inside `Runner.run`.\n     * See module and properties descriptions for more information on this runner.\n     * Alternatively see `Engine.update` to step the engine directly inside your own game loop implementation.\n     * @method tick\n     * @param {runner} runner\n     * @param {engine} engine\n     * @param {number} time\n     */\n    Runner.tick = function(runner, engine, time) {\n        var tickStartTime = Common.now(),\n            engineDelta = runner.delta,\n            updateCount = 0;\n\n        // find frame delta time since last call\n        var frameDelta = time - runner.timeLastTick;\n\n        // fallback for unusable frame delta values (e.g. 0, NaN, on first frame or long pauses)\n        if (!frameDelta || !runner.timeLastTick || frameDelta > Math.max(Runner._maxFrameDelta, runner.maxFrameTime)) {\n            // reuse last accepted frame delta else fallback\n            frameDelta = runner.frameDelta || Runner._frameDeltaFallback;\n        }\n\n        if (runner.frameDeltaSmoothing) {\n            // record frame delta over a number of frames\n            runner.frameDeltaHistory.push(frameDelta);\n            runner.frameDeltaHistory = runner.frameDeltaHistory.slice(-runner.frameDeltaHistorySize);\n\n            // sort frame delta history\n            var deltaHistorySorted = runner.frameDeltaHistory.slice(0).sort();\n\n            // sample a central window to limit outliers\n            var deltaHistoryWindow = runner.frameDeltaHistory.slice(\n                deltaHistorySorted.length * Runner._smoothingLowerBound, \n                deltaHistorySorted.length * Runner._smoothingUpperBound\n            );\n\n            // take the mean of the central window\n            var frameDeltaSmoothed = _mean(deltaHistoryWindow);\n            frameDelta = frameDeltaSmoothed || frameDelta;\n        }\n\n        if (runner.frameDeltaSnapping) {\n            // snap frame delta to the nearest 1 Hz\n            frameDelta = 1000 / Math.round(1000 / frameDelta);\n        }\n\n        // update runner values for next call\n        runner.frameDelta = frameDelta;\n        runner.timeLastTick = time;\n\n        // accumulate elapsed time\n        runner.timeBuffer += runner.frameDelta;\n\n        // limit time buffer size to a single frame of updates\n        runner.timeBuffer = Common.clamp(\n            runner.timeBuffer, 0, runner.frameDelta + engineDelta * Runner._timeBufferMargin\n        );\n\n        // reset count of over budget updates\n        runner.lastUpdatesDeferred = 0;\n\n        // get max updates per frame\n        var maxUpdates = runner.maxUpdates || Math.ceil(runner.maxFrameTime / engineDelta);\n\n        // create event object\n        var event = {\n            timestamp: engine.timing.timestamp\n        };\n\n        // tick events before update\n        Events.trigger(runner, 'beforeTick', event);\n        Events.trigger(runner, 'tick', event);\n\n        var updateStartTime = Common.now();\n\n        // simulate time elapsed between calls\n        while (engineDelta > 0 && runner.timeBuffer >= engineDelta * Runner._timeBufferMargin) {\n            // update the engine\n            Events.trigger(runner, 'beforeUpdate', event);\n            Engine.update(engine, engineDelta);\n            Events.trigger(runner, 'afterUpdate', event);\n\n            // consume time simulated from buffer\n            runner.timeBuffer -= engineDelta;\n            updateCount += 1;\n\n            // find elapsed time during this tick\n            var elapsedTimeTotal = Common.now() - tickStartTime,\n                elapsedTimeUpdates = Common.now() - updateStartTime,\n                elapsedNextEstimate = elapsedTimeTotal + Runner._elapsedNextEstimate * elapsedTimeUpdates / updateCount;\n\n            // defer updates if over performance budgets for this frame\n            if (updateCount >= maxUpdates || elapsedNextEstimate > runner.maxFrameTime) {\n                runner.lastUpdatesDeferred = Math.round(Math.max(0, (runner.timeBuffer / engineDelta) - Runner._timeBufferMargin));\n                break;\n            }\n        }\n\n        // track timing metrics\n        engine.timing.lastUpdatesPerFrame = updateCount;\n\n        // tick events after update\n        Events.trigger(runner, 'afterTick', event);\n\n        // show useful warnings if needed\n        if (runner.frameDeltaHistory.length >= 100) {\n            if (runner.lastUpdatesDeferred && Math.round(runner.frameDelta / engineDelta) > maxUpdates) {\n                Common.warnOnce('Matter.Runner: runner reached runner.maxUpdates, see docs.');\n            } else if (runner.lastUpdatesDeferred) {\n                Common.warnOnce('Matter.Runner: runner reached runner.maxFrameTime, see docs.');\n            }\n\n            if (typeof runner.isFixed !== 'undefined') {\n                Common.warnOnce('Matter.Runner: runner.isFixed is now redundant, see docs.');\n            }\n\n            if (runner.deltaMin || runner.deltaMax) {\n                Common.warnOnce('Matter.Runner: runner.deltaMin and runner.deltaMax were removed, see docs.');\n            }\n\n            if (runner.fps !== 0) {\n                Common.warnOnce('Matter.Runner: runner.fps was replaced by runner.delta, see docs.');\n            }\n        }\n    };\n\n    /**\n     * Ends execution of `Runner.run` on the given `runner` by canceling the frame loop.\n     * Alternatively to temporarily pause the runner, see `runner.enabled`.\n     * @method stop\n     * @param {runner} runner\n     */\n    Runner.stop = function(runner) {\n        Runner._cancelNextFrame(runner);\n    };\n\n    /**\n     * Schedules the `callback` on this `runner` for the next animation frame.\n     * @private\n     * @method _onNextFrame\n     * @param {runner} runner\n     * @param {function} callback\n     * @return {number} frameRequestId\n     */\n    Runner._onNextFrame = function(runner, callback) {\n        if (typeof window !== 'undefined' && window.requestAnimationFrame) {\n            runner.frameRequestId = window.requestAnimationFrame(callback);\n        } else {\n            throw new Error('Matter.Runner: missing required global window.requestAnimationFrame.');\n        }\n\n        return runner.frameRequestId;\n    };\n\n    /**\n     * Cancels the last callback scheduled by `Runner._onNextFrame` on this `runner`.\n     * @private\n     * @method _cancelNextFrame\n     * @param {runner} runner\n     */\n    Runner._cancelNextFrame = function(runner) {\n        if (typeof window !== 'undefined' && window.cancelAnimationFrame) {\n            window.cancelAnimationFrame(runner.frameRequestId);\n        } else {\n            throw new Error('Matter.Runner: missing required global window.cancelAnimationFrame.');\n        }\n    };\n\n    /**\n     * Returns the mean of the given numbers.\n     * @method _mean\n     * @private\n     * @param {Number[]} values\n     * @return {Number} the mean of given values.\n     */\n    var _mean = function(values) {\n        var result = 0,\n            valuesLength = values.length;\n\n        for (var i = 0; i < valuesLength; i += 1) {\n            result += values[i];\n        }\n\n        return (result / valuesLength) || 0;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired once at the start of the browser frame, before any engine updates.\n    *\n    * @event beforeTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired once at the start of the browser frame, after `beforeTick`.\n    *\n    * @event tick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired once at the end of the browser frame, after `beforeTick`, `tick` and after any engine updates.\n    *\n    * @event afterTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before each and every engine update in this browser frame (if any). \n    * There may be multiple engine update calls per browser frame (or none) depending on framerate and timestep delta.\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after each and every engine update in this browser frame (if any). \n    * There may be multiple engine update calls per browser frame (or none) depending on framerate and timestep delta.\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * The fixed timestep size used for `Engine.update` calls in milliseconds, known as `delta`.\n     * \n     * This value is recommended to be `1000 / 60` ms or smaller (i.e. equivalent to at least 60hz).\n     * \n     * Smaller `delta` values provide higher quality results at the cost of performance.\n     * \n     * You should usually avoid changing `delta` during running, otherwise quality may be affected. \n     * \n     * For smoother frame pacing choose a `delta` that is an even multiple of each display FPS you target, i.e. `1000 / (n * fps)` as this helps distribute an equal number of updates over each display frame.\n     * \n     * For example with a 60 Hz `delta` i.e. `1000 / 60` the runner will on average perform one update per frame on displays running 60 FPS and one update every two frames on displays running 120 FPS, etc.\n     * \n     * Where as e.g. using a 240 Hz `delta` i.e. `1000 / 240` the runner will on average perform four updates per frame on displays running 60 FPS and two updates per frame on displays running 120 FPS, etc.\n     * \n     * Therefore `Runner.run` will call multiple engine updates (or none) as needed to simulate the time elapsed between browser frames. \n     * \n     * In practice the number of updates in any particular frame may be restricted to respect the runner's performance budgets. These are specified by `runner.maxFrameTime` and `runner.maxUpdates`, see those properties for details.\n     * \n     * @property delta\n     * @type number\n     * @default 1000 / 60\n     */\n\n    /**\n     * A flag that can be toggled to enable or disable tick calls on this runner, therefore pausing engine updates and events while the runner loop remains running.\n     *\n     * @property enabled\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * The accumulated time elapsed that has yet to be simulated in milliseconds.\n     * This value is clamped within certain limits (see `Runner.tick` code).\n     *\n     * @private\n     * @property timeBuffer\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * The measured time elapsed between the last two browser frames measured in milliseconds.\n     * This is useful e.g. to estimate the current browser FPS using `1000 / runner.frameDelta`.\n     *\n     * @readonly\n     * @property frameDelta\n     * @type number\n     */\n\n    /**\n     * Enables averaging to smooth frame rate measurements and therefore stabilise play rate.\n     *\n     * @property frameDeltaSmoothing\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * Rounds measured browser frame delta to the nearest 1 Hz.\n     * This option can help smooth frame rate measurements and simplify handling hardware timing differences e.g. 59.94Hz and 60Hz displays.\n     * For best results you should also round your `runner.delta` equivalent to the nearest 1 Hz.\n     *\n     * @property frameDeltaSnapping\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A performance budget that limits execution time allowed for this runner per browser frame in milliseconds.\n     * \n     * To calculate the effective browser FPS at which this throttle is applied use `1000 / runner.maxFrameTime`.\n     * \n     * This performance budget is intended to help maintain browser interactivity and help improve framerate recovery during temporary high CPU usage.\n     * \n     * This budget only covers the measured time elapsed executing the functions called in the scope of the runner tick, including `Engine.update` and its related user event callbacks.\n     * \n     * You may also reduce this budget to allow for any significant additional processing you perform on the same thread outside the scope of this runner tick, e.g. rendering time.\n     * \n     * See also `runner.maxUpdates`.\n     *\n     * @property maxFrameTime\n     * @type number\n     * @default 1000 / 30\n     */\n\n    /**\n     * An optional limit for maximum engine update count allowed per frame tick in addition to `runner.maxFrameTime`.\n     * \n     * Unless you set a value it is automatically chosen based on `runner.delta` and `runner.maxFrameTime`.\n     * \n     * See also `runner.maxFrameTime`.\n     * \n     * @property maxUpdates\n     * @type number\n     * @default null\n     */\n\n    /**\n     * The timestamp of the last call to `Runner.tick` used to measure `frameDelta`.\n     *\n     * @private\n     * @property timeLastTick\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * The id of the last call to `Runner._onNextFrame`.\n     *\n     * @private\n     * @property frameRequestId\n     * @type number\n     * @default null\n     */\n\n})();\n\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* This module has now been replaced by `Matter.Collision`.\n*\n* All usage should be migrated to `Matter.Collision`.\n* For back-compatibility purposes this module will remain for a short term and then later removed in a future release.\n*\n* The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n*\n* @class SAT\n* @deprecated\n*/\n\nvar SAT = {};\n\nmodule.exports = SAT;\n\nvar Collision = __webpack_require__(8);\nvar Common = __webpack_require__(0);\nvar deprecated = Common.deprecated;\n\n(function() {\n\n    /**\n     * Detect collision between two bodies using the Separating Axis Theorem.\n     * @deprecated replaced by Collision.collides\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {collision} collision\n     */\n    SAT.collides = function(bodyA, bodyB) {\n        return Collision.collides(bodyA, bodyB);\n    };\n\n    deprecated(SAT, 'collides', 'SAT.collides ➤ replaced by Collision.collides');\n\n})();\n\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n*\n* To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Svg\n*/\n\nvar Svg = {};\n\nmodule.exports = Svg;\n\nvar Bounds = __webpack_require__(1);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Converts an SVG path into an array of vector points.\n     * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n     * See `Bodies.fromVertices` which provides support for this.\n     * Note that this function is not guaranteed to support complex paths (such as those with holes).\n     * You must load the `pathseg.js` polyfill on newer browsers.\n     * @method pathToVertices\n     * @param {SVGPathElement} path\n     * @param {Number} [sampleLength=15]\n     * @return {Vector[]} points\n     */\n    Svg.pathToVertices = function(path, sampleLength) {\n        if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) {\n            Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');\n        }\n\n        // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n        var i, il, total, point, segment, segments, \n            segmentsQueue, lastSegment, \n            lastPoint, segmentIndex, points = [],\n            lx, ly, length = 0, x = 0, y = 0;\n\n        sampleLength = sampleLength || 15;\n\n        var addPoint = function(px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\n\n            // when the last point doesn't equal the current point add the current point\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n                if (lastPoint && isRelative) {\n                    lx = lastPoint.x;\n                    ly = lastPoint.y;\n                } else {\n                    lx = 0;\n                    ly = 0;\n                }\n\n                var point = {\n                    x: lx + px,\n                    y: ly + py\n                };\n\n                // set last point\n                if (isRelative || !lastPoint) {\n                    lastPoint = point;\n                }\n\n                points.push(point);\n\n                x = lx + px;\n                y = ly + py;\n            }\n        };\n\n        var addSegmentPoint = function(segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase();\n\n            // skip path ends\n            if (segType === 'Z') \n                return;\n\n            // map segment to x and y\n            switch (segType) {\n\n            case 'M':\n            case 'L':\n            case 'T':\n            case 'C':\n            case 'S':\n            case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n            case 'H':\n                x = segment.x;\n                break;\n            case 'V':\n                y = segment.y;\n                break;\n            }\n\n            addPoint(x, y, segment.pathSegType);\n        };\n\n        // ensure path is absolute\n        Svg._svgPathToAbsolute(path);\n\n        // get total length\n        total = path.getTotalLength();\n\n        // queue segments\n        segments = [];\n        for (i = 0; i < path.pathSegList.numberOfItems; i += 1)\n            segments.push(path.pathSegList.getItem(i));\n\n        segmentsQueue = segments.concat();\n\n        // sample through path\n        while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex];\n\n            // new segment\n            if (segment != lastSegment) {\n                while (segmentsQueue.length && segmentsQueue[0] != segment)\n                    addSegmentPoint(segmentsQueue.shift());\n\n                lastSegment = segment;\n            }\n\n            // add points in between when curving\n            // TODO: adaptive sampling\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n\n            case 'C':\n            case 'T':\n            case 'S':\n            case 'Q':\n            case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n\n            }\n\n            // increment by sample value\n            length += sampleLength;\n        }\n\n        // add remaining segments not passed by sampling\n        for (i = 0, il = segmentsQueue.length; i < il; ++i)\n            addSegmentPoint(segmentsQueue[i]);\n\n        return points;\n    };\n\n    Svg._svgPathToAbsolute = function(path) {\n        // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n        // Copyright (c) Gavin Kistner\n        // http://phrogz.net/js/_ReuseLicense.txt\n        // Modifications: tidy formatting and naming\n        var x0, y0, x1, y1, x2, y2, segs = path.pathSegList,\n            x = 0, y = 0, len = segs.numberOfItems;\n\n        for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n                segType = seg.pathSegTypeAsLetter;\n\n            if (/[MLHVCSQTA]/.test(segType)) {\n                if ('x' in seg) x = seg.x;\n                if ('y' in seg) y = seg.y;\n            } else {\n                if ('x1' in seg) x1 = x + seg.x1;\n                if ('x2' in seg) x2 = x + seg.x2;\n                if ('y1' in seg) y1 = y + seg.y1;\n                if ('y2' in seg) y2 = y + seg.y2;\n                if ('x' in seg) x += seg.x;\n                if ('y' in seg) y += seg.y;\n\n                switch (segType) {\n\n                case 'm':\n                    segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                    break;\n                case 'l':\n                    segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                    break;\n                case 'h':\n                    segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                    break;\n                case 'v':\n                    segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                    break;\n                case 'c':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                    break;\n                case 's':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                    break;\n                case 'q':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                    break;\n                case 't':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                    break;\n                case 'a':\n                    segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                    break;\n                case 'z':\n                case 'Z':\n                    x = x0;\n                    y = y0;\n                    break;\n\n                }\n            }\n\n            if (segType == 'M' || segType == 'm') {\n                x0 = x;\n                y0 = y;\n            }\n        }\n    };\n\n})();\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* This module has now been replaced by `Matter.Composite`.\n*\n* All usage should be migrated to the equivalent functions found on `Matter.Composite`.\n* For example `World.add(world, body)` now becomes `Composite.add(world, body)`.\n*\n* The property `world.gravity` has been moved to `engine.gravity`.\n*\n* For back-compatibility purposes this module will remain as a direct alias to `Matter.Composite` in the short term during migration.\n* Eventually this alias module will be marked as deprecated and then later removed in a future release.\n*\n* @class World\n*/\n\nvar World = {};\n\nmodule.exports = World;\n\nvar Composite = __webpack_require__(6);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * See above, aliases for back compatibility only\n     */\n    World.create = Composite.create;\n    World.add = Composite.add;\n    World.remove = Composite.remove;\n    World.clear = Composite.clear;\n    World.addComposite = Composite.addComposite;\n    World.addBody = Composite.addBody;\n    World.addConstraint = Composite.addConstraint;\n\n})();\n\n\n/***/ })\n/******/ ]);\n});","import Matter from \"matter-js\";\nimport { SimulationInstance, SimulationOptions } from \"../types\";\n\nexport class Engine {\n    private engine: Matter.Engine;\n    private world: Matter.World;\n    private render: Matter.Render;\n    private runner: Matter.Runner;\n    private mouse: Matter.Mouse;\n    private mouseConstraint: Matter.MouseConstraint;\n\n    constructor(options: SimulationOptions) {\n        // Create engine\n        this.engine = Matter.Engine.create();\n        this.world = this.engine.world;\n\n        // Create renderer\n        this.render = Matter.Render.create({\n            element: options.element,\n            engine: this.engine,\n            options: {\n                width: options.width,\n                height: options.height,\n                showAngleIndicator: options.showAngleIndicator || false,\n                background: options.background || \"#F0F0F0\",\n                wireframes: options.wireframes || false,\n            },\n        });\n\n        // Create runner\n        this.runner = Matter.Runner.create();\n\n        // Create mouse and mouse constraint\n        this.mouse = Matter.Mouse.create(this.render.canvas);\n        this.mouseConstraint = Matter.MouseConstraint.create(this.engine, {\n            mouse: this.mouse,\n            constraint: {\n                stiffness: 0.2,\n                render: {\n                    visible: true,\n                },\n            },\n        });\n\n        // Add mouse constraint to world\n        Matter.Composite.add(this.world, this.mouseConstraint);\n\n        // Set mouse in render\n        this.render.mouse = this.mouse;\n    }\n\n    public start(): void {\n        Matter.Render.run(this.render);\n        Matter.Runner.run(this.runner, this.engine);\n    }\n\n    public stop(): void {\n        Matter.Render.stop(this.render);\n        Matter.Runner.stop(this.runner);\n    }\n\n    public addBody(body: Matter.Body | Matter.Body[]): void {\n        Matter.Composite.add(this.world, body);\n    }\n\n    public removeBody(body: Matter.Body): void {\n        Matter.Composite.remove(this.world, body);\n    }\n\n    public getAllBodies(): Matter.Body[] {\n        return Matter.Composite.allBodies(this.world);\n    }\n\n    public lookAt(\n        bounds: {\n            min: { x: number; y: number };\n            max: { x: number; y: number };\n        },\n    ): void {\n        Matter.Render.lookAt(this.render, bounds);\n    }\n\n    public getEngine(): Matter.Engine {\n        return this.engine;\n    }\n\n    public getWorld(): Matter.World {\n        return this.world;\n    }\n\n    public getRender(): Matter.Render {\n        return this.render;\n    }\n\n    public getRunner(): Matter.Runner {\n        return this.runner;\n    }\n\n    public getCanvas(): HTMLCanvasElement {\n        return this.render.canvas;\n    }\n\n    public getMouse(): Matter.Mouse {\n        return this.mouse;\n    }\n\n    public getMouseConstraint(): Matter.MouseConstraint {\n        return this.mouseConstraint;\n    }\n\n    public getInstance(): SimulationInstance {\n        return {\n            engine: this.engine,\n            runner: this.runner,\n            render: this.render,\n            canvas: this.render.canvas,\n            stop: this.stop.bind(this),\n        };\n    }\n}\n","import Matter from \"matter-js\";\nimport { BodyOptions } from \"../types\";\nimport { DebugControl } from \"./DebugControl\";\n\nexport class BodyFactory {\n    private debugControl: DebugControl;\n\n    constructor(debugControl: DebugControl) {\n        this.debugControl = debugControl;\n    }\n\n    public createCircle(\n        x: number,\n        y: number,\n        radius: number,\n        options: BodyOptions = {},\n    ): Matter.Body {\n        const body = Matter.Bodies.circle(x, y, radius, {\n            restitution: options.restitution || 0.9,\n            friction: options.friction || 0.1,\n            render: {\n                fillStyle: options.render?.fillStyle || Matter.Common.choose([\n                    \"#F44336\",\n                    \"#E53935\",\n                    \"#D32F2F\",\n                    \"#C62828\",\n                    \"#B71C1C\",\n                ]),\n                strokeStyle: options.render?.strokeStyle || \"#B71C1C\",\n                lineWidth: options.render?.lineWidth || 1,\n            },\n        });\n\n        this.debugControl.logEvent(\"Circle Created\", {\n            id: body.id,\n            type: \"Circle\",\n            position: { x: body.position.x, y: body.position.y },\n            size: { radius: body.circleRadius },\n        });\n\n        return body;\n    }\n\n    public createPolygon(\n        x: number,\n        y: number,\n        sides: number,\n        radius: number,\n        options: BodyOptions = {},\n    ): Matter.Body {\n        const body = Matter.Bodies.polygon(x, y, sides, radius, {\n            restitution: options.restitution || 0.9,\n            friction: options.friction || 0.1,\n            render: {\n                fillStyle: options.render?.fillStyle || Matter.Common.choose([\n                    \"#4CAF50\",\n                    \"#8BC34A\",\n                    \"#66BB6A\",\n                    \"#43A047\",\n                    \"#388E3C\",\n                ]),\n                strokeStyle: options.render?.strokeStyle || \"#2E7D32\",\n                lineWidth: options.render?.lineWidth || 2,\n            },\n        });\n\n        this.debugControl.logEvent(\"Polygon Created\", {\n            id: body.id,\n            type: \"Polygon\",\n            position: { x: body.position.x, y: body.position.y },\n            size: { sides: body.vertices.length, radius: radius },\n        });\n\n        return body;\n    }\n\n    public createRectangle(\n        x: number,\n        y: number,\n        width: number,\n        height: number,\n        options: BodyOptions = {},\n    ): Matter.Body {\n        const body = Matter.Bodies.rectangle(x, y, width, height, {\n            restitution: options.restitution || 0.9,\n            friction: options.friction || 0.1,\n            render: {\n                fillStyle: options.render?.fillStyle || Matter.Common.choose([\n                    \"#2196F3\",\n                    \"#64B5F6\",\n                    \"#42A5F5\",\n                    \"#1E88E5\",\n                    \"#1565C0\",\n                ]),\n                strokeStyle: options.render?.strokeStyle || \"#0D47A1\",\n                lineWidth: options.render?.lineWidth || 2,\n            },\n        });\n\n        this.debugControl.logEvent(\"Rectangle Created\", {\n            id: body.id,\n            type: \"Rectangle\",\n            position: { x: body.position.x, y: body.position.y },\n            size: {\n                width: body.bounds.max.x - body.bounds.min.x,\n                height: body.bounds.max.y - body.bounds.min.y,\n            },\n        });\n\n        return body;\n    }\n\n    public createRandomBody(x: number, y: number): Matter.Body {\n        const type = Math.random();\n        let body: Matter.Body;\n\n        if (type < 0.33) {\n            body = this.createCircle(x, y, Matter.Common.random(10, 40));\n        } else if (type < 0.66) {\n            const sides = Math.floor(Matter.Common.random(3, 8));\n            body = this.createPolygon(\n                x,\n                y,\n                sides,\n                Matter.Common.random(20, 50),\n            );\n        } else {\n            const width = Matter.Common.random(30, 80);\n            const height = Matter.Common.random(30, 80);\n            body = this.createRectangle(x, y, width, height);\n        }\n\n        return body;\n    }\n}\n","import Matter from \"matter-js\";\n\nexport class DebugControl {\n    private element: HTMLDivElement;\n    private checkbox: HTMLInputElement;\n    private render: Matter.Render;\n    private isDebugMode: boolean;\n    private onChangeCallbacks: ((isDebugMode: boolean) => void)[] = [];\n\n    constructor(render: Matter.Render) {\n        this.render = render;\n        this.isDebugMode = localStorage.getItem(\"debugMode\") === \"true\";\n\n        // Create debug control element\n        this.element = document.createElement(\"div\");\n        this.element.className = \"debug-control\";\n        this.element.innerHTML = `\n            <label>\n                <input type=\"checkbox\" id=\"debugMode\">\n                Debug Mode\n            </label>\n        `;\n        document.body.appendChild(this.element);\n\n        // Get checkbox element\n        this.checkbox = document.getElementById(\n            \"debugMode\",\n        ) as HTMLInputElement;\n        this.checkbox.checked = this.isDebugMode;\n\n        // Add event listener\n        this.checkbox.addEventListener(\"change\", () => this.updateDebugMode());\n\n        // Initial update\n        this.updateDebugMode();\n    }\n\n    private updateDebugMode(): void {\n        this.isDebugMode = this.checkbox.checked;\n\n        // Update render options\n        this.render.options.showAngleIndicator = this.isDebugMode;\n        this.render.options.wireframes = this.isDebugMode;\n\n        // Save to localStorage\n        localStorage.setItem(\"debugMode\", String(this.isDebugMode));\n\n        // Call all registered callbacks\n        this.onChangeCallbacks.forEach((callback) =>\n            callback(this.isDebugMode)\n        );\n    }\n\n    public isEnabled(): boolean {\n        return this.isDebugMode;\n    }\n\n    public onChange(callback: (isDebugMode: boolean) => void): void {\n        this.onChangeCallbacks.push(callback);\n    }\n\n    public logEvent(eventName: string, data: any): void {\n        if (this.isDebugMode) {\n            console.log(eventName, data);\n        }\n    }\n}\n","import Matter from \"matter-js\";\nimport { Engine } from \"../core/Engine\";\nimport { BodyFactory } from \"./BodyFactory\";\nimport { DebugControl } from \"./DebugControl\";\n\nexport class InputHandler {\n    private engine: Engine;\n    private bodyFactory: BodyFactory;\n    private debugControl: DebugControl;\n    private canvas: HTMLCanvasElement;\n    private world: Matter.World;\n\n    constructor(\n        engine: Engine,\n        bodyFactory: BodyFactory,\n        debugControl: DebugControl,\n    ) {\n        this.engine = engine;\n        this.bodyFactory = bodyFactory;\n        this.debugControl = debugControl;\n        this.canvas = engine.getCanvas();\n        this.world = engine.getWorld();\n\n        // Initialize event listeners\n        this.initializeEventListeners();\n    }\n\n    private initializeEventListeners(): void {\n        // Mouse down event\n        this.canvas.addEventListener(\n            \"mousedown\",\n            (event) => this.handleMouseDown(event),\n        );\n\n        // Mouse up event\n        this.canvas.addEventListener(\n            \"mouseup\",\n            (event) => this.handleMouseUp(event),\n        );\n\n        // Click event\n        this.canvas.addEventListener(\n            \"click\",\n            (event) => this.handleClick(event),\n        );\n\n        // Context menu event (right click)\n        this.canvas.addEventListener(\n            \"contextmenu\",\n            (event) => this.handleContextMenu(event),\n        );\n\n        // Mouse move event\n        this.canvas.addEventListener(\n            \"mousemove\",\n            (event) => this.handleMouseMove(event),\n        );\n\n        // Keyboard events\n        document.addEventListener(\n            \"keydown\",\n            (event) => this.handleKeyDown(event),\n        );\n    }\n\n    private handleMouseDown(event: MouseEvent): void {\n        this.debugControl.logEvent(\"Mouse Down\", {\n            x: event.clientX,\n            y: event.clientY,\n            button: event.button === 0\n                ? \"Left\"\n                : event.button === 1\n                ? \"Middle\"\n                : \"Right\",\n        });\n\n        if (event.button === 2) {\n            const bodies = Matter.Query.point(this.world.bodies, {\n                x: event.clientX,\n                y: event.clientY,\n            });\n\n            this.debugControl.logEvent(\"Query Bodies\", {\n                bodies: bodies.map((body) => body.id),\n            });\n\n            for (const body of bodies) {\n                if (!body.isStatic) {\n                    this.debugControl.logEvent(\"Object Removed\", {\n                        id: body.id,\n                        type: body.circleRadius\n                            ? \"Circle\"\n                            : body.vertices\n                            ? \"Polygon\"\n                            : \"Rectangle\",\n                        position: {\n                            x: body.position.x,\n                            y: body.position.y,\n                        },\n                    });\n                    this.engine.removeBody(body);\n                }\n            }\n        }\n    }\n\n    private handleMouseUp(event: MouseEvent): void {\n        this.debugControl.logEvent(\"Mouse Up\", {\n            x: event.clientX,\n            y: event.clientY,\n            button: event.button === 0\n                ? \"Left\"\n                : event.button === 1\n                ? \"Middle\"\n                : \"Right\",\n        });\n    }\n\n    private handleClick(event: MouseEvent): void {\n        this.debugControl.logEvent(\"Click\", {\n            x: event.clientX,\n            y: event.clientY,\n            button: event.button === 0\n                ? \"Left\"\n                : event.button === 1\n                ? \"Middle\"\n                : \"Right\",\n        });\n\n        const mousePosition = {\n            x: event.clientX,\n            y: event.clientY,\n        };\n\n        const bodies = Matter.Query.point(this.world.bodies, mousePosition);\n\n        if (bodies.length > 0) {\n            const clickedBody = bodies.find((body) => !body.isStatic);\n\n            if (clickedBody) {\n                const direction = Matter.Vector.sub(\n                    clickedBody.position,\n                    mousePosition,\n                );\n                const normalizedDirection = Matter.Vector.normalise(direction);\n                const distance = Matter.Vector.magnitude(direction);\n                const force = Matter.Vector.mult(\n                    normalizedDirection,\n                    distance * 0.01,\n                );\n\n                Matter.Body.applyForce(\n                    clickedBody,\n                    clickedBody.position,\n                    force,\n                );\n\n                this.debugControl.logEvent(\"Body Repelled\", {\n                    id: clickedBody.id,\n                    type: clickedBody.circleRadius\n                        ? \"Circle\"\n                        : clickedBody.vertices\n                        ? \"Polygon\"\n                        : \"Rectangle\",\n                    position: {\n                        x: clickedBody.position.x,\n                        y: clickedBody.position.y,\n                    },\n                    force: force,\n                    distance: distance,\n                });\n            }\n        } else {\n            if (event.ctrlKey) {\n                const randomBody = this.bodyFactory.createRandomBody(\n                    event.clientX,\n                    event.clientY,\n                );\n                this.engine.addBody(randomBody);\n            }\n        }\n    }\n\n    private handleContextMenu(event: MouseEvent): void {\n        event.preventDefault();\n        this.debugControl.logEvent(\"Right Click - Object Removed\", {\n            x: event.clientX,\n            y: event.clientY,\n            button: \"Right\",\n        });\n    }\n\n    private handleMouseMove(event: MouseEvent): void {\n        if (event.buttons > 0) {\n            const button = event.buttons === 1\n                ? \"Left\"\n                : event.buttons === 4\n                ? \"Middle\"\n                : \"Right\";\n\n            this.debugControl.logEvent(`${button} Mouse Move (while pressed)`, {\n                x: event.clientX,\n                y: event.clientY,\n                button: button,\n            });\n\n            if (button === \"Right\") {\n                const bodies = Matter.Query.point(this.world.bodies, {\n                    x: event.clientX,\n                    y: event.clientY,\n                });\n\n                if (bodies.length > 0 && !bodies[0].isStatic) {\n                    this.engine.removeBody(bodies[0]);\n                }\n            }\n\n            if (button === \"Left\" && event.ctrlKey) {\n                const currentTime = Date.now();\n                if (\n                    !window.lastCreationTime ||\n                    currentTime - window.lastCreationTime >= 100\n                ) {\n                    const randomBody = this.bodyFactory.createRandomBody(\n                        event.clientX,\n                        event.clientY,\n                    );\n                    this.engine.addBody(randomBody);\n                    window.lastCreationTime = currentTime;\n                }\n            }\n        }\n\n        // // Apply repulsion force to bodies near the mouse\n        // const mousePosition = { x: event.clientX, y: event.clientY };\n        // const repulsionDistance = 150;\n        // const repulsionStrength = 0.05;\n\n        // for (const body of this.engine.getAllBodies()) {\n        //     const distance = Matter.Vector.magnitude(\n        //         Matter.Vector.sub(body.position, mousePosition),\n        //     );\n\n        //     if (distance < repulsionDistance) {\n        //         const direction = Matter.Vector.normalise(\n        //             Matter.Vector.sub(body.position, mousePosition),\n        //         );\n        //         const force = Matter.Vector.mult(direction, repulsionStrength);\n        //         Matter.Body.applyForce(body, body.position, force);\n        //     }\n        // }\n    }\n\n    private handleKeyDown(event: KeyboardEvent): void {\n        if (event.key === \"Delete\") {\n            const bodies = this.engine.getAllBodies();\n            for (const body of bodies) {\n                if (!body.isStatic) {\n                    this.debugControl.logEvent(\"Object Removed (DEL key)\", {\n                        id: body.id,\n                        type: body.circleRadius\n                            ? \"Circle\"\n                            : body.vertices\n                            ? \"Polygon\"\n                            : \"Rectangle\",\n                        position: {\n                            x: body.position.x,\n                            y: body.position.y,\n                        },\n                    });\n                    this.engine.removeBody(body);\n                    break;\n                }\n            }\n        }\n    }\n}\n","import Matter from \"matter-js\";\nimport { Engine } from \"../core/Engine\";\n\nexport class BoundaryWalls {\n    private engine: Engine;\n    private walls: Matter.Body[] = [];\n    private width: number;\n    private height: number;\n\n    constructor(engine: Engine, width: number, height: number) {\n        this.engine = engine;\n        this.width = width;\n        this.height = height;\n        this.createWalls();\n    }\n\n    private createWalls(): void {\n        // Bottom wall\n        const bottomWall = Matter.Bodies.rectangle(\n            this.width / 2,\n            this.height,\n            this.width,\n            50.5,\n            {\n                isStatic: true,\n                render: {\n                    fillStyle: \"#060a19\",\n                    strokeStyle: \"#000\",\n                    lineWidth: 2,\n                },\n            },\n        );\n\n        // Left wall\n        const leftWall = Matter.Bodies.rectangle(\n            0,\n            this.height / 2,\n            50.5,\n            this.height,\n            {\n                isStatic: true,\n                render: {\n                    fillStyle: \"#060a19\",\n                    strokeStyle: \"#000\",\n                    lineWidth: 2,\n                },\n            },\n        );\n\n        // Right wall\n        const rightWall = Matter.Bodies.rectangle(\n            this.width,\n            this.height / 2,\n            50.5,\n            this.height,\n            {\n                isStatic: true,\n                render: {\n                    fillStyle: \"#060a19\",\n                    strokeStyle: \"#000\",\n                    lineWidth: 2,\n                },\n            },\n        );\n\n        this.walls = [bottomWall, leftWall, rightWall];\n        this.engine.addBody(this.walls);\n    }\n\n    public getWalls(): Matter.Body[] {\n        return this.walls;\n    }\n\n    public resize(width: number, height: number): void {\n        this.width = width;\n        this.height = height;\n\n        // Remove old walls\n        for (const wall of this.walls) {\n            this.engine.removeBody(wall);\n        }\n\n        // Create new walls\n        this.createWalls();\n    }\n}\n","import Matter from \"matter-js\";\nimport { Engine } from \"../core/Engine\";\n\nexport class InitialShapes {\n    private engine: Engine;\n    private shapes: Matter.Body[] = [];\n\n    constructor(engine: Engine) {\n        this.engine = engine;\n        this.createShapes();\n    }\n\n    private createShapes(): void {\n        // Triangle\n        const triangle = Matter.Bodies.polygon(200, 460, 3, 60, {\n            restitution: 0.9,\n            friction: 0.1,\n            render: {\n                fillStyle: \"#4CAF50\",\n                strokeStyle: \"#388E3C\",\n                lineWidth: 2,\n            },\n        });\n\n        // Pentagon\n        const pentagon = Matter.Bodies.polygon(400, 460, 5, 60, {\n            restitution: 0.9,\n            friction: 0.1,\n            render: {\n                fillStyle: \"#2196F3\",\n                strokeStyle: \"#1976D2\",\n                lineWidth: 2,\n            },\n        });\n\n        // Rectangle\n        const rectangle = Matter.Bodies.rectangle(600, 460, 80, 80, {\n            restitution: 0.9,\n            friction: 0.1,\n            render: {\n                fillStyle: \"#FFC107\",\n                strokeStyle: \"#FF8F00\",\n                lineWidth: 2,\n            },\n        });\n\n        this.shapes = [triangle, pentagon, rectangle];\n        this.engine.addBody(this.shapes);\n    }\n\n    public getShapes(): Matter.Body[] {\n        return this.shapes;\n    }\n}\n","import Matter from \"matter-js\";\n\nexport class BodyWrapper {\n    private bounds: {\n        min: { x: number; y: number };\n        max: { x: number; y: number };\n    };\n\n    constructor(\n        bounds: {\n            min: { x: number; y: number };\n            max: { x: number; y: number };\n        },\n    ) {\n        this.bounds = bounds;\n    }\n\n    public wrapBody(body: Matter.Body): void {\n        if (body.position.x < this.bounds.min.x) {\n            Matter.Body.setPosition(body, {\n                x: this.bounds.max.x - (this.bounds.min.x - body.position.x),\n                y: body.position.y,\n            });\n        } else if (body.position.x > this.bounds.max.x) {\n            Matter.Body.setPosition(body, {\n                x: this.bounds.min.x + (body.position.x - this.bounds.max.x),\n                y: body.position.y,\n            });\n        }\n\n        if (body.position.y < this.bounds.min.y) {\n            Matter.Body.setPosition(body, {\n                x: body.position.x,\n                y: this.bounds.max.y - (this.bounds.min.y - body.position.y),\n            });\n        } else if (body.position.y > this.bounds.max.y) {\n            Matter.Body.setPosition(body, {\n                x: body.position.x,\n                y: this.bounds.min.y + (body.position.y - this.bounds.max.y),\n            });\n        }\n    }\n\n    public setBounds(\n        bounds: {\n            min: { x: number; y: number };\n            max: { x: number; y: number };\n        },\n    ): void {\n        this.bounds = bounds;\n    }\n}\n","import \"./style.css\";\nimport { Engine } from \"./core/Engine\";\nimport { BodyFactory } from \"./components/BodyFactory\";\nimport { DebugControl } from \"./components/DebugControl\";\nimport { InputHandler } from \"./components/InputHandler\";\nimport { BoundaryWalls } from \"./components/BoundaryWalls\";\nimport { InitialShapes } from \"./components/InitialShapes\";\nimport { BodyWrapper } from \"./utils/BodyWrapper\";\nimport Matter from \"matter-js\";\n\nclass BallPoolSimulation {\n    private engine: Engine;\n    private debugControl: DebugControl;\n    private bodyFactory: BodyFactory;\n    private inputHandler: InputHandler;\n    private boundaryWalls: BoundaryWalls;\n    private initialShapes: InitialShapes;\n    private bodyWrapper: BodyWrapper;\n\n    constructor() {\n        // Create the physics engine with render\n        this.engine = new Engine({\n            element: document.body,\n            width: window.innerWidth,\n            height: window.innerHeight,\n            showAngleIndicator: false,\n            background: \"#F0F0F0\",\n            wireframes: false,\n        });\n\n        // Create debug control\n        this.debugControl = new DebugControl(this.engine.getRender());\n\n        // Create body factory\n        this.bodyFactory = new BodyFactory(this.debugControl);\n\n        // Create boundary walls\n        this.boundaryWalls = new BoundaryWalls(\n            this.engine,\n            window.innerWidth,\n            window.innerHeight,\n        );\n\n        // Create initial shapes\n        this.initialShapes = new InitialShapes(this.engine);\n\n        // Create input handler\n        this.inputHandler = new InputHandler(\n            this.engine,\n            this.bodyFactory,\n            this.debugControl,\n        );\n\n        // Create body wrapper for screen wrapping\n        this.bodyWrapper = new BodyWrapper({\n            min: { x: -100, y: 0 },\n            max: { x: window.innerWidth + 100, y: window.innerHeight },\n        });\n\n        // Set up screen wrapping for all bodies\n        this.setupBodyWrapping();\n\n        // Set up viewport\n        this.engine.lookAt({\n            min: { x: 0, y: 0 },\n            max: { x: window.innerWidth, y: window.innerHeight },\n        });\n    }\n\n    private setupBodyWrapping(): void {\n        // Set up event to wrap bodies around the screen\n        Matter.Events.on(this.engine.getEngine(), \"beforeUpdate\", () => {\n            const allBodies = this.engine.getAllBodies();\n            for (const body of allBodies) {\n                this.bodyWrapper.wrapBody(body);\n            }\n        });\n    }\n\n    public start(): void {\n        this.engine.start();\n    }\n\n    public stop(): void {\n        this.engine.stop();\n    }\n}\n\n// Start the simulation when the window loads\nwindow.onload = function () {\n    const simulation = new BallPoolSimulation();\n    simulation.start();\n};\n"],"names":["root","factory","module","this","modules","installedModules","__webpack_require__","moduleId","exports","name","getter","value","mode","ns","key","object","property","Common","obj","deep","argsStart","deepClone","i","source","prop","keys","values","path","begin","end","val","parts","array","j","temp","choices","min","max","_seededRandom","colorString","message","warning","haystack","needle","list","func","mapped","graph","result","visited","node","neighbors","neighbor","funcs","chain","lastResult","args","l","base","decomp","global","Bounds","vertices","bounds","velocity","vertex","point","boundsA","boundsB","vector","position","deltaX","deltaY","Vector","x","y","angle","output","cos","sin","magnitude","vectorA","vectorB","vectorC","scalar","negate","Vertices","points","body","pathPattern","match","area","centre","cross","average","signed","mass","numerator","denominator","v","n","verticesLength","translateX","translateY","pointX","pointY","dx","dy","nextVertex","scaleX","scaleY","delta","radius","quality","qualityMin","qualityMax","newVertices","prevVertex","currentRadius","prevNormal","nextNormal","diagonalRadius","radiusVector","midNormal","scaledVertex","precision","alpha","theta","vertexA","vertexB","flag","k","z","upper","lower","Body","Sleeping","Axes","options","defaults","_initProperties","isNonColliding","defaultFillStyle","defaultStrokeStyle","defaultLineWidth","settings","isStatic","part","moment","density","inertia","autoHull","hull","hullCentre","total","relative","updateVelocity","timeScale","speed","translation","rotation","totalArea","totalInertia","deltaTime","deltaTimeSquared","correction","frictionAir","velocityPrevX","velocityPrevY","bodyVelocity","force","offset","properties","Events","eventNames","callback","names","callbacks","newCallbacks","event","eventClone","events","Composite","composite","isModified","updateParents","updateChildren","childComposite","objects","compositeA","compositeB","bodies","constraint","keepStatic","constraints","composites","id","type","recursive","motionSleepThreshold","angularSpeed","motion","minMotion","maxMotion","pairs","pair","collision","bodyA","bodyB","sleepingBody","movingBody","isSleeping","wasSleeping","Collision","Pair","_supports","_overlapAB","_overlapBA","minOverlap","normal","tangent","penetration","supports","depth","minAxis","normalX","normalY","supportsB","supportCount","supportsA","verticesA","verticesB","axes","verticesALength","verticesBLength","verticesAX","verticesAY","verticesBX","verticesBY","axesLength","overlapMin","overlapAxisNumber","overlap","overlapAB","overlapBA","dot","axis","axisX","axisY","minA","minB","maxA","maxB","direction","bodyAPositionX","bodyAPositionY","nearestDistance","vertexC","distance","Contact","timestamp","contacts","parentA","parentB","supportA","contactA","supportB","contactB","isActive","Constraint","initialPointA","initialPointB","length","render","impulse","fixedA","fixedB","pointA","pointB","pointAWorld","pointBWorld","currentLength","difference","isRigid","stiffness","damping","massTotal","inertiaTotal","resistanceTotal","torque","share","normalVelocity","relativeVelocity","zero","pointAX","pointAY","pointBX","pointBY","gradient","xx","Bodies","width","height","rectangle","chamfer","slope","roof","x1","x2","x3","verticesPath","trapezoid","maxSides","circle","sides","yy","polygon","vertexSets","flagInternal","removeCollinear","minimumArea","removeDuplicatePoints","canDecomp","isConvex","isConcave","concave","decomposed","chunk","chunkVertices","coincident_max_dist","partA","partB","pav","pbv","da","db","Detector","detector","bodiesLength","canCollide","collides","collisions","collisionIndex","boundXMax","boundYMax","boundYMin","bodyAStatic","partsALength","partsASingle","partsBLength","partsAStart","partsBStart","filterA","filterB","Mouse","element","mouse","touches","scale","pixelRatio","elementBounds","rootNode","scrollX","scrollY","Plugin","plugin","registered","pluginVersion","registeredVersion","dependency","parsed","plugins","dependencies","sortedDependencies","status","tracked","parsedBase","resolved","pattern","range","major","minor","patch","version","r","Engine","Resolver","Pairs","engine","startTime","world","timing","allBodies","allConstraints","positionDamping","engineA","engineB","gravity","gravityScale","contactCount","pairsLength","contactShare","positionImpulse","positionDampen","slopDampen","positionWarming","verticesTranslate","boundsUpdate","positionImpulseX","positionImpulseY","contact","contactVertex","normalImpulse","tangentImpulse","impulseX","impulseY","timeScaleSquared","timeScaleCubed","restingThresh","restingThreshTangent","frictionNormalMultiplier","frictionMaxStatic","maxFriction","tangentX","tangentY","inverseMassTotal","friction","bodyAVelocityX","bodyAVelocityY","bodyAAngularVelocity","bodyBVelocityX","bodyBVelocityY","bodyBAngularVelocity","offsetAX","offsetAY","offsetBX","offsetBY","velocityPointAX","velocityPointAY","velocityPointBX","velocityPointBY","relativeVelocityX","relativeVelocityY","tangentVelocity","normalOverlap","normalForce","frictionLimit","oAcN","oBcN","contactNormalImpulse","contactTangentImpulse","pairUpdate","pairCreate","pairSetActive","pairsTable","pairsList","pairsListLength","pairsListIndex","collisionStart","collisionEnd","collisionActive","collisionsLength","collisionStartIndex","collisionEndIndex","collisionActiveIndex","Matter","Composites","deprecated","columns","rows","columnGap","rowGap","stack","currentX","currentY","lastBody","row","maxHeight","column","bodyHeight","bodyWidth","xOffsetA","yOffsetA","xOffsetB","yOffsetB","bodyAHeight","bodyAWidth","bodyBHeight","bodyBWidth","crossBrace","col","bodyC","stackX","stackY","actualRows","lastBodyWidth","start","xOffset","number","size","newtonsCradle","separation","wheelSize","group","wheelBase","wheelAOffset","wheelBOffset","wheelYOffset","car","wheelA","wheelB","axelA","axelB","particleRadius","particleOptions","constraintOptions","softBody","Grid","grid","forceUpdate","buckets","bucket","bucketId","gridChanged","newRegion","union","isInsideNewRegion","isInsideOldRegion","regionA","regionB","startCol","endCol","startRow","endRow","gridPairs","pairId","bucketLength","pairKeys","pairKeysLength","MouseConstraint","mouseConstraint","mouseEvents","Query","overlaps","startPoint","endPoint","rayWidth","rayAngle","rayLength","rayX","rayY","ray","outside","Render","_requestAnimationFrame","_cancelAnimationFrame","_createCanvas","loop","time","_updateTiming","canvas","_getPixelRatio","padding","center","viewHeight","viewWidth","outerRatio","innerRatio","boundsWidth","boundsHeight","boundsScaleX","boundsScaleY","context","background","_applyBackground","sections","section","deltaHistory","elapsedHistory","timestampElapsedHistory","engineDeltaHistory","engineUpdatesHistory","engineElapsedHistory","lastEngineUpdatesPerFrame","lastEngineDelta","deltaMean","_mean","elapsedMean","engineDeltaMean","engineUpdatesMean","engineElapsedMean","timestampElapsedMean","rateMean","neededUpdatesPerFrame","fps","graphHeight","gap","count","label","indicator","plotY","c","coils","showInternalEdges","sprite","texture","_getTexture","normalPosX","normalPosY","inspector","selected","item","historySize","devicePixelRatio","backingStorePixelRatio","imagePath","image","cssBackground","Runner","runner","onFrame","tickStartTime","engineDelta","updateCount","frameDelta","deltaHistorySorted","deltaHistoryWindow","frameDeltaSmoothed","maxUpdates","updateStartTime","elapsedTimeTotal","elapsedTimeUpdates","elapsedNextEstimate","valuesLength","SAT","Svg","sampleLength","il","segment","segments","segmentsQueue","lastSegment","lastPoint","segmentIndex","lx","ly","addPoint","px","py","pathSegType","isRelative","addSegmentPoint","segType","x0","y0","y1","y2","segs","len","seg","World","BodyFactory","debugControl","_a","_b","_c","DebugControl","eventName","data","InputHandler","bodyFactory","mousePosition","clickedBody","normalizedDirection","randomBody","button","currentTime","BoundaryWalls","bottomWall","leftWall","rightWall","wall","InitialShapes","triangle","pentagon","BodyWrapper","BallPoolSimulation"],"mappings":"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","x_google_ignoreList":[0]}